{
	"version": 1,
	"collections": [
		{
			"id": "5e043637-98e6-3e4f-9314-487cd626634f",
			"name": "gameframe.online",
			"description": "# Introduction\nWhat does your API do?\n\n# Overview\nThings that the developers should know about\n\n# Authentication\nWhat is the preferred way of using the API?\n\n# Error Codes\nWhat errors and status codes can a user expect?\n\n# Rate limit\nIs there a limit to the number of requests an user can send?",
			"order": [],
			"folders": [
				{
					"owner": "3708974",
					"lastUpdatedBy": "3708974",
					"lastRevision": 3185827110,
					"collection": "5e043637-98e6-3e4f-9314-487cd626634f",
					"folder": null,
					"id": "bd29ff96-f2fe-e428-5913-fcb75166024a",
					"name": "Article",
					"description": "",
					"variables": null,
					"auth": null,
					"events": null,
					"order": [
						"90367ee6-83f3-f3e6-4f92-0c02236a61b6",
						"7e51b3ce-7e93-3e93-0090-2645a9418a02"
					],
					"folders_order": [],
					"createdAt": "2018-02-09T22:32:24.000Z",
					"updatedAt": "2018-02-11T19:40:38.000Z",
					"collection_id": "5e043637-98e6-3e4f-9314-487cd626634f"
				},
				{
					"owner": "3708974",
					"lastUpdatedBy": "3708974",
					"lastRevision": 3185823498,
					"collection": "5e043637-98e6-3e4f-9314-487cd626634f",
					"folder": null,
					"id": "4950b8a8-1d83-1173-f30a-3b5abc483d29",
					"name": "Developer",
					"description": "",
					"variables": null,
					"auth": null,
					"events": null,
					"order": [
						"1d612f26-cc43-8fa3-535f-bbf31936313a",
						"9b938f9f-ab29-1675-2290-e1c89bca3fab"
					],
					"folders_order": [],
					"createdAt": "2018-02-09T22:31:57.000Z",
					"updatedAt": "2018-02-11T19:37:53.000Z"
				},
				{
					"owner": "3708974",
					"lastUpdatedBy": "3708974",
					"lastRevision": 3185820033,
					"collection": "5e043637-98e6-3e4f-9314-487cd626634f",
					"folder": null,
					"id": "1326edf6-171c-e074-23e4-a56ebd707aa1",
					"name": "Game",
					"description": "",
					"variables": null,
					"auth": null,
					"events": null,
					"order": [
						"94766746-a277-9d99-7cf8-7e7921d1b310",
						"803d7265-e3d0-4b4b-0660-292ea8f2e379"
					],
					"folders_order": [],
					"createdAt": "2018-02-09T22:31:16.000Z",
					"updatedAt": "2018-02-11T19:35:24.000Z",
					"collection_id": "5e043637-98e6-3e4f-9314-487cd626634f"
				},
				{
					"owner": "3708974",
					"lastUpdatedBy": "3708974",
					"lastRevision": 3185827110,
					"collection": "5e043637-98e6-3e4f-9314-487cd626634f",
					"folder": null,
					"id": "193def90-ae43-da1e-1205-36d44c985ff5",
					"name": "Video",
					"description": "",
					"variables": null,
					"auth": null,
					"events": [
						{
							"listen": "prerequest",
							"script": {
								"id": "df826d8b-7e98-4a17-91f3-9ebe1524b1ee",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1bad573d-7223-41fb-9883-517d041d10ba",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"order": [
						"b20a45ff-0fc2-b4bc-5622-d8ac99a3f21c"
					],
					"folders_order": [],
					"createdAt": "2018-02-09T22:32:24.000Z",
					"updatedAt": "2018-02-11T19:40:38.000Z",
					"collection_id": "5e043637-98e6-3e4f-9314-487cd626634f",
					"collectionId": "5e043637-98e6-3e4f-9314-487cd626634f"
				}
			],
			"folders_order": [
				"1326edf6-171c-e074-23e4-a56ebd707aa1",
				"4950b8a8-1d83-1173-f30a-3b5abc483d29",
				"bd29ff96-f2fe-e428-5913-fcb75166024a",
				"193def90-ae43-da1e-1205-36d44c985ff5"
			],
			"timestamp": 1518214979640,
			"synced": false,
			"remote_id": "0",
			"owner": "3708974",
			"sharedWithTeam": false,
			"subscribed": false,
			"remoteLink": null,
			"remoteLinkUpdatedAt": null,
			"public": false,
			"createdAt": "2018-02-09T22:22:59.000Z",
			"updatedAt": 1522705327580,
			"write": true,
			"published": false,
			"favorite": false,
			"permissions": {},
			"syncedPermissions": {},
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "413cffd6-991d-490e-ae68-200454db1df5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9c68270f-8cc6-43a5-940a-55f02da5e626",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"variables": null,
			"auth": null,
			"requests": [
				{
					"id": "1d612f26-cc43-8fa3-535f-bbf31936313a",
					"owner": "3708974",
					"headers": "",
					"headerData": [],
					"url": "http://{{host}}/v1/developer/{{developer_id}}",
					"folder": "4950b8a8-1d83-1173-f30a-3b5abc483d29",
					"queryParams": [],
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "d40faec2-1fd1-40a8-b762-d966074cc180",
								"type": "text/javascript",
								"exec": [
									"/*",
									" * Postman test for the DEVELOPER_METADATA query",
									" * Copyright (C) 2018 GameFrame",
									" */",
									"",
									"pm.test(\"HTTP Code\", function() {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"CORS Header\", function() {",
									"  pm.response.to.have.header(\"Access-Control-Allow-Origin\");",
									"});",
									"",
									"pm.test(\"Response Time\", function() {",
									"  pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test(\"Response Content\", function() {",
									"  var json = pm.response.json();",
									"  pm.expect(json.developer_id).to.eql(parseInt(pm.variables.get(\"developer_id\")));",
									"  pm.expect(json.name).to.not.be.null;",
									"  pm.expect(json.country).to.not.be.null;",
									"  pm.expect(json.logo).to.not.be.null;",
									"  pm.expect(json.foundation).to.not.be.null;",
									"  pm.expect(json.games).to.not.be.null;",
									"  pm.expect(json.articles).to.not.be.null;",
									"});",
									"",
									"pm.test(\"Response Links\", function() {",
									"  var json = pm.response.json();",
									"  pm.expect(json.games.length).to.be.above(0);",
									"  pm.expect(json.articles.length).to.be.above(0);",
									"});",
									""
								]
							}
						}
					],
					"pathVariables": {},
					"pathVariableData": [],
					"method": "GET",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"auth": null,
					"time": 1522707340886,
					"name": "DEVELOPER_METADATA",
					"description": "Return a developer based on the developer ID.",
					"collectionId": "5e043637-98e6-3e4f-9314-487cd626634f",
					"responses": [],
					"lastUpdatedBy": "3708974",
					"lastRevision": 3571740273,
					"collection": "5e043637-98e6-3e4f-9314-487cd626634f",
					"rawModeData": null,
					"descriptionFormat": "html",
					"variables": null,
					"createdAt": "2018-02-09T22:47:01.000Z",
					"updatedAt": "2018-04-05T20:23:01.000Z",
					"preRequestScript": null,
					"tests": "/*\n * Postman test for the DEVELOPER_METADATA query\n * Copyright (C) 2018 GameFrame\n */\n\npm.test(\"HTTP Code\", function() {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"CORS Header\", function() {\n  pm.response.to.have.header(\"Access-Control-Allow-Origin\");\n});\n\npm.test(\"Response Time\", function() {\n  pm.expect(pm.response.responseTime).to.be.below(800);\n});\n\npm.test(\"Response Content\", function() {\n  var json = pm.response.json();\n  pm.expect(json.developer_id).to.eql(parseInt(pm.variables.get(\"developer_id\")));\n  pm.expect(json.name).to.not.be.null;\n  pm.expect(json.country).to.not.be.null;\n  pm.expect(json.logo).to.not.be.null;\n  pm.expect(json.foundation).to.not.be.null;\n  pm.expect(json.games).to.not.be.null;\n  pm.expect(json.articles).to.not.be.null;\n});\n\npm.test(\"Response Links\", function() {\n  var json = pm.response.json();\n  pm.expect(json.games.length).to.be.above(0);\n  pm.expect(json.articles.length).to.be.above(0);\n});\n",
					"currentHelper": null,
					"helperAttributes": null
				},
				{
					"id": "7e51b3ce-7e93-3e93-0090-2645a9418a02",
					"headers": "",
					"headerData": [],
					"url": "http://{{host}}/v1/article?page={{page}}&results_per_page={{results_per_page}}",
					"folder": "bd29ff96-f2fe-e428-5913-fcb75166024a",
					"queryParams": [
						{
							"key": "page",
							"value": "{{page}}",
							"equals": true,
							"description": "",
							"enabled": true
						},
						{
							"key": "results_per_page",
							"value": "{{results_per_page}}",
							"equals": true,
							"description": "",
							"enabled": true
						}
					],
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "33fe249e-7868-409e-b4fa-f47de5826d15",
								"type": "text/javascript",
								"exec": [
									"/*",
									" * Postman test for the ARTICLE_LIST query",
									" * Copyright (C) 2018 GameFrame",
									" */",
									"",
									"  pm.test(\"HTTP Code\", function () {",
									"     pm.response.to.have.status(200);",
									"  });",
									"",
									"  pm.test(\"CORS Header\", function () {",
									"     pm.response.to.have.header(\"Access-Control-Allow-Origin\");",
									"  });",
									"",
									"  pm.test(\"Response Time\", function () {",
									"     pm.expect(pm.response.responseTime).to.be.below(2600);",
									"  });",
									"",
									"  pm.test(\"Response Content\", function () {",
									"     var json = pm.response.json();",
									"     pm.expect(json.num_results).to.not.be.null;",
									"     pm.expect(json.total_pages).to.not.be.null;",
									"     pm.expect(json.page).to.eql(parseInt(pm.variables.get(\"page\")));",
									"     pm.expect(json.objects.length).to.eql(parseInt(pm.variables.get(\"results_per_page\")));",
									"  });",
									""
								]
							}
						}
					],
					"pathVariables": {},
					"pathVariableData": [],
					"method": "GET",
					"data": null,
					"dataMode": "params",
					"auth": null,
					"time": 1524191757308,
					"name": "ARTICLE_LIST",
					"description": "Return a list of articles.",
					"collectionId": "5e043637-98e6-3e4f-9314-487cd626634f",
					"preRequestScript": null,
					"tests": "/*\n * Postman test for the ARTICLE_LIST query\n * Copyright (C) 2018 GameFrame\n */\n\n  pm.test(\"HTTP Code\", function () {\n     pm.response.to.have.status(200);\n  });\n\n  pm.test(\"CORS Header\", function () {\n     pm.response.to.have.header(\"Access-Control-Allow-Origin\");\n  });\n\n  pm.test(\"Response Time\", function () {\n     pm.expect(pm.response.responseTime).to.be.below(2600);\n  });\n\n  pm.test(\"Response Content\", function () {\n     var json = pm.response.json();\n     pm.expect(json.num_results).to.not.be.null;\n     pm.expect(json.total_pages).to.not.be.null;\n     pm.expect(json.page).to.eql(parseInt(pm.variables.get(\"page\")));\n     pm.expect(json.objects.length).to.eql(parseInt(pm.variables.get(\"results_per_page\")));\n  });\n",
					"currentHelper": null,
					"helperAttributes": null
				},
				{
					"id": "803d7265-e3d0-4b4b-0660-292ea8f2e379",
					"headers": "",
					"headerData": [],
					"url": "http://{{host}}/v1/game?page={{page}}&results_per_page={{results_per_page}}",
					"folder": "1326edf6-171c-e074-23e4-a56ebd707aa1",
					"queryParams": [
						{
							"key": "page",
							"value": "{{page}}",
							"equals": true,
							"description": "",
							"enabled": true
						},
						{
							"key": "results_per_page",
							"value": "{{results_per_page}}",
							"equals": true,
							"description": "",
							"enabled": true
						}
					],
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "cb714cb6-5085-435e-8f6e-e6e6fb8f71a9",
								"type": "text/javascript",
								"exec": [
									"/*",
									" * Postman test for the GAME_LIST query",
									" * Copyright (C) 2018 GameFrame",
									" */",
									"",
									" pm.test(\"HTTP Code\", function () {",
									"     pm.response.to.have.status(200);",
									" });",
									"",
									" pm.test(\"CORS Header\", function () {",
									"     pm.response.to.have.header(\"Access-Control-Allow-Origin\");",
									" });",
									"",
									" pm.test(\"Response Time\", function () {",
									"     pm.expect(pm.response.responseTime).to.be.below(1600);",
									" });",
									"",
									" pm.test(\"Response Content\", function () {",
									"     var json = pm.response.json();",
									"     pm.expect(json.num_results).to.not.be.null;",
									"     pm.expect(json.total_pages).to.not.be.null;",
									"     pm.expect(json.page).to.eql(parseInt(pm.variables.get(\"page\")));",
									"     pm.expect(json.objects.length).to.eql(parseInt(pm.variables.get(\"results_per_page\")));",
									" });",
									""
								]
							}
						}
					],
					"pathVariables": {},
					"pathVariableData": [],
					"method": "GET",
					"data": null,
					"dataMode": "params",
					"auth": null,
					"time": 1521501610835,
					"name": "GAME_LIST",
					"description": "Return a game list according to the specified parameters.",
					"collectionId": "5e043637-98e6-3e4f-9314-487cd626634f",
					"preRequestScript": null,
					"tests": "/*\n * Postman test for the GAME_LIST query\n * Copyright (C) 2018 GameFrame\n */\n\n pm.test(\"HTTP Code\", function () {\n     pm.response.to.have.status(200);\n });\n\n pm.test(\"CORS Header\", function () {\n     pm.response.to.have.header(\"Access-Control-Allow-Origin\");\n });\n\n pm.test(\"Response Time\", function () {\n     pm.expect(pm.response.responseTime).to.be.below(1600);\n });\n\n pm.test(\"Response Content\", function () {\n     var json = pm.response.json();\n     pm.expect(json.num_results).to.not.be.null;\n     pm.expect(json.total_pages).to.not.be.null;\n     pm.expect(json.page).to.eql(parseInt(pm.variables.get(\"page\")));\n     pm.expect(json.objects.length).to.eql(parseInt(pm.variables.get(\"results_per_page\")));\n });\n",
					"currentHelper": null,
					"helperAttributes": null
				},
				{
					"id": "90367ee6-83f3-f3e6-4f92-0c02236a61b6",
					"headers": "",
					"headerData": [],
					"url": "http://{{host}}/v1/article/{{article_id}}",
					"folder": "bd29ff96-f2fe-e428-5913-fcb75166024a",
					"queryParams": [],
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "4b5fdbf9-d03f-4df0-af6c-11701224dc67",
								"type": "text/javascript",
								"exec": [
									"/*",
									" * Postman test for the ARTICLE_METADATA query",
									" * Copyright (C) 2018 GameFrame",
									" */",
									"",
									"pm.test(\"HTTP Code\", function() {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"CORS Header\", function() {",
									"  pm.response.to.have.header(\"Access-Control-Allow-Origin\");",
									"});",
									"",
									"pm.test(\"Response Time\", function() {",
									"  pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test(\"Response Content\", function() {",
									"  var json = pm.response.json();",
									"  pm.expect(json.article_id).to.eql(parseInt(pm.variables.get(\"article_id\")));",
									"  pm.expect(json.title).to.not.be.null;",
									"  pm.expect(json.outlet).to.not.be.null;",
									"  pm.expect(json.author).to.not.be.null;",
									"  pm.expect(json.timestamp).to.not.be.null;",
									"  pm.expect(json.image).to.not.be.null;",
									"  pm.expect(json.introduction).to.not.be.null;",
									"  pm.expect(json.games).to.not.be.null;",
									"  pm.expect(json.developers).to.not.be.null;",
									"});",
									"",
									"pm.test(\"Response Links\", function() {",
									"  var json = pm.response.json();",
									"  pm.expect(json.games.length).to.be.above(0);",
									"  pm.expect(json.developers.length).to.be.above(0);",
									"});",
									""
								]
							}
						}
					],
					"pathVariables": {},
					"pathVariableData": [],
					"method": "GET",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"auth": null,
					"time": 1522707315833,
					"name": "ARTICLE_METADATA",
					"description": "Return an article based on the article ID.",
					"collectionId": "5e043637-98e6-3e4f-9314-487cd626634f",
					"responses": [],
					"preRequestScript": null,
					"tests": "/*\n * Postman test for the ARTICLE_METADATA query\n * Copyright (C) 2018 GameFrame\n */\n\npm.test(\"HTTP Code\", function() {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"CORS Header\", function() {\n  pm.response.to.have.header(\"Access-Control-Allow-Origin\");\n});\n\npm.test(\"Response Time\", function() {\n  pm.expect(pm.response.responseTime).to.be.below(800);\n});\n\npm.test(\"Response Content\", function() {\n  var json = pm.response.json();\n  pm.expect(json.article_id).to.eql(parseInt(pm.variables.get(\"article_id\")));\n  pm.expect(json.title).to.not.be.null;\n  pm.expect(json.outlet).to.not.be.null;\n  pm.expect(json.author).to.not.be.null;\n  pm.expect(json.timestamp).to.not.be.null;\n  pm.expect(json.image).to.not.be.null;\n  pm.expect(json.introduction).to.not.be.null;\n  pm.expect(json.games).to.not.be.null;\n  pm.expect(json.developers).to.not.be.null;\n});\n\npm.test(\"Response Links\", function() {\n  var json = pm.response.json();\n  pm.expect(json.games.length).to.be.above(0);\n  pm.expect(json.developers.length).to.be.above(0);\n});\n",
					"currentHelper": null,
					"helperAttributes": null
				},
				{
					"id": "94766746-a277-9d99-7cf8-7e7921d1b310",
					"headers": "",
					"headerData": [],
					"url": "http://{{host}}/v1/game/{{game_id}}",
					"folder": "1326edf6-171c-e074-23e4-a56ebd707aa1",
					"queryParams": [],
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "f81f6ce0-bf85-46d4-bd4f-58d284aa1c2e",
								"type": "text/javascript",
								"exec": [
									"/*",
									" * Postman test for the GAME_METADATA query",
									" * Copyright (C) 2018 GameFrame",
									" */",
									"",
									"pm.test(\"HTTP Code\", function() {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"CORS Header\", function() {",
									"  pm.response.to.have.header(\"Access-Control-Allow-Origin\");",
									"});",
									"",
									"pm.test(\"Response Time\", function() {",
									"  pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test(\"Response Content\", function() {",
									"  var json = pm.response.json();",
									"  pm.expect(json.game_id).to.eql(parseInt(pm.variables.get(\"game_id\")));",
									"  pm.expect(json.name).to.not.be.null;",
									"  pm.expect(json.release).to.not.be.null;",
									"  pm.expect(json.cover).to.not.be.null;",
									"  pm.expect(json.screenshots).to.not.be.null;",
									"  pm.expect(json.summary).to.not.be.null;",
									"  pm.expect(json.genres).to.not.be.null;",
									"  pm.expect(json.platforms).to.not.be.null;",
									"  pm.expect(json.articles).to.not.be.null;",
									"  pm.expect(json.developers).to.not.be.null;",
									"});",
									"",
									"pm.test(\"Response Links\", function() {",
									"  var json = pm.response.json();",
									"  pm.expect(json.articles.length).to.be.above(0);",
									"  pm.expect(json.developers.length).to.be.above(0);",
									"});",
									""
								]
							}
						}
					],
					"pathVariables": {},
					"pathVariableData": [],
					"method": "GET",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"auth": null,
					"time": 1522707366555,
					"name": "GAME_METADATA",
					"description": "Return a game based on the game ID.",
					"collectionId": "5e043637-98e6-3e4f-9314-487cd626634f",
					"responses": [],
					"preRequestScript": null,
					"tests": "/*\n * Postman test for the GAME_METADATA query\n * Copyright (C) 2018 GameFrame\n */\n\npm.test(\"HTTP Code\", function() {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"CORS Header\", function() {\n  pm.response.to.have.header(\"Access-Control-Allow-Origin\");\n});\n\npm.test(\"Response Time\", function() {\n  pm.expect(pm.response.responseTime).to.be.below(800);\n});\n\npm.test(\"Response Content\", function() {\n  var json = pm.response.json();\n  pm.expect(json.game_id).to.eql(parseInt(pm.variables.get(\"game_id\")));\n  pm.expect(json.name).to.not.be.null;\n  pm.expect(json.release).to.not.be.null;\n  pm.expect(json.cover).to.not.be.null;\n  pm.expect(json.screenshots).to.not.be.null;\n  pm.expect(json.summary).to.not.be.null;\n  pm.expect(json.genres).to.not.be.null;\n  pm.expect(json.platforms).to.not.be.null;\n  pm.expect(json.articles).to.not.be.null;\n  pm.expect(json.developers).to.not.be.null;\n});\n\npm.test(\"Response Links\", function() {\n  var json = pm.response.json();\n  pm.expect(json.articles.length).to.be.above(0);\n  pm.expect(json.developers.length).to.be.above(0);\n});\n",
					"currentHelper": null,
					"helperAttributes": null
				},
				{
					"id": "9b938f9f-ab29-1675-2290-e1c89bca3fab",
					"owner": "3708974",
					"headers": "",
					"headerData": [],
					"url": "http://{{host}}/v1/developer?page={{page}}&results_per_page={{results_per_page}}",
					"folder": "4950b8a8-1d83-1173-f30a-3b5abc483d29",
					"queryParams": [
						{
							"key": "page",
							"value": "{{page}}",
							"equals": true,
							"description": "",
							"enabled": true
						},
						{
							"key": "results_per_page",
							"value": "{{results_per_page}}",
							"equals": true,
							"description": "",
							"enabled": true
						}
					],
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "bd40cc12-f010-45e2-bacd-13b31d67b025",
								"type": "text/javascript",
								"exec": [
									"/*",
									" * Postman test for the DEVELOPER_LIST query",
									" * Copyright (C) 2018 GameFrame",
									" */",
									"",
									" pm.test(\"HTTP Code\", function () {",
									"     pm.response.to.have.status(200);",
									" });",
									"",
									" pm.test(\"CORS Header\", function () {",
									"     pm.response.to.have.header(\"Access-Control-Allow-Origin\");",
									" });",
									"",
									" pm.test(\"Response Time\", function () {",
									"     pm.expect(pm.response.responseTime).to.be.below(1600);",
									" });",
									"",
									" pm.test(\"Response Content\", function () {",
									"     var json = pm.response.json();",
									"     pm.expect(json.num_results).to.not.be.null;",
									"     pm.expect(json.total_pages).to.not.be.null;",
									"     pm.expect(json.page).to.eql(parseInt(pm.variables.get(\"page\")));",
									"     pm.expect(json.objects.length).to.eql(parseInt(pm.variables.get(\"results_per_page\")));",
									" });",
									""
								]
							}
						}
					],
					"pathVariables": {},
					"pathVariableData": [],
					"method": "GET",
					"data": null,
					"dataMode": "params",
					"auth": null,
					"time": 1521501586601,
					"name": "DEVELOPER_LIST",
					"description": "Return a list of developers.",
					"collectionId": "5e043637-98e6-3e4f-9314-487cd626634f",
					"lastUpdatedBy": "3708974",
					"lastRevision": 3571745894,
					"collection": "5e043637-98e6-3e4f-9314-487cd626634f",
					"rawModeData": null,
					"descriptionFormat": null,
					"variables": null,
					"createdAt": "2018-02-11T19:26:33.000Z",
					"updatedAt": "2018-04-05T20:24:12.000Z",
					"preRequestScript": null,
					"tests": "/*\n * Postman test for the DEVELOPER_LIST query\n * Copyright (C) 2018 GameFrame\n */\n\n pm.test(\"HTTP Code\", function () {\n     pm.response.to.have.status(200);\n });\n\n pm.test(\"CORS Header\", function () {\n     pm.response.to.have.header(\"Access-Control-Allow-Origin\");\n });\n\n pm.test(\"Response Time\", function () {\n     pm.expect(pm.response.responseTime).to.be.below(1600);\n });\n\n pm.test(\"Response Content\", function () {\n     var json = pm.response.json();\n     pm.expect(json.num_results).to.not.be.null;\n     pm.expect(json.total_pages).to.not.be.null;\n     pm.expect(json.page).to.eql(parseInt(pm.variables.get(\"page\")));\n     pm.expect(json.objects.length).to.eql(parseInt(pm.variables.get(\"results_per_page\")));\n });\n",
					"currentHelper": null,
					"helperAttributes": null
				},
				{
					"id": "b20a45ff-0fc2-b4bc-5622-d8ac99a3f21c",
					"owner": "3708974",
					"headers": "",
					"headerData": [],
					"url": "http://{{host}}/v1/video/{{video_id}}",
					"folder": "193def90-ae43-da1e-1205-36d44c985ff5",
					"queryParams": [],
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "7d6b729f-a646-4b91-a43d-083391794f9e",
								"type": "text/javascript",
								"exec": [
									"/*",
									" * Postman test for the VIDEO_METADATA query",
									" * Copyright (C) 2018 GameFrame",
									" */",
									"",
									"pm.test(\"HTTP Code\", function() {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"CORS Header\", function() {",
									"  pm.response.to.have.header(\"Access-Control-Allow-Origin\");",
									"});",
									"",
									"pm.test(\"Response Time\", function() {",
									"  pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test(\"Response Content\", function() {",
									"  var json = pm.response.json();",
									"  pm.expect(json.video_id).to.eql(parseInt(pm.variables.get(\"video_id\")));",
									"  pm.expect(json.name).to.not.be.null;",
									"  pm.expect(json.channel).to.not.be.null;",
									"  pm.expect(json.description).to.not.be.null;",
									"  pm.expect(json.timestamp).to.not.be.null;",
									"  pm.expect(json.thumbnail).to.not.be.null;",
									"  pm.expect(json.video_link).to.not.be.null;",
									"  pm.expect(json.games).to.not.be.null;",
									"});",
									""
								]
							}
						}
					],
					"pathVariables": {},
					"pathVariableData": [],
					"method": "GET",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"auth": null,
					"time": 1522707384641,
					"name": "VIDEO_METADATA",
					"description": "Return a video based on the video ID.",
					"collectionId": "5e043637-98e6-3e4f-9314-487cd626634f",
					"responses": [],
					"lastUpdatedBy": "3708974",
					"lastRevision": 3572191410,
					"collection": "5e043637-98e6-3e4f-9314-487cd626634f",
					"rawModeData": null,
					"descriptionFormat": null,
					"variables": null,
					"createdAt": "2018-04-02T21:41:49.000Z",
					"updatedAt": "2018-04-05T22:07:40.000Z",
					"preRequestScript": null,
					"tests": "/*\n * Postman test for the VIDEO_METADATA query\n * Copyright (C) 2018 GameFrame\n */\n\npm.test(\"HTTP Code\", function() {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"CORS Header\", function() {\n  pm.response.to.have.header(\"Access-Control-Allow-Origin\");\n});\n\npm.test(\"Response Time\", function() {\n  pm.expect(pm.response.responseTime).to.be.below(800);\n});\n\npm.test(\"Response Content\", function() {\n  var json = pm.response.json();\n  pm.expect(json.video_id).to.eql(parseInt(pm.variables.get(\"video_id\")));\n  pm.expect(json.name).to.not.be.null;\n  pm.expect(json.channel).to.not.be.null;\n  pm.expect(json.description).to.not.be.null;\n  pm.expect(json.timestamp).to.not.be.null;\n  pm.expect(json.thumbnail).to.not.be.null;\n  pm.expect(json.video_link).to.not.be.null;\n  pm.expect(json.games).to.not.be.null;\n});\n",
					"currentHelper": null,
					"helperAttributes": null
				}
			]
		},
		{
			"id": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
			"name": "Postman Echo",
			"description": "Postman Echo is service you can use to test your REST clients and make sample API calls. It provides endpoints for `GET`, `POST`, `PUT`, various auth mechanisms and other utility endpoints.\n\nThe documentation for the endpoints as well as example responses can be found at [https://postman-echo.com](https://postman-echo.com/?source=echo-collection-app-onboarding)",
			"order": [
				"a4b9fdf6-3270-acba-f632-bea1ee8ef96c"
			],
			"folders": [
				{
					"owner": 0,
					"lastUpdatedBy": "631643",
					"lastRevision": 277278520,
					"id": "09ddd67c-13fe-4626-8dd4-fc64f1fc27b7",
					"name": "Auth: Digest",
					"description": "Digest authentication protects an endpoint with a username and password without actually transmitting the password over network.\nOne has to apply a hash function (like MD5, etc) to the username and password before sending them over the network.\n\n> Username: `postman`\n>\n> Password: `password`\n\nUnlike Basic-Auth, authentication happens using two consecutive requests where the first request returns `401 Unauthorised` along with `WWW-Authenticate` header containing information that needs to be used to authenticate subsequent calls.\n\nTo know more about digest authentication, refer to the [Digest Access Authentication](https://en.wikipedia.org/wiki/Digest_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#digest-auth) elaborates how to use the same within the Postman app.",
					"order": [
						"70ed7920-ead1-2d20-645a-c716ab0fd137",
						"a4c04e32-72cf-0475-07dc-89c23f85cf0c"
					],
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65"
				},
				{
					"owner": 0,
					"lastUpdatedBy": "631643",
					"lastRevision": 277278516,
					"id": "df815c41-a76b-4b5b-7129-ea59275f254b",
					"name": "Auth: Others",
					"description": "",
					"order": [
						"42c867ca-e72b-3307-169b-26a478b00641",
						"2f79ab5b-9029-56c2-7b05-52047790d670",
						"843acf02-a33c-c4bb-d742-c07b9212e4b0"
					],
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65"
				},
				{
					"owner": 0,
					"lastUpdatedBy": "631643",
					"lastRevision": 441378992,
					"id": "37368024-f6a8-0f70-85fc-7e876cde9e33",
					"name": "Cookies",
					"description": "The cookie related endpoints allow one to get, set and delete simple cookies.\n\nCookies are small snippets of information that is stored in the browser and sent back to the server with every subsequent requests in order to store useful information between requests.\nIf you want to know more about cookies, read the [HTTP Cookie](https://en.wikipedia.org/wiki/HTTP_cookie) article on wikipedia.",
					"order": [
						"3de3b135-b3cc-3a68-ba27-b6d373e03c8c",
						"8dc08eee-a543-7c1c-297f-b0b7040c35c6",
						"a4f24593-448b-88de-963f-eeb952d38a57"
					],
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65"
				},
				{
					"owner": 0,
					"lastUpdatedBy": "631643",
					"lastRevision": 441378915,
					"id": "5d3595b3-5e8e-9e33-05ed-855c77298e4e",
					"name": "Headers",
					"description": "The following set of endpoints allow one to see the headers being sent as part of a request and to get a custom set of headers as part of response.\n\nHTTP header fields provide required information about the request or response, or about the object sent in the message body. Both request headers and response headers can be controlled using these endpoints.",
					"order": [
						"da16c006-6293-c1fe-ea42-e9ba8a5e68b1",
						"e50f9111-3a52-a325-47f1-fc702bea1fff"
					],
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65"
				},
				{
					"owner": 0,
					"lastUpdatedBy": "631643",
					"lastRevision": 928381292,
					"id": "9a4c3bce-30f7-a496-c9ec-78afecbf1545",
					"name": "Request Methods",
					"description": "HTTP has multiple request \"verbs\", such as `GET`, `PUT`, `POST`, `DELETE`,\n`PATCH`, `HEAD`, etc. \n\nAn HTTP Method (verb) defines how a request should be interpreted by a server. \nThe endpoints in this section demonstrate various HTTP Verbs. Postman supports \nall the HTTP Verbs, including some rarely used ones, such as `PROPFIND`, `UNLINK`, \netc.\n\nFor details about HTTP Verbs, refer to [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9)\n",
					"order": [
						"078883ea-ac9e-842e-8f41-784b59a33722",
						"1eb1cf9d-2be7-4060-f554-73cd13940174",
						"083e46e7-53ea-87b1-8104-f8917ce58a17",
						"12c51acc-50d2-2d9b-10d6-cc80e3a10d70",
						"8c53212f-42cd-cb37-6e02-08c47a7c8bb1",
						"1f0fad16-6bff-5130-2056-7f4af6b18912"
					],
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65"
				},
				{
					"owner": 0,
					"lastUpdatedBy": "631643",
					"lastRevision": 928389557,
					"id": "930f54b4-c5cd-2363-7cf5-b9022d3c0aae",
					"name": "Utilities",
					"description": "",
					"order": [
						"6cfd22d8-26cc-7d3e-cf50-16d400211a76",
						"159a89e2-110d-0785-9dd7-9e73b2d6878b",
						"0189572f-509e-efe0-686d-eed4b3d2f1f0",
						"154510d1-65a8-a2d0-f157-aa2c694d7be7",
						"fd961ad0-ab24-68d8-4be5-573e8585d526",
						"5d3b31c0-fa26-ee03-5c1b-3715825d811d",
						"39a204d5-944a-59d3-2dfe-90fd378cc3da"
					],
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65"
				},
				{
					"owner": 0,
					"lastUpdatedBy": "631643",
					"lastRevision": 928398965,
					"id": "74a8adf0-4f3f-068a-7c35-9745aa7b57d1",
					"name": "Utilities / Date and Time",
					"description": "A set of `/time/*` mounted requests to perform date-time manipulations, among other operations.\n",
					"order": [
						"2881587c-bd9f-0ed1-7c31-525e4ed5306c",
						"54dfe6f2-5887-1078-1f3c-3cf36acc648e",
						"c38e8be7-1739-2108-1804-a8b171c75298",
						"f922a99e-6e96-ded7-ac6f-3ca6f958987d",
						"4cef08e8-75d3-2a31-e703-115cf976e75e",
						"b4a2e234-3b0c-1a3e-14f8-5cafd567ee08",
						"4dc695e5-6b1e-1edf-c68d-014139c59d7e",
						"e8a83301-4e86-1e6c-e88c-2cbedc1524d6",
						"b709b99c-3347-40fc-2c21-98ceb7f9e267",
						"47f089f3-196e-fb13-fdf6-1d62f85ad96f",
						"8cc2e733-7e68-8ad8-efd1-5393510a300a",
						"1ef02347-9a4d-5d6a-1b75-144dd6de641f"
					],
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65"
				},
				{
					"owner": 0,
					"lastUpdatedBy": "631643",
					"lastRevision": 928442464,
					"id": "084b21bd-d250-180b-5ed8-94cfaca39fdd",
					"name": "Utilities / Postman Collection",
					"description": "",
					"order": [
						"fffc59d5-1e2d-ccc8-2101-2f7b9216be40",
						"dc8d6e30-c1cf-9d98-4b95-fc1ca6196511"
					],
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65"
				}
			],
			"folders_order": [
				"09ddd67c-13fe-4626-8dd4-fc64f1fc27b7",
				"df815c41-a76b-4b5b-7129-ea59275f254b",
				"37368024-f6a8-0f70-85fc-7e876cde9e33",
				"5d3595b3-5e8e-9e33-05ed-855c77298e4e",
				"9a4c3bce-30f7-a496-c9ec-78afecbf1545",
				"930f54b4-c5cd-2363-7cf5-b9022d3c0aae",
				"74a8adf0-4f3f-068a-7c35-9745aa7b57d1",
				"084b21bd-d250-180b-5ed8-94cfaca39fdd"
			],
			"timestamp": 0,
			"synced": true,
			"remote_id": 0,
			"owner": "3708974",
			"subscribed": false,
			"remoteLink": "",
			"remoteLinkUpdatedAt": null,
			"public": false,
			"createdAt": 1518210090026,
			"updatedAt": 1519673187217,
			"write": true,
			"published": false,
			"favorite": false,
			"permissions": {},
			"syncedPermissions": {},
			"events": [],
			"variables": [],
			"auth": null,
			"requests": [
				{
					"folder": "930f54b4-c5cd-2363-7cf5-b9022d3c0aae",
					"id": "0189572f-509e-efe0-686d-eed4b3d2f1f0",
					"name": "Delay Response",
					"dataMode": "params",
					"data": [],
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "Using this endpoint one can configure how long it takes for the server to come back with a response. Appending a number to the URL defines the time (in seconds) the server will wait before responding.\n\nNote that a maximum delay of 10 seconds is accepted by the server.",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/delay/3",
					"preRequestScript": "",
					"tests": "var responseJSON;\ntry { \n    responseJSON = JSON.parse(responseBody); \n    tests[\"response body has key delay\"] = 'delay' in responseJSON;\n}\ncatch (e) { }\ntests[\"response code is 200\"] = responseCode.code === 200;\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [
						{
							"owner": 0,
							"lastUpdatedBy": "631643",
							"lastRevision": 897325347,
							"request": "0189572f-509e-efe0-686d-eed4b3d2f1f0",
							"id": "64f3f9f5-e3ca-9cdd-590c-88820be2f442",
							"name": "success-response",
							"status": "",
							"responseCode": {
								"code": 200,
								"name": "OK",
								"fromServer": true
							},
							"time": "4769",
							"headers": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"name": "Access-Control-Allow-Origin",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Length",
									"value": "13",
									"name": "Content-Length",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Mon, 02 Jan 2017 09:19:03 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"d-t/L/D5c0SDl+MoXtKdSVOg\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "nginx/1.10.1",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": ""
								}
							],
							"cookies": [
								{
									"url": "https://echo.getpostman.com/delay/3",
									"name": "sails.sid",
									"value": "s%3AYjUiFBtGiJVL2a-qzZQZ1DFlAMhgXN9O.WaAjRUV0OteZxwmhbNibuB7VKse068JJIh6PwLQUKmQ",
									"domain": "echo.getpostman.com",
									"secure": false,
									"httpOnly": true,
									"expirationDate": 2147463847,
									"path": "/"
								}
							],
							"mime": "",
							"text": "{\"delay\":\"3\"}",
							"language": "json",
							"rawDataType": null,
							"state": {
								"size": "normal"
							},
							"previewType": "text",
							"searchResultScrolledTo": "-1",
							"version": null,
							"requestObject": "{\"url\":\"https://echo.getpostman.com/delay/3\",\"headers\":[],\"data\":[],\"method\":\"GET\",\"dataMode\":\"params\"}",
							"createdAt": "2017-01-02T09:19:23.000Z",
							"updatedAt": "2017-01-02T09:19:23.000Z"
						}
					],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"response body has key delay\"] = 'delay' in responseJSON;",
									"}",
									"catch (e) { }",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									""
								]
							}
						}
					]
				},
				{
					"folder": "9a4c3bce-30f7-a496-c9ec-78afecbf1545",
					"id": "078883ea-ac9e-842e-8f41-784b59a33722",
					"name": "GET Request",
					"dataMode": "params",
					"data": [],
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "The HTTP `GET` request method is meant to retrieve data from a server. The data\nis identified by a unique URI (Uniform Resource Identifier). \n\nA `GET` request can pass parameters to the server using \"Query String \nParameters\". For example, in the following request,\n\n> http://example.com/hi/there?hand=wave\n\nThe parameter \"hand\" has the value \"wave\".\n\nThis endpoint echoes the HTTP headers, request parameters and the complete\nURI requested.",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/get?test=123",
					"preRequestScript": "",
					"tests": "var responseJSON;\n\ntry { \n    responseJSON = JSON.parse(responseBody); \n    tests['response is valid JSON'] = true;\n}\ncatch (e) { \n    responseJSON = {}; \n    tests['response is valid JSON'] = false;\n}\n\ntests['response json contains headers'] = _.has(responseJSON, 'headers');\ntests['response json contains args'] = _.has(responseJSON, 'args');\ntests['response json contains url'] = _.has(responseJSON, 'url');\n\ntests['args key contains argument passed as url parameter'] = ('test' in responseJSON.args);\ntests['args passed via request url params has value \"123\"'] = (_.get(responseJSON, 'args.test') === \"123\");",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"tests['response json contains headers'] = _.has(responseJSON, 'headers');",
									"tests['response json contains args'] = _.has(responseJSON, 'args');",
									"tests['response json contains url'] = _.has(responseJSON, 'url');",
									"",
									"tests['args key contains argument passed as url parameter'] = ('test' in responseJSON.args);",
									"tests['args passed via request url params has value \"123\"'] = (_.get(responseJSON, 'args.test') === \"123\");"
								]
							}
						}
					]
				},
				{
					"folder": "9a4c3bce-30f7-a496-c9ec-78afecbf1545",
					"id": "083e46e7-53ea-87b1-8104-f8917ce58a17",
					"name": "POST Form Data",
					"dataMode": "urlencoded",
					"data": [
						{
							"key": "strange",
							"value": "boom",
							"type": "text",
							"enabled": true
						}
					],
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested when data is sent as a form parameter.",
					"headers": "Content-Type: application/x-www-form-urlencoded\n",
					"method": "POST",
					"pathVariables": {},
					"url": "https://postman-echo.com/post",
					"preRequestScript": "",
					"tests": "var responseJSON;\n\ntry { \n    responseJSON = JSON.parse(responseBody); \n    tests['response is valid JSON'] = true;\n}\ncatch (e) { \n    responseJSON = {}; \n    tests['response is valid JSON'] = false;\n}\n\n\ntests['response has post data'] = _.has(responseJSON, 'form');\ntests['response matches the data posted'] = (responseJSON.form && responseJSON.form.strange === 'boom');",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"",
									"tests['response has post data'] = _.has(responseJSON, 'form');",
									"tests['response matches the data posted'] = (responseJSON.form && responseJSON.form.strange === 'boom');"
								]
							}
						}
					]
				},
				{
					"folder": "9a4c3bce-30f7-a496-c9ec-78afecbf1545",
					"id": "12c51acc-50d2-2d9b-10d6-cc80e3a10d70",
					"name": "PUT Request",
					"dataMode": "raw",
					"data": "Etiam mi lacus, cursus vitae felis et, blandit pellentesque neque. Vestibulum eget nisi a tortor commodo dignissim.\nQuisque ipsum ligula, faucibus a felis a, commodo elementum nisl. Mauris vulputate sapien et tincidunt viverra. Donec vitae velit nec metus.",
					"rawModeData": "Etiam mi lacus, cursus vitae felis et, blandit pellentesque neque. Vestibulum eget nisi a tortor commodo dignissim.\nQuisque ipsum ligula, faucibus a felis a, commodo elementum nisl. Mauris vulputate sapien et tincidunt viverra. Donec vitae velit nec metus.",
					"descriptionFormat": null,
					"description": "The HTTP `PUT` request method is similar to HTTP `POST`. It too is meant to \ntransfer data to a server (and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `PUT` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following \nraw HTTP request,\n\n> PUT /hi/there?hand=wave\n>\n> <request-body>\n\n\n",
					"headers": "",
					"method": "PUT",
					"pathVariables": {},
					"url": "https://postman-echo.com/put",
					"preRequestScript": "",
					"tests": "var responseJSON;\n\ntry { \n    responseJSON = JSON.parse(responseBody); \n    tests['response is valid JSON'] = true;\n}\ncatch (e) { \n    responseJSON = {}; \n    tests['response is valid JSON'] = false;\n}\n\n\ntests['response has PUT data'] = _.has(responseJSON, 'data');\ntests['response matches the data sent in request'] = (responseJSON.data && responseJSON.data.length === 256);",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"",
									"tests['response has PUT data'] = _.has(responseJSON, 'data');",
									"tests['response matches the data sent in request'] = (responseJSON.data && responseJSON.data.length === 256);"
								]
							}
						}
					]
				},
				{
					"folder": "930f54b4-c5cd-2363-7cf5-b9022d3c0aae",
					"id": "154510d1-65a8-a2d0-f157-aa2c694d7be7",
					"name": "Get UTF8 Encoded Response",
					"dataMode": "params",
					"data": [],
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "If a response of an endpoint requires to send data beyond the basic English / ASCII character set, the `charset` parameter in the `Content-Type` response header defines the character encoding policy.\n\nThis endpoint returns an `UTF8` character encoded response body with text in various languages such as Greek, Latin, East Asian, etc. Postman can interpret the character encoding and use appropriate methods to display the character set in responses.",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/encoding/utf8",
					"preRequestScript": "",
					"tests": "tests[\"response code is 200\"] = responseCode.code === 200;",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					]
				},
				{
					"folder": "930f54b4-c5cd-2363-7cf5-b9022d3c0aae",
					"id": "159a89e2-110d-0785-9dd7-9e73b2d6878b",
					"name": "Streamed Response",
					"dataMode": "params",
					"data": [],
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "This endpoint allows one to recieve streaming http response using [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) of a configurable length.\n\nA streaming response does not wait for the entire response to be generated on server before flushing it out. This implies that for a fairly large response, parts of it can be streamed to the requestee as and when it is generated on server. The client can then take actions of processing this partially received data.",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/stream/10",
					"preRequestScript": "",
					"tests": "tests[\"response code is 200\"] = responseCode.code === 200;\ntests[\"response is sent in chunks\"] = (postman.getResponseHeader('Transfer-Encoding') === 'chunked')\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"response is sent in chunks\"] = (postman.getResponseHeader('Transfer-Encoding') === 'chunked')",
									""
								]
							}
						}
					]
				},
				{
					"folder": "9a4c3bce-30f7-a496-c9ec-78afecbf1545",
					"id": "1eb1cf9d-2be7-4060-f554-73cd13940174",
					"name": "POST Raw Text",
					"dataMode": "raw",
					"data": "Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium. Praesent neque quam, tincidunt nec leo eget, rutrum vehicula magna.\nMaecenas consequat elementum elit, id semper sem tristique et. Integer pulvinar enim quis consectetur interdum volutpat.",
					"rawModeData": "Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium. Praesent neque quam, tincidunt nec leo eget, rutrum vehicula magna.\nMaecenas consequat elementum elit, id semper sem tristique et. Integer pulvinar enim quis consectetur interdum volutpat.",
					"descriptionFormat": null,
					"description": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested.",
					"headers": "Content-Type: text/plain\n",
					"method": "POST",
					"pathVariables": {},
					"url": "https://postman-echo.com/post",
					"preRequestScript": "",
					"tests": "var responseJSON;\n\ntry { \n    responseJSON = JSON.parse(responseBody); \n    tests['response is valid JSON'] = true;\n}\ncatch (e) { \n    responseJSON = {}; \n    tests['response is valid JSON'] = false;\n}\n\n\ntests['response has post data'] = _.has(responseJSON, 'data');\ntests['response matches the data posted'] = (responseJSON.data && responseJSON.data.length === 256);\n\ntests[\"content-type equals text/plain\"] = responseJSON && responseJSON.headers && (responseJSON.headers[\"content-type\"] === 'text/plain');",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"",
									"tests['response has post data'] = _.has(responseJSON, 'data');",
									"tests['response matches the data posted'] = (responseJSON.data && responseJSON.data.length === 256);",
									"",
									"tests[\"content-type equals text/plain\"] = responseJSON && responseJSON.headers && (responseJSON.headers[\"content-type\"] === 'text/plain');"
								]
							}
						}
					]
				},
				{
					"folder": "74a8adf0-4f3f-068a-7c35-9745aa7b57d1",
					"id": "1ef02347-9a4d-5d6a-1b75-144dd6de641f",
					"name": "Leap year check",
					"dataMode": "params",
					"data": null,
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "A simple `GET` request to `/time/leap` to check if the provided/current timestamp belongs to a leap year.\n\nThis endpoint also accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `leap` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  leap: true/false\n}\n```",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/time/leap?timestamp=2016-10-10",
					"preRequestScript": null,
					"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Comparsion was correct\"] = JSON.parse(responseBody).leap === true;",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Comparsion was correct\"] = JSON.parse(responseBody).leap === true;"
								]
							}
						}
					]
				},
				{
					"folder": "9a4c3bce-30f7-a496-c9ec-78afecbf1545",
					"id": "1f0fad16-6bff-5130-2056-7f4af6b18912",
					"name": "DELETE Request",
					"dataMode": "raw",
					"data": "Donec fermentum, nisi sed cursus eleifend, nulla tortor ultricies tellus, ut vehicula orci arcu ut velit. In volutpat egestas dapibus.\nMorbi condimentum vestibulum sapien. Etiam dignissim diam quis eros lobortis gravida vel lobortis est. Etiam gravida sed.",
					"rawModeData": "Donec fermentum, nisi sed cursus eleifend, nulla tortor ultricies tellus, ut vehicula orci arcu ut velit. In volutpat egestas dapibus.\nMorbi condimentum vestibulum sapien. Etiam dignissim diam quis eros lobortis gravida vel lobortis est. Etiam gravida sed.",
					"descriptionFormat": null,
					"description": "The HTTP `DELETE` method is used to delete resources on a server. The exact\nuse of `DELETE` requests depends on the server implementation. In general, \n`DELETE` requests support both, Query String parameters as well as a Request \nBody.\n\nThis endpoint accepts an HTTP `DELETE` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body.",
					"headers": "",
					"method": "DELETE",
					"pathVariables": {},
					"url": "https://postman-echo.com/delete",
					"preRequestScript": "",
					"tests": "var responseJSON;\n\ntry { \n    responseJSON = JSON.parse(responseBody); \n    tests['response is valid JSON'] = true;\n}\ncatch (e) { \n    responseJSON = {}; \n    tests['response is valid JSON'] = false;\n}\n\n\ntests['response has PUT data'] = _.has(responseJSON, 'data');\ntests['response matches the data sent in request'] = (responseJSON.data && responseJSON.data.length === 256);",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"",
									"tests['response has PUT data'] = _.has(responseJSON, 'data');",
									"tests['response matches the data sent in request'] = (responseJSON.data && responseJSON.data.length === 256);"
								]
							}
						}
					]
				},
				{
					"folder": "74a8adf0-4f3f-068a-7c35-9745aa7b57d1",
					"id": "2881587c-bd9f-0ed1-7c31-525e4ed5306c",
					"name": "Current UTC time",
					"dataMode": "params",
					"data": null,
					"rawModeData": null,
					"descriptionFormat": "html",
					"description": "A simple `GET` request to `/time/now` to return the current timestamp as a UTC string.\n\n```\nFri, 04 Nov 2016 09:00:46 GMT\n```",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/time/now",
					"preRequestScript": null,
					"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Time is in a valid format\"] = responseBody === postman.getResponseHeader(\"date\");\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [
						{
							"owner": 0,
							"lastUpdatedBy": "631643",
							"lastRevision": 928403298,
							"request": "2881587c-bd9f-0ed1-7c31-525e4ed5306c",
							"id": "f3f2053b-e446-a8b1-aee2-124618275f94",
							"name": "time as text",
							"status": "",
							"responseCode": {
								"code": 200,
								"name": "OK",
								"fromServer": true
							},
							"time": "749",
							"headers": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"name": "Access-Control-Allow-Origin",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": ""
								},
								{
									"key": "Content-Length",
									"value": "49",
									"name": "Content-Length",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Wed, 11 Jan 2017 10:27:12 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"1d-2jJhkzratfVX9VZ0+raHbw\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "nginx/1.10.1",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": ""
								},
								{
									"key": "set-cookie",
									"value": "sails.sid=s%3A2lT3TO7qS1tadeSAp4axl-NcXG9CV6Rf.HGqLY%2FlKEKY4fgCLePaAZs3tCHp%2Bglf7ZOJYlonGeig; Path=/; HttpOnly",
									"name": "set-cookie",
									"description": ""
								}
							],
							"cookies": [
								{
									"url": "https://postman-echo.com/time/now",
									"name": "sails.sid",
									"value": "s%3A2lT3TO7qS1tadeSAp4axl-NcXG9CV6Rf.HGqLY%2FlKEKY4fgCLePaAZs3tCHp%2Bglf7ZOJYlonGeig",
									"domain": "postman-echo.com",
									"secure": false,
									"httpOnly": true,
									"expirationDate": 2147463847,
									"path": "/"
								}
							],
							"mime": "",
							"text": "Wed, 11 Jan 2017 10:27:12 GMT",
							"language": "html",
							"rawDataType": null,
							"state": {
								"size": "normal"
							},
							"previewType": "text",
							"searchResultScrolledTo": "-1",
							"version": null,
							"requestObject": "{\"url\":\"https://postman-echo.com/time/now\",\"headers\":[],\"data\":null,\"method\":\"GET\",\"dataMode\":\"params\"}",
							"createdAt": "2017-01-11T10:27:27.000Z",
							"updatedAt": "2017-01-11T10:27:27.000Z"
						}
					],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Time is in a valid format\"] = responseBody === postman.getResponseHeader(\"date\");",
									""
								]
							}
						}
					]
				},
				{
					"folder": "df815c41-a76b-4b5b-7129-ea59275f254b",
					"id": "2f79ab5b-9029-56c2-7b05-52047790d670",
					"name": "OAuth1.0 Verify Signature",
					"dataMode": "params",
					"data": [
						{
							"key": "code",
							"value": "xWnkliVQJURqB2x1",
							"type": "text",
							"enabled": true
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "text",
							"enabled": true
						},
						{
							"key": "redirect_uri",
							"value": "https://www.getpostman.com/oauth2/callback",
							"type": "text",
							"enabled": true
						},
						{
							"key": "client_id",
							"value": "abc123",
							"type": "text",
							"enabled": true
						},
						{
							"key": "client_secret",
							"value": "ssh-secret",
							"type": "text",
							"enabled": true
						}
					],
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "OAuth1.0a is a specification that defines a protocol that can be used by one\nservice to access \"protected\" resources (endpoints) on another service. A\nmajor part of OAuth1.0 is HTTP Request Signing. This endpoint allows you to \ncheck whether the request calculation works properly in the client. \n\nThe endpoint supports the HTTP ``Authorization`` header. In case the signature\nverification fails, the endpoint provides the four debug values,\n\n* ``base_uri``\n* ``normalized_param_string``\n* ``base_string``\n* ``signing_key``\n\nFor more details about these parameters, check the [OAuth1.0a Specification](http://oauth.net/core/1.0a/)\n\nIn order to use this endpoint, you can set the following values:\n\n> Consumer Key: ``RKCGzna7bv9YD57c``\n>\n> Consumer Secret: ``D+EdQ-gs$-%@2Nu7``\n\nIf you are using Postman, also check the \"Add params to header\" and \n\"Auto add parameters\" boxes.",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/oauth1",
					"preRequestScript": "",
					"tests": "tests[\"response code is 200\"] = responseCode.code === 200;\nvar body = JSON.parse(responseBody);\ntests[\"Body contains status pass\"] = body[\"status\"] == \"pass\"",
					"currentHelper": "oAuth1",
					"helperAttributes": "{\"id\":\"oAuth1\",\"consumerKey\":\"RKCGzna7bv9YD57c\",\"consumerSecret\":\"D+EdQ-gs$-%@2Nu7\",\"token\":\"\",\"tokenSecret\":\"\",\"signatureMethod\":\"HMAC-SHA1\",\"timestamp\":1472121255,\"nonce\":\"e5VR16\",\"version\":\"1.0\",\"realm\":\"\",\"encodeSignature\":false,\"header\":true,\"includeEmpty\":false,\"saveToRequest\":true}",
					"responses": [
						{
							"owner": 0,
							"lastUpdatedBy": "631643",
							"lastRevision": 505395018,
							"request": "2f79ab5b-9029-56c2-7b05-52047790d670",
							"id": "d234f0e3-683c-1705-d4b1-c94f6c27fa52",
							"name": "200",
							"status": "",
							"responseCode": {
								"code": 200,
								"name": "OK"
							},
							"time": "2057",
							"headers": [
								{
									"name": "Access-Control-Allow-Credentials",
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Headers",
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Methods",
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Origin",
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Expose-Headers",
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"description": ""
								},
								{
									"name": "Connection",
									"key": "Connection",
									"value": "keep-alive",
									"description": ""
								},
								{
									"name": "Content-Encoding",
									"key": "Content-Encoding",
									"value": "gzip",
									"description": ""
								},
								{
									"name": "Content-Length",
									"key": "Content-Length",
									"value": "95",
									"description": ""
								},
								{
									"name": "Content-Type",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"description": ""
								},
								{
									"name": "Date",
									"key": "Date",
									"value": "Thu, 25 Aug 2016 10:34:23 GMT",
									"description": ""
								},
								{
									"name": "ETag",
									"key": "ETag",
									"value": "W/\"4e-Cq3UhvpVSyl6R6204lPVIA\"",
									"description": ""
								},
								{
									"name": "Server",
									"key": "Server",
									"value": "nginx/1.8.1",
									"description": ""
								},
								{
									"name": "Vary",
									"key": "Vary",
									"value": "Accept-Encoding",
									"description": ""
								}
							],
							"cookies": [],
							"mime": "",
							"text": "{\"status\":\"pass\",\"message\":\"OAuth-1.0a signature verification was successful\"}",
							"language": "javascript",
							"rawDataType": "text",
							"state": {
								"size": "normal"
							},
							"previewType": "html",
							"searchResultScrolledTo": "-1",
							"version": null,
							"requestObject": "{\"url\":\"https://echo.getpostman.com/oauth1\",\"headers\":[{\"key\":\"Authorization\",\"name\":\"Authorization\",\"value\":\"OAuth oauth_consumer_key=\\\"RKCGzna7bv9YD57c\\\",oauth_signature_method=\\\"HMAC-SHA1\\\",oauth_timestamp=\\\"1472121261\\\",oauth_nonce=\\\"ki0RQW\\\",oauth_version=\\\"1.0\\\",oauth_signature=\\\"s0rK92Myxx7ceUBVzlMaxiiXU00%3D\\\"\"}],\"data\":[{\"key\":\"code\",\"value\":\"xWnkliVQJURqB2x1\",\"type\":\"text\",\"enabled\":true},{\"key\":\"grant_type\",\"value\":\"authorization_code\",\"type\":\"text\",\"enabled\":true},{\"key\":\"redirect_uri\",\"value\":\"https://www.getpostman.com/oauth2/callback\",\"type\":\"text\",\"enabled\":true},{\"key\":\"client_id\",\"value\":\"abc123\",\"type\":\"text\",\"enabled\":true},{\"key\":\"client_secret\",\"value\":\"ssh-secret\",\"type\":\"text\",\"enabled\":true}],\"method\":\"GET\",\"dataMode\":\"params\"}",
							"createdAt": "2016-08-25T10:34:27.000Z",
							"updatedAt": "2016-08-25T10:34:28.000Z"
						},
						{
							"owner": 0,
							"lastUpdatedBy": "631643",
							"lastRevision": 505396712,
							"request": "2f79ab5b-9029-56c2-7b05-52047790d670",
							"id": "d536f1d6-ad89-2a2d-94b3-8aa11f28f197",
							"name": "401",
							"status": "",
							"responseCode": {
								"code": 401,
								"name": "Unauthorized"
							},
							"time": "322",
							"headers": [
								{
									"name": "Access-Control-Allow-Credentials",
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Headers",
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Methods",
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Origin",
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Expose-Headers",
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"description": ""
								},
								{
									"name": "Connection",
									"key": "Connection",
									"value": "keep-alive",
									"description": ""
								},
								{
									"name": "Content-Length",
									"key": "Content-Length",
									"value": "536",
									"description": ""
								},
								{
									"name": "Content-Type",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"description": ""
								},
								{
									"name": "Date",
									"key": "Date",
									"value": "Thu, 25 Aug 2016 10:34:55 GMT",
									"description": ""
								},
								{
									"name": "ETag",
									"key": "ETag",
									"value": "W/\"218-SGnurnTsu5qV5cCYWxsJlg\"",
									"description": ""
								},
								{
									"name": "Server",
									"key": "Server",
									"value": "nginx/1.8.1",
									"description": ""
								},
								{
									"name": "Vary",
									"key": "Vary",
									"value": "Accept-Encoding",
									"description": ""
								}
							],
							"cookies": [],
							"mime": "",
							"text": "{\"status\":\"fail\",\"message\":\"HMAC-SHA1 verification failed\",\"base_uri\":\"https://echo.getpostman.com/oauth1\",\"normalized_param_string\":\"oauth_consumer_key=RKCGzna7bv9YD57c_wrong&oauth_nonce=8LTsU2&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1472121295&oauth_version=1.0\",\"base_string\":\"GET&https%3A%2F%2Fecho.getpostman.com%2Foauth1&oauth_consumer_key%3DRKCGzna7bv9YD57c_wrong%26oauth_nonce%3D8LTsU2%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1472121295%26oauth_version%3D1.0\",\"signing_key\":\"D%2BEdQ-gs%24-%25%402Nu7&\"}",
							"language": "javascript",
							"rawDataType": "text",
							"state": {
								"size": "normal"
							},
							"previewType": "html",
							"searchResultScrolledTo": "-1",
							"version": null,
							"requestObject": "{\"url\":\"https://echo.getpostman.com/oauth1\",\"headers\":[{\"key\":\"Authorization\",\"type\":\"text\",\"name\":\"Authorization\",\"value\":\"OAuth oauth_consumer_key=\\\"RKCGzna7bv9YD57c_wrong\\\",oauth_signature_method=\\\"HMAC-SHA1\\\",oauth_timestamp=\\\"1472121295\\\",oauth_nonce=\\\"8LTsU2\\\",oauth_version=\\\"1.0\\\",oauth_signature=\\\"tSUexpY%2B7EhSY7cFXiFN5EMx2zw%3D\\\"\"}],\"data\":[{\"key\":\"code\",\"value\":\"xWnkliVQJURqB2x1\",\"type\":\"text\",\"enabled\":true},{\"key\":\"grant_type\",\"value\":\"authorization_code\",\"type\":\"text\",\"enabled\":true},{\"key\":\"redirect_uri\",\"value\":\"https://www.getpostman.com/oauth2/callback\",\"type\":\"text\",\"enabled\":true},{\"key\":\"client_id\",\"value\":\"abc123\",\"type\":\"text\",\"enabled\":true},{\"key\":\"client_secret\",\"value\":\"ssh-secret\",\"type\":\"text\",\"enabled\":true}],\"method\":\"GET\",\"dataMode\":\"params\"}",
							"createdAt": "2016-08-25T10:34:59.000Z",
							"updatedAt": "2016-08-25T10:34:59.000Z"
						}
					],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": {
						"type": "oauth1",
						"oauth1": [
							{
								"key": "consumerKey",
								"value": "RKCGzna7bv9YD57c",
								"type": "string"
							},
							{
								"key": "consumerSecret",
								"value": "D+EdQ-gs$-%@2Nu7",
								"type": "string"
							},
							{
								"key": "token",
								"value": "",
								"type": "string"
							},
							{
								"key": "tokenSecret",
								"value": "",
								"type": "string"
							},
							{
								"key": "signatureMethod",
								"value": "HMAC-SHA1",
								"type": "string"
							},
							{
								"key": "timestamp",
								"value": 1472121255,
								"type": "number"
							},
							{
								"key": "nonce",
								"value": "e5VR16",
								"type": "string"
							},
							{
								"key": "version",
								"value": "1.0",
								"type": "string"
							},
							{
								"key": "realm",
								"value": "",
								"type": "string"
							},
							{
								"key": "addParamsToHeader",
								"value": true,
								"type": "boolean"
							},
							{
								"key": "autoAddParam",
								"type": "any"
							},
							{
								"key": "addEmptyParamsToSign",
								"value": false,
								"type": "boolean"
							}
						]
					},
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var body = JSON.parse(responseBody);",
									"tests[\"Body contains status pass\"] = body[\"status\"] == \"pass\""
								]
							}
						}
					]
				},
				{
					"folder": "930f54b4-c5cd-2363-7cf5-b9022d3c0aae",
					"id": "39a204d5-944a-59d3-2dfe-90fd378cc3da",
					"name": "IP address in JSON format",
					"dataMode": "params",
					"data": null,
					"rawModeData": null,
					"descriptionFormat": "html",
					"description": "A simple `GET` request to return the IP address of the source request in the following `JSON` format:\n\n```json\n{\n  ip: \"request-ip-address\"\n}\n```",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/ip",
					"preRequestScript": null,
					"tests": "var body = JSON.parse(responseBody);\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Valid response structure\"] = /^[a-fA-F:\\.0-9]+$/.test(body.ip);",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var body = JSON.parse(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Valid response structure\"] = /^[a-fA-F:\\.0-9]+$/.test(body.ip);"
								]
							}
						}
					]
				},
				{
					"folder": "37368024-f6a8-0f70-85fc-7e876cde9e33",
					"id": "3de3b135-b3cc-3a68-ba27-b6d373e03c8c",
					"name": "Set Cookies",
					"dataMode": "params",
					"data": [],
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "The cookie setter endpoint accepts a list of cookies and their values as part of URL parameters of a `GET` request. These cookies are saved and can be subsequently retrieved or deleted. The response of this request returns a JSON with all cookies listed.\n\nTo set your own set of cookies, simply replace the URL parameters \"foo1=bar1&foo2=bar2\" with your own set of key-value pairs.",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/cookies/set?foo1=bar1&foo2=bar2",
					"preRequestScript": "",
					"tests": "// handle case where it is 304\n\nif (responseCode.code === 200) {\n    tests[\"Status code is 302 or 200\"] = true;\n    tests[\"Body contains cookies\"] = responseBody.has(\"cookies\");\n    \n    var body = JSON.parse(responseBody);\n    tests[\"Body contains cookie foo1\"] = 'foo1' in body.cookies;\n    tests[\"Body contains cookie foo2\"] = 'foo2' in body.cookies;\n\n}\nelse if (responseCode.code === 302) {\n    tests[\"Status code is 302 or 200\"] = true;\n    tests[\"Body has redirection message\"] = responseBody.has(\"Found. Redirecting to /cookies\")\n}\nelse {\n    tests[\"Status code is 302 or 200\"] = false;\n}\n\ntests[\"foo1 cookie is set\"] = _.get(postman.getResponseCookie('foo1'), 'value') === 'bar1';\n\ntests[\"foo2 cookie is set\"] = _.get(postman.getResponseCookie('foo2'), 'value') === 'bar2';",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [
						{
							"owner": 0,
							"lastUpdatedBy": "631643",
							"lastRevision": 277278568,
							"request": "3de3b135-b3cc-3a68-ba27-b6d373e03c8c",
							"id": "6c09f286-f74c-4d60-c349-f4a7ff7bac28",
							"name": "Cookies",
							"status": "",
							"responseCode": {
								"code": 200,
								"name": "OK"
							},
							"time": "3063",
							"headers": [
								{
									"name": "Access-Control-Allow-Credentials",
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Headers",
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Methods",
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Origin",
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"description": ""
								},
								{
									"name": "Connection",
									"key": "Connection",
									"value": "keep-alive",
									"description": ""
								},
								{
									"name": "Content-Encoding",
									"key": "Content-Encoding",
									"value": "gzip",
									"description": ""
								},
								{
									"name": "Content-Length",
									"key": "Content-Length",
									"value": "51",
									"description": ""
								},
								{
									"name": "Content-Type",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"description": ""
								},
								{
									"name": "Date",
									"key": "Date",
									"value": "Thu, 29 Oct 2015 06:15:28 GMT",
									"description": ""
								},
								{
									"name": "Server",
									"key": "Server",
									"value": "nginx/1.6.2",
									"description": ""
								},
								{
									"name": "Vary",
									"key": "Vary",
									"value": "Accept-Encoding",
									"description": ""
								},
								{
									"name": "X-Powered-By",
									"key": "X-Powered-By",
									"value": "Sails <sailsjs.org>",
									"description": ""
								}
							],
							"cookies": [],
							"mime": "",
							"text": "{\"cookies\":{\"foo1\":\"bar\",\"foo2\":\"bar\"}}",
							"language": "javascript",
							"rawDataType": "text",
							"state": {
								"size": "normal"
							},
							"previewType": "html",
							"searchResultScrolledTo": "-1",
							"version": null,
							"requestObject": "\"96a24790-4951-ba7e-aa4f-fb40a45a7fcb\"",
							"createdAt": "2016-05-25T12:29:57.000Z",
							"updatedAt": "2016-05-25T12:29:58.000Z"
						}
					],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// handle case where it is 304",
									"",
									"if (responseCode.code === 200) {",
									"    tests[\"Status code is 302 or 200\"] = true;",
									"    tests[\"Body contains cookies\"] = responseBody.has(\"cookies\");",
									"    ",
									"    var body = JSON.parse(responseBody);",
									"    tests[\"Body contains cookie foo1\"] = 'foo1' in body.cookies;",
									"    tests[\"Body contains cookie foo2\"] = 'foo2' in body.cookies;",
									"",
									"}",
									"else if (responseCode.code === 302) {",
									"    tests[\"Status code is 302 or 200\"] = true;",
									"    tests[\"Body has redirection message\"] = responseBody.has(\"Found. Redirecting to /cookies\")",
									"}",
									"else {",
									"    tests[\"Status code is 302 or 200\"] = false;",
									"}",
									"",
									"tests[\"foo1 cookie is set\"] = _.get(postman.getResponseCookie('foo1'), 'value') === 'bar1';",
									"",
									"tests[\"foo2 cookie is set\"] = _.get(postman.getResponseCookie('foo2'), 'value') === 'bar2';"
								]
							}
						}
					]
				},
				{
					"folder": "df815c41-a76b-4b5b-7129-ea59275f254b",
					"id": "42c867ca-e72b-3307-169b-26a478b00641",
					"name": "Basic Auth",
					"dataMode": "params",
					"data": [],
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "This endpoint simulates a **basic-auth** protected endpoint. \nThe endpoint accepts a default username and password and returns a status code of `200 ok` only if the same is provided. \nOtherwise it will return a status code `401 unauthorized`.\n\n> Username: `postman`\n> \n> Password: `password`\n\nTo use this endpoint, send a request with the header `Authorization: Basic cG9zdG1hbjpwYXNzd29yZA==`. \nThe cryptic latter half of the header value is a base64 encoded concatenation of the default username and password. \nUsing Postman, to send this request, you can simply fill in the username and password in the \"Authorization\" tab and Postman will do the rest for you.\n\nTo know more about basic authentication, refer to the [Basic Access Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#basic-auth?source=echo-collection-app-onboarding) elaborates how to use the same within the Postman app.",
					"headers": "Authorization: Basic cG9zdG1hbjpwYXNzd29yZA==\n",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/basic-auth",
					"preRequestScript": "",
					"tests": "tests[\"response code is 200\"] = responseCode.code === 200;\ntests[\"Body contains authenticated\"] = responseBody.has(\"authenticated\");",
					"currentHelper": "basicAuth",
					"helperAttributes": "{\"id\":\"basic\",\"username\":\"postman\",\"password\":\"password\",\"saveToRequest\":true}",
					"responses": [
						{
							"owner": 0,
							"lastUpdatedBy": "631643",
							"lastRevision": 277278560,
							"request": "42c867ca-e72b-3307-169b-26a478b00641",
							"id": "97223e54-e9ac-810d-41df-6b53e1c917e4",
							"name": "200",
							"status": "",
							"responseCode": {
								"code": 200,
								"name": "OK"
							},
							"time": "377",
							"headers": [
								{
									"name": "Access-Control-Allow-Credentials",
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Headers",
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Methods",
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Origin",
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"description": ""
								},
								{
									"name": "Connection",
									"key": "Connection",
									"value": "keep-alive",
									"description": ""
								},
								{
									"name": "Content-Encoding",
									"key": "Content-Encoding",
									"value": "gzip",
									"description": ""
								},
								{
									"name": "Content-Length",
									"key": "Content-Length",
									"value": "42",
									"description": ""
								},
								{
									"name": "Content-Type",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"description": ""
								},
								{
									"name": "Date",
									"key": "Date",
									"value": "Sat, 31 Oct 2015 06:38:25 GMT",
									"description": ""
								},
								{
									"name": "Server",
									"key": "Server",
									"value": "nginx/1.6.2",
									"description": ""
								},
								{
									"name": "Vary",
									"key": "Vary",
									"value": "Accept-Encoding",
									"description": ""
								},
								{
									"name": "X-Powered-By",
									"key": "X-Powered-By",
									"value": "Sails <sailsjs.org>",
									"description": ""
								}
							],
							"cookies": [],
							"mime": "",
							"text": "{\"authenticated\":true}",
							"language": "javascript",
							"rawDataType": "text",
							"state": {
								"size": "normal"
							},
							"previewType": "html",
							"searchResultScrolledTo": "-1",
							"version": null,
							"requestObject": "\"ef90671a-ab14-16f5-0a57-41b32fc2a36f\"",
							"createdAt": "2016-05-25T12:29:57.000Z",
							"updatedAt": "2016-05-25T12:29:58.000Z"
						}
					],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "username",
								"value": "postman",
								"type": "string"
							},
							{
								"key": "password",
								"value": "password",
								"type": "string"
							},
							{
								"key": "saveHelperData",
								"value": true,
								"type": "boolean"
							},
							{
								"key": "showPassword",
								"value": false,
								"type": "boolean"
							}
						]
					},
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"Body contains authenticated\"] = responseBody.has(\"authenticated\");"
								]
							}
						}
					]
				},
				{
					"folder": "74a8adf0-4f3f-068a-7c35-9745aa7b57d1",
					"id": "47f089f3-196e-fb13-fdf6-1d62f85ad96f",
					"name": "After comparisons",
					"dataMode": "params",
					"data": null,
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "A simple `GET` request to `/time/after` to check if the provided timestamps is after a comparison `target` (query parameter).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `after` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  after: true/false\n}\n```",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/time/after?timestamp=2016-10-10&target=2017-10-10",
					"preRequestScript": null,
					"tests": "var after = JSON.parse(responseBody).after;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Comparsion was correct\"] = after === false;",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var after = JSON.parse(responseBody).after;",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Comparsion was correct\"] = after === false;"
								]
							}
						}
					]
				},
				{
					"folder": "74a8adf0-4f3f-068a-7c35-9745aa7b57d1",
					"id": "4cef08e8-75d3-2a31-e703-115cf976e75e",
					"name": "Time addition",
					"dataMode": "params",
					"data": null,
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "A simple `GET` request to `/time/add` to add units of time to the specified / current timestamp (as provided in the `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds` query parameters).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `sum` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  sum: \"sum of (provided / current) and provided timestamps\"\n}\n```",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/time/add?timestamp=2016-10-10&years=100",
					"preRequestScript": null,
					"tests": "var sum = JSON.parse(responseBody).sum;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var sum = JSON.parse(responseBody).sum;",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					]
				},
				{
					"folder": "74a8adf0-4f3f-068a-7c35-9745aa7b57d1",
					"id": "4dc695e5-6b1e-1edf-c68d-014139c59d7e",
					"name": "Start of time",
					"dataMode": "params",
					"data": null,
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "A simple `GET` request to `/time/start` to return a relative timstamp in the past from the specified / current timestamp (as provided in the `unit` query parameter).\n\nFor instance, if the `unit` has been specified as `month`, the returned timestamp would indicate the beginning of the current month. Similar results are returned for other units of time, like: `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds`\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `start` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  start: \"A timestamp from the past, depending on the `unit` specified\"\n}\n```",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/time/start?timestamp=2016-10-10&unit=month",
					"preRequestScript": null,
					"tests": "var start = JSON.parse(responseBody).start;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var start = JSON.parse(responseBody).start;",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					]
				},
				{
					"folder": "74a8adf0-4f3f-068a-7c35-9745aa7b57d1",
					"id": "54dfe6f2-5887-1078-1f3c-3cf36acc648e",
					"name": "Timestamp validity",
					"dataMode": "params",
					"data": null,
					"rawModeData": null,
					"descriptionFormat": "html",
					"description": "A simple `GET` request to `/time/valid` to determine the validity of the timestamp, (current by default).\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a valid key to indicate the result. The response code is `200`.\n\n```\n{\n  valid: true/false\n}\n```",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/time/valid?timestamp=2016-10-10",
					"preRequestScript": null,
					"tests": "var validity = JSON.parse(responseBody).valid;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Timestamp is valid\"] = validity === true;\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [
						{
							"owner": 0,
							"lastUpdatedBy": "631643",
							"lastRevision": 928405968,
							"request": "54dfe6f2-5887-1078-1f3c-3cf36acc648e",
							"id": "7aa5b2c4-70b5-d5f1-843b-ab90365ee59e",
							"name": "Invalid Timestamp",
							"status": "",
							"responseCode": {
								"code": 200,
								"name": "OK",
								"fromServer": true
							},
							"time": "264",
							"headers": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"name": "Access-Control-Allow-Origin",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Length",
									"value": "15",
									"name": "Content-Length",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Wed, 11 Jan 2017 10:27:53 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"f-/i9mO/upK91ZtL0BkKFGtw\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "nginx/1.10.1",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": ""
								},
								{
									"key": "set-cookie",
									"value": "sails.sid=s%3ATNJaNxi2QCv4RPBb64sIZxQGN1h6IP3g.9sQVAijlsLsh0r7LgffxXa9k2we6UumPEVv%2Bsk4woLI; Path=/; HttpOnly",
									"name": "set-cookie",
									"description": ""
								}
							],
							"cookies": [
								{
									"url": "https://postman-echo.com/time/valid?timestamp=2016-10-1a",
									"name": "sails.sid",
									"value": "s%3ATNJaNxi2QCv4RPBb64sIZxQGN1h6IP3g.9sQVAijlsLsh0r7LgffxXa9k2we6UumPEVv%2Bsk4woLI",
									"domain": "postman-echo.com",
									"secure": false,
									"httpOnly": true,
									"expirationDate": 2147463847,
									"path": "/"
								}
							],
							"mime": "",
							"text": "{\"valid\":false}",
							"language": "json",
							"rawDataType": null,
							"state": {
								"size": "normal"
							},
							"previewType": "text",
							"searchResultScrolledTo": "-1",
							"version": null,
							"requestObject": "{\"url\":\"https://postman-echo.com/time/valid?timestamp=2016-10-10\",\"headers\":[],\"data\":null,\"method\":\"GET\",\"dataMode\":\"params\"}",
							"createdAt": "2017-01-11T10:28:05.000Z",
							"updatedAt": "2017-01-11T10:28:05.000Z"
						},
						{
							"owner": 0,
							"lastUpdatedBy": "631643",
							"lastRevision": 928404701,
							"request": "54dfe6f2-5887-1078-1f3c-3cf36acc648e",
							"id": "9fb04532-776f-0d8b-529a-9e3887fdebe4",
							"name": "Valid Timestamp",
							"status": "",
							"responseCode": {
								"code": 200,
								"name": "OK",
								"fromServer": true
							},
							"time": "493",
							"headers": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"name": "Access-Control-Allow-Origin",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Length",
									"value": "14",
									"name": "Content-Length",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Wed, 11 Jan 2017 10:27:33 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"e-OYN7L87J1Ba9oy5mJE2kcA\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "nginx/1.10.1",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": ""
								},
								{
									"key": "set-cookie",
									"value": "sails.sid=s%3AdDGZPe1CZw4mAxGVCHr6RfCADCAwquXa.F5MEm5LJad30JHrSwGGoyWLn2OAAGdvUM7kDtzNfdFI; Path=/; HttpOnly",
									"name": "set-cookie",
									"description": ""
								}
							],
							"cookies": [
								{
									"url": "https://postman-echo.com/time/valid?timestamp=2016-10-10",
									"name": "sails.sid",
									"value": "s%3AdDGZPe1CZw4mAxGVCHr6RfCADCAwquXa.F5MEm5LJad30JHrSwGGoyWLn2OAAGdvUM7kDtzNfdFI",
									"domain": "postman-echo.com",
									"secure": false,
									"httpOnly": true,
									"expirationDate": 2147463847,
									"path": "/"
								}
							],
							"mime": "",
							"text": "{\"valid\":true}",
							"language": "json",
							"rawDataType": null,
							"state": {
								"size": "normal"
							},
							"previewType": "text",
							"searchResultScrolledTo": "-1",
							"version": null,
							"requestObject": "{\"url\":\"https://postman-echo.com/time/valid?timestamp=2016-10-10\",\"headers\":[],\"data\":null,\"method\":\"GET\",\"dataMode\":\"params\"}",
							"createdAt": "2017-01-11T10:27:45.000Z",
							"updatedAt": "2017-01-11T10:27:45.000Z"
						}
					],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var validity = JSON.parse(responseBody).valid;",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Timestamp is valid\"] = validity === true;",
									""
								]
							}
						}
					]
				},
				{
					"folder": "930f54b4-c5cd-2363-7cf5-b9022d3c0aae",
					"id": "5d3b31c0-fa26-ee03-5c1b-3715825d811d",
					"name": "Deflate Compressed Response",
					"dataMode": "params",
					"data": [],
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "This endpoint returns the response using [deflate compression algoritm](https://en.wikipedia.org/wiki/DEFLATE). \nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `deflate` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/deflate",
					"preRequestScript": "",
					"tests": "tests[\"response code is 200\"] = responseCode.code === 200;\n\ntry {\n    var data = JSON.parse(responseBody);\n    tests[\"Body contains deflated\"] = responseBody.has(\"deflated\");\n    tests[\"Body contains headers\"] = responseBody.has(\"headers\");\n    tests[\"Body contains method\"] = responseBody.has(\"method\");\n}\ncatch(e) {\n    console.log('Cannot parse response,probably not a JSON');\n}\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try {",
									"    var data = JSON.parse(responseBody);",
									"    tests[\"Body contains deflated\"] = responseBody.has(\"deflated\");",
									"    tests[\"Body contains headers\"] = responseBody.has(\"headers\");",
									"    tests[\"Body contains method\"] = responseBody.has(\"method\");",
									"}",
									"catch(e) {",
									"    console.log('Cannot parse response,probably not a JSON');",
									"}",
									""
								]
							}
						}
					]
				},
				{
					"folder": "930f54b4-c5cd-2363-7cf5-b9022d3c0aae",
					"id": "6cfd22d8-26cc-7d3e-cf50-16d400211a76",
					"name": "Response Status Code",
					"dataMode": "params",
					"data": [],
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "This endpoint allows one to instruct the server which status code to respond with.\n\nEvery response is accompanied by a status code. The status code provides a summary of the nature of response sent by the server. For example, a status code of `200` means everything is okay with the response and a code of `404` implies that the requested URL does not exist on server. \nA list of all valid HTTP status code can be found at the [List of Status Codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) wikipedia article. When using Postman, the response status code is described for easy reference.\n\nNote that if an invalid status code is requested to be sent, the server returns a status code of `400 Bad Request`.",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/status/200",
					"preRequestScript": "",
					"tests": "var responseJSON;\ntry {\n    responseJSON = JSON.parse(responseBody); \n    tests[\"Status equals 200\"] = responseJSON.status === 200;\n}\ncatch (e) { }\ntests[\"Body contains status\"] = responseBody.has(\"status\");\n\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [
						{
							"owner": 0,
							"lastUpdatedBy": "631643",
							"lastRevision": 277278566,
							"request": "6cfd22d8-26cc-7d3e-cf50-16d400211a76",
							"id": "a2bda27d-2c7b-eb8e-1740-be4e1fe9a079",
							"name": "200",
							"status": "",
							"responseCode": {
								"code": 200,
								"name": "OK"
							},
							"time": "251",
							"headers": [
								{
									"name": "Access-Control-Allow-Credentials",
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Headers",
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Methods",
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Origin",
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"description": ""
								},
								{
									"name": "Connection",
									"key": "Connection",
									"value": "keep-alive",
									"description": ""
								},
								{
									"name": "Content-Length",
									"key": "Content-Length",
									"value": "14",
									"description": ""
								},
								{
									"name": "Content-Type",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"description": ""
								},
								{
									"name": "Date",
									"key": "Date",
									"value": "Thu, 31 Mar 2016 11:58:47 GMT",
									"description": ""
								},
								{
									"name": "ETag",
									"key": "ETag",
									"value": "W/\"e-1056260003\"",
									"description": ""
								},
								{
									"name": "Server",
									"key": "Server",
									"value": "nginx/1.6.2",
									"description": ""
								},
								{
									"name": "Vary",
									"key": "Vary",
									"value": "Accept-Encoding",
									"description": ""
								},
								{
									"name": "X-Powered-By",
									"key": "X-Powered-By",
									"value": "Sails <sailsjs.org>",
									"description": ""
								}
							],
							"cookies": [
								{
									"domain": ".getpostman.com",
									"expirationDate": 1460718898.0598,
									"hostOnly": false,
									"httpOnly": false,
									"name": "getpostmanlogin",
									"path": "/",
									"secure": false,
									"session": false,
									"storeId": "0",
									"value": "yes"
								},
								{
									"domain": ".getpostman.com",
									"expirationDate": 1460718898.06,
									"hostOnly": false,
									"httpOnly": false,
									"name": "postman.sid",
									"path": "/",
									"secure": false,
									"session": false,
									"storeId": "0",
									"value": "df0c0256028d7ec4d641f766104a9571a8e249685bbc667d7cee030bbf44d3209495c70c03248e31e678a93812591d5e12187a8e99bf6bc5e80c40903f6ff6226938f24e413c0ffa613a7372064ec44a8594e8d3ede6945e34394f369573feeebc4a73a3e24b8c9ac18a53704addb5fd3f71f1ede488ff551feb059e9c1fb208164814e45e0312c4df8ea6e83c26702f42ae634c6afbe82d57c857bbf5598b5527961c1c28688dc2580070a4389f0cf4ec0a179b5b9c11b2ecbaa5460d374065bf5c7a3add9505df0fa89acb9f227f05ed2d4c6b58c39d6d728bd49f6f323ae67d4a75882aa7682f5d6fc5b981ba411d94aa93970bfaefa1953a73e440d50d012b5f288975c888e2345ee7777e746fb5aed3a7b2dbc087c6456621aa78c24a3c17c5f96cf59844933249a352f631e2008cffac6faf06d0e253dcc01cf0067bf56c1fbc5ed61fec1861b60c5accf35ffc2e56154a113004fa1db9d7171c3af8fc063918554092f5"
								},
								{
									"domain": ".echo.getpostman.com",
									"expirationDate": 1522494981,
									"hostOnly": false,
									"httpOnly": false,
									"name": "_ga",
									"path": "/",
									"secure": false,
									"session": false,
									"storeId": "0",
									"value": "GA1.3.1703443399.1459422978"
								},
								{
									"domain": "echo.getpostman.com",
									"hostOnly": true,
									"httpOnly": true,
									"name": "sails.sid",
									"path": "/",
									"secure": false,
									"session": true,
									"storeId": "0",
									"value": "s%3AvuHU0EKeDbyNjVrEc7U30dMPzVu8CRaD.GOV1H9olcVzXqrwqP%2BC%2B6MVj2UczXivcN00jgPoDYfs"
								}
							],
							"mime": "",
							"text": "{\"status\":200}",
							"language": "javascript",
							"rawDataType": "text",
							"state": {
								"size": "normal"
							},
							"previewType": "html",
							"searchResultScrolledTo": "-1",
							"version": null,
							"requestObject": "{\"url\":\"https://echo.getpostman.com/status/200\",\"headers\":[],\"data\":[],\"method\":\"GET\",\"dataMode\":\"params\"}",
							"createdAt": "2016-05-25T12:29:57.000Z",
							"updatedAt": "2016-05-25T12:29:58.000Z"
						}
					],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status equals 200\"] = responseJSON.status === 200;",
									"}",
									"catch (e) { }",
									"tests[\"Body contains status\"] = responseBody.has(\"status\");",
									"",
									""
								]
							}
						}
					]
				},
				{
					"folder": "09ddd67c-13fe-4626-8dd4-fc64f1fc27b7",
					"id": "70ed7920-ead1-2d20-645a-c716ab0fd137",
					"name": "DigestAuth Request",
					"dataMode": "params",
					"data": [
						{
							"key": "code",
							"value": "xWnkliVQJURqB2x1",
							"type": "text",
							"enabled": true
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "text",
							"enabled": true
						},
						{
							"key": "redirect_uri",
							"value": "https://www.getpostman.com/oauth2/callback",
							"type": "text",
							"enabled": true
						},
						{
							"key": "client_id",
							"value": "abc123",
							"type": "text",
							"enabled": true
						},
						{
							"key": "client_secret",
							"value": "ssh-secret",
							"type": "text",
							"enabled": true
						}
					],
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "Performing a simple `GET` request to this endpoint returns status code `401 Unauthorized` with `WWW-Authenticate` header containing information to successfully authenticate subsequent requests.\nThe `WWW-Authenticate` header must be processed to extract `realm` and `nonce` values to hash subsequent requests.\n\nWhen this request is executed within Postman, the script attached with this request does the hard work of extracting realm and nonce from the header and set it as [global variables](https://www.getpostman.com/docs/environments#global-variables?source=echo-collection-app-onboarding) named `echo_digest_nonce` and `echo_digest_realm`.\nThese variables are re-used in subsequent request for seamless integration of the two requests.",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/digest-auth",
					"preRequestScript": "",
					"tests": "tests[\"response code is 401\"] = responseCode.code === 401;\ntests[\"response has WWW-Authenticate header\"] = (postman.getResponseHeader('WWW-Authenticate'));\n\nvar authenticateHeader = postman.getResponseHeader('WWW-Authenticate'),\n    realmStart = authenticateHeader.indexOf('\"',authenticateHeader.indexOf(\"realm\")) + 1 ,\n    realmEnd = authenticateHeader.indexOf('\"',realmStart),\n    realm = authenticateHeader.slice(realmStart,realmEnd),\n    nonceStart = authenticateHeader.indexOf('\"',authenticateHeader.indexOf(\"nonce\")) + 1,\n    nonceEnd = authenticateHeader.indexOf('\"',nonceStart),\n    nonce = authenticateHeader.slice(nonceStart,nonceEnd);\n    \npostman.setGlobalVariable('echo_digest_realm', realm);\npostman.setGlobalVariable('echo_digest_nonce', nonce);",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 401\"] = responseCode.code === 401;",
									"tests[\"response has WWW-Authenticate header\"] = (postman.getResponseHeader('WWW-Authenticate'));",
									"",
									"var authenticateHeader = postman.getResponseHeader('WWW-Authenticate'),",
									"    realmStart = authenticateHeader.indexOf('\"',authenticateHeader.indexOf(\"realm\")) + 1 ,",
									"    realmEnd = authenticateHeader.indexOf('\"',realmStart),",
									"    realm = authenticateHeader.slice(realmStart,realmEnd),",
									"    nonceStart = authenticateHeader.indexOf('\"',authenticateHeader.indexOf(\"nonce\")) + 1,",
									"    nonceEnd = authenticateHeader.indexOf('\"',nonceStart),",
									"    nonce = authenticateHeader.slice(nonceStart,nonceEnd);",
									"    ",
									"postman.setGlobalVariable('echo_digest_realm', realm);",
									"postman.setGlobalVariable('echo_digest_nonce', nonce);"
								]
							}
						}
					]
				},
				{
					"folder": "df815c41-a76b-4b5b-7129-ea59275f254b",
					"id": "843acf02-a33c-c4bb-d742-c07b9212e4b0",
					"name": "Hawk Auth",
					"dataMode": "params",
					"data": [
						{
							"key": "access_token",
							"value": "xyz1",
							"type": "text",
							"enabled": true
						},
						{
							"key": "id",
							"value": "U1",
							"type": "text",
							"enabled": true
						},
						{
							"key": "server_secret",
							"value": "zeppelin",
							"type": "text",
							"enabled": true
						},
						{
							"key": "admin",
							"value": "true",
							"type": "text",
							"enabled": true
						}
					],
					"rawModeData": null,
					"descriptionFormat": "html",
					"description": "This endpoint is a Hawk Authentication protected endpoint. [Hawk authentication](https://github.com/hueniverse/hawk) is a widely used protocol for protecting API endpoints. One of Hawk's main goals is to enable HTTP authentication for services that do not use TLS (although it can be used in conjunction with TLS as well).\n\nIn order to use this endpoint, select the \"Hawk Auth\" helper inside Postman, and set the following values:\n\nHawk Auth ID: `dh37fgj492je`\n\nHawk Auth Key: `werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn`\n\nAlgorithm: `sha256`\n\nThe rest of the values are optional, and can be left blank. Hitting send should give you a response with a status code of 200 OK.",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/auth/hawk",
					"preRequestScript": "",
					"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
					"currentHelper": "hawkAuth",
					"helperAttributes": "{\"id\":\"hawk\",\"hawk_id\":\"dh37fgj492je\",\"hawk_key\":\"werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn\",\"algorithm\":\"sha256\",\"user\":\"\",\"saveToRequest\":true,\"nonce\":\"RZKGNz\",\"timestamp\":\"\"}",
					"responses": [
						{
							"owner": 0,
							"lastUpdatedBy": "631643",
							"lastRevision": 277278564,
							"request": "843acf02-a33c-c4bb-d742-c07b9212e4b0",
							"id": "8bcfebdc-a6fe-7607-cef3-7ee28a0b75a2",
							"name": "Success",
							"status": "",
							"responseCode": {
								"code": 200,
								"name": "OK"
							},
							"time": "1855",
							"headers": [
								{
									"name": "Access-Control-Allow-Credentials",
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Headers",
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Methods",
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Origin",
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"description": ""
								},
								{
									"name": "Connection",
									"key": "Connection",
									"value": "keep-alive",
									"description": ""
								},
								{
									"name": "Content-Encoding",
									"key": "Content-Encoding",
									"value": "gzip",
									"description": ""
								},
								{
									"name": "Content-Type",
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								},
								{
									"name": "Date",
									"key": "Date",
									"value": "Thu, 31 Mar 2016 11:12:16 GMT",
									"description": ""
								},
								{
									"name": "Server",
									"key": "Server",
									"value": "nginx/1.6.2",
									"description": ""
								},
								{
									"name": "Server-Authorization",
									"key": "Server-Authorization",
									"value": "Hawk mac=\"vRrUzDdcHu2NaNts/r4zg2xmXMdX8wPiTGTM398BDRg=\", hash=\"qmtflETMybaZiOQ2dLT17yiRunFT5OCIxZRZ0boQaiE=\"",
									"description": ""
								},
								{
									"name": "Vary",
									"key": "Vary",
									"value": "Accept-Encoding",
									"description": ""
								},
								{
									"name": "X-Powered-By",
									"key": "X-Powered-By",
									"value": "Sails <sailsjs.org>",
									"description": ""
								},
								{
									"name": "transfer-encoding",
									"key": "transfer-encoding",
									"value": "chunked",
									"description": ""
								}
							],
							"cookies": [
								{
									"domain": ".getpostman.com",
									"expirationDate": 1460717668.0694,
									"hostOnly": false,
									"httpOnly": false,
									"name": "getpostmanlogin",
									"path": "/",
									"secure": false,
									"session": false,
									"storeId": "0",
									"value": "yes"
								},
								{
									"domain": ".getpostman.com",
									"expirationDate": 1460717668.0695,
									"hostOnly": false,
									"httpOnly": false,
									"name": "postman.sid",
									"path": "/",
									"secure": false,
									"session": false,
									"storeId": "0",
									"value": "9f887f3b7f14b8c29ac4dc4109381b0b89a76e785c7b34251d6c8025b41b24013d2aa49f40e2deac19cbf0594dd984169455534d91ff98d4d1868d67ac857017629f137926e3a04a616bb83a2fb5ab9e6cbea9579ed5d5c1155d47545d72aad5be99f4abd0a7130805b3807d70cd507171dbe9d950d8e35a853f9ec075f5a767c95df4d57f7d521b66605b3bda3801700e26e651d1129c798b729ee3b91702d43ae64ab226c3f426893753def772c15442a7552dc84a3c773d6099a50b0a6af940b64c8176fedfcecd5fc31ccfc3bbc0124bfdaa0d62e4252d4aafb46a3c10963d12391e1fa97a1c0f19a636f57a3ac8cc35567d1cb6cb53b77f8adde3f6754a765596d7d00bdeb9acb5cc8d115e7c3f50ec3228e34d3e6c7464e9039b01868e03d10e9f87772397602453e9e91205de7b86021fad06eb26e69298e99ff1597a670faeb310f8c092041d544851de84f2bee89a92123da6eea286210524035c85361e2af42166a6"
								},
								{
									"domain": "echo.getpostman.com",
									"hostOnly": true,
									"httpOnly": true,
									"name": "sails.sid",
									"path": "/",
									"secure": false,
									"session": true,
									"storeId": "0",
									"value": "s%3AryJV7v-PE4PuTjBK6nH5XOynQ4atuATV.n17KcaLhVmV8TBHNLwdwXgGR7lmqs3i478WPlTbRgZ4"
								}
							],
							"mime": "",
							"text": "{\"status\":\"pass\",\"message\":\"Hawk Authentication successful\"}",
							"language": "javascript",
							"rawDataType": "text",
							"state": {
								"size": "normal"
							},
							"previewType": "html",
							"searchResultScrolledTo": "-1",
							"version": null,
							"requestObject": "{\"url\":\"https://echo.getpostman.com/auth/hawk\",\"headers\":[{\"key\":\"Authorization\",\"type\":\"text\",\"name\":\"Authorization\",\"value\":\"Hawk id=\\\"dh37fgj492je\\\", ts=\\\"1459422734\\\", nonce=\\\"XiwiCU\\\", mac=\\\"KzMHk67BYCC9zZqRy5hRdWFEFLHX5bNlRWGdmOAWKp0=\\\"\"}],\"data\":[{\"key\":\"access_token\",\"value\":\"xyz1\",\"type\":\"text\",\"enabled\":true},{\"key\":\"id\",\"value\":\"U1\",\"type\":\"text\",\"enabled\":true},{\"key\":\"server_secret\",\"value\":\"zeppelin\",\"type\":\"text\",\"enabled\":true},{\"key\":\"admin\",\"value\":\"true\",\"type\":\"text\",\"enabled\":true}],\"method\":\"GET\",\"dataMode\":\"params\"}",
							"createdAt": "2016-05-25T12:29:57.000Z",
							"updatedAt": "2016-05-25T12:29:58.000Z"
						}
					],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": {
						"type": "hawk",
						"hawk": [
							{
								"key": "authId",
								"value": "dh37fgj492je",
								"type": "string"
							},
							{
								"key": "authKey",
								"value": "werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn",
								"type": "string"
							},
							{
								"key": "algorithm",
								"value": "sha256",
								"type": "string"
							},
							{
								"key": "user",
								"value": "",
								"type": "string"
							},
							{
								"key": "saveHelperData",
								"value": true,
								"type": "boolean"
							},
							{
								"key": "nonce",
								"value": "RZKGNz",
								"type": "string"
							},
							{
								"key": "extraData",
								"type": "any"
							},
							{
								"key": "appId",
								"type": "any"
							},
							{
								"key": "delegation",
								"type": "any"
							},
							{
								"key": "timestamp",
								"value": "",
								"type": "string"
							}
						]
					},
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					]
				},
				{
					"folder": "9a4c3bce-30f7-a496-c9ec-78afecbf1545",
					"id": "8c53212f-42cd-cb37-6e02-08c47a7c8bb1",
					"name": "PATCH Request",
					"dataMode": "raw",
					"data": "Curabitur auctor, elit nec pulvinar porttitor, ex augue condimentum enim, eget suscipit urna felis quis neque.\nSuspendisse sit amet luctus massa, nec venenatis mi. Suspendisse tincidunt massa at nibh efficitur fringilla. Nam quis congue mi. Etiam volutpat.",
					"rawModeData": "Curabitur auctor, elit nec pulvinar porttitor, ex augue condimentum enim, eget suscipit urna felis quis neque.\nSuspendisse sit amet luctus massa, nec venenatis mi. Suspendisse tincidunt massa at nibh efficitur fringilla. Nam quis congue mi. Etiam volutpat.",
					"descriptionFormat": null,
					"description": "The HTTP `PATCH` method is used to update resources on a server. The exact\nuse of `PATCH` requests depends on the server in question. There are a number\nof server implementations which handle `PATCH` differently. Technically, \n`PATCH` supports both Query String parameters and a Request Body.\n\nThis endpoint accepts an HTTP `PATCH` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body.",
					"headers": "",
					"method": "PATCH",
					"pathVariables": {},
					"url": "https://postman-echo.com/patch",
					"preRequestScript": "",
					"tests": "var responseJSON;\n\ntry { \n    responseJSON = JSON.parse(responseBody); \n    tests['response is valid JSON'] = true;\n}\ncatch (e) { \n    responseJSON = {}; \n    tests['response is valid JSON'] = false;\n}\n\n\ntests['response has PUT data'] = _.has(responseJSON, 'data');\ntests['response matches the data sent in request'] = (responseJSON.data && responseJSON.data.length === 256);",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"",
									"tests['response has PUT data'] = _.has(responseJSON, 'data');",
									"tests['response matches the data sent in request'] = (responseJSON.data && responseJSON.data.length === 256);"
								]
							}
						}
					]
				},
				{
					"folder": "74a8adf0-4f3f-068a-7c35-9745aa7b57d1",
					"id": "8cc2e733-7e68-8ad8-efd1-5393510a300a",
					"name": "Between timestamps",
					"dataMode": "params",
					"data": null,
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "A simple `GET` request to `/time/between` to check if the provided timestamp is between a range specified by the `start` and `end` query parameters. A resolution limit can also be specified by the `unit` query parameter.\n\nFor instance, for a resolution `unit` of `month`,\n`2016-10-05` does lie between `2016-11-02` and `2016-09-01`.\n\nThis endpoint also accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `between` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  between: true/false\n}\n```",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/time/between?timestamp=2016-10-10&start=2017-10-10&end=2019-10-10",
					"preRequestScript": null,
					"tests": "var after = JSON.parse(responseBody).after;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Comparsion was correct\"] = after === false;",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var after = JSON.parse(responseBody).after;",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Comparsion was correct\"] = after === false;"
								]
							}
						}
					]
				},
				{
					"folder": "37368024-f6a8-0f70-85fc-7e876cde9e33",
					"id": "8dc08eee-a543-7c1c-297f-b0b7040c35c6",
					"name": "Get Cookies",
					"dataMode": "params",
					"data": [],
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "Use this endpoint to get a list of all cookies that are stored with respect to this domain. Whatever key-value pairs that has been previously set by calling the \"Set Cookies\" endpoint, will be returned as response JSON.",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/cookies",
					"preRequestScript": "",
					"tests": "var responseJSON;\ntry {\n    tests[\"Body contains cookies\"] = responseBody.has(\"cookies\");\n    responseJSON = JSON.parse(responseBody);\n    tests[\"Cookies object is empty\"] = (Object.keys(responseJSON.cookies).length > 0)\n}\ncatch (e) { }\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [
						{
							"owner": 0,
							"lastUpdatedBy": "631643",
							"lastRevision": 277278565,
							"request": "8dc08eee-a543-7c1c-297f-b0b7040c35c6",
							"id": "403109d9-a2e7-2bf7-9af3-1282aa7d74cd",
							"name": "Cookies",
							"status": "",
							"responseCode": {
								"code": 200,
								"name": "OK"
							},
							"time": "462",
							"headers": [
								{
									"name": "Access-Control-Allow-Credentials",
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Headers",
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Methods",
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Origin",
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"description": ""
								},
								{
									"name": "Connection",
									"key": "Connection",
									"value": "keep-alive",
									"description": ""
								},
								{
									"name": "Content-Encoding",
									"key": "Content-Encoding",
									"value": "gzip",
									"description": ""
								},
								{
									"name": "Content-Length",
									"key": "Content-Length",
									"value": "46",
									"description": ""
								},
								{
									"name": "Content-Type",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"description": ""
								},
								{
									"name": "Date",
									"key": "Date",
									"value": "Thu, 29 Oct 2015 06:16:29 GMT",
									"description": ""
								},
								{
									"name": "Server",
									"key": "Server",
									"value": "nginx/1.6.2",
									"description": ""
								},
								{
									"name": "Vary",
									"key": "Vary",
									"value": "Accept-Encoding",
									"description": ""
								},
								{
									"name": "X-Powered-By",
									"key": "X-Powered-By",
									"value": "Sails <sailsjs.org>",
									"description": ""
								}
							],
							"cookies": [],
							"mime": "",
							"text": "{\"cookies\":{\"foo2\":\"bar\"}}",
							"language": "javascript",
							"rawDataType": "text",
							"state": {
								"size": "normal"
							},
							"previewType": "html",
							"searchResultScrolledTo": "-1",
							"version": null,
							"requestObject": "\"4118ca21-f216-410f-510c-2d0e465022c5\"",
							"createdAt": "2016-05-25T12:29:57.000Z",
							"updatedAt": "2016-05-25T12:29:58.000Z"
						}
					],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"try {",
									"    tests[\"Body contains cookies\"] = responseBody.has(\"cookies\");",
									"    responseJSON = JSON.parse(responseBody);",
									"    tests[\"Cookies object is empty\"] = (Object.keys(responseJSON.cookies).length > 0)",
									"}",
									"catch (e) { }",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								]
							}
						}
					]
				},
				{
					"owner": "3708974",
					"lastUpdatedBy": "3708974",
					"lastRevision": 3272973778,
					"folder": null,
					"id": "a4b9fdf6-3270-acba-f632-bea1ee8ef96c",
					"name": "Steam",
					"dataMode": "params",
					"data": null,
					"auth": null,
					"events": null,
					"rawModeData": null,
					"descriptionFormat": "html",
					"description": null,
					"variables": null,
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "",
					"queryParams": [],
					"headerData": [],
					"pathVariableData": [],
					"createdAt": "2018-02-24T02:03:53.000Z",
					"updatedAt": "2018-02-24T02:03:54.000Z",
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"write": true,
					"currentHelper": null,
					"helperAttributes": null
				},
				{
					"folder": "09ddd67c-13fe-4626-8dd4-fc64f1fc27b7",
					"id": "a4c04e32-72cf-0475-07dc-89c23f85cf0c",
					"name": "DigestAuth Success",
					"dataMode": "params",
					"data": [],
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "This endpoint sends a hashed Digest Authorization header to gain access to a valid `200 Ok` response code. In Postman, it uses the stored [global variables](https://www.getpostman.com/docs/environments#gloval-variables?source=echo-collection-app-onboarding), `echo_digest_realm` and `echo_digest_nonce`, to generate the hashed authorisation header.\n\nWithin Postman, for this request to successfully authenticate, running the previous request \"DigestAuth Request\" stores the relevant information within the global variables.",
					"headers": "Authorization: Digest username=\"postman\", realm=\"Users\", nonce=\"ni1LiL0O37PRRhofWdCLmwFsnEtH1lew\", uri=\"/digest-auth\", response=\"254679099562cf07df9b6f5d8d15db44\", opaque=\"\"\n",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/digest-auth",
					"preRequestScript": "",
					"tests": "tests[\"response code is 200\"] = responseCode.code === 200;\ntests[\"body contains authenticated\"] = responseBody.has(\"authenticated\");",
					"currentHelper": "digestAuth",
					"helperAttributes": "{\"id\":\"digest\",\"algorithm\":\"MD5\",\"username\":\"postman\",\"realm\":\"{{echo_digest_realm}}\",\"password\":\"password\",\"nonce\":\"{{echo_digest_nonce}}\",\"nonceCount\":\"\",\"clientNonce\":\"\",\"opaque\":\"\",\"qop\":\"\",\"saveToRequest\":true}",
					"responses": [
						{
							"owner": 0,
							"lastUpdatedBy": "631643",
							"lastRevision": 277278567,
							"request": "a4c04e32-72cf-0475-07dc-89c23f85cf0c",
							"id": "50a1e424-f5a6-3017-3777-6c5d0d381be0",
							"name": "200",
							"status": "",
							"responseCode": {
								"code": 200,
								"name": "OK"
							},
							"time": "9843",
							"headers": [
								{
									"name": "Access-Control-Allow-Credentials",
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Headers",
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Methods",
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Origin",
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"description": ""
								},
								{
									"name": "Connection",
									"key": "Connection",
									"value": "keep-alive",
									"description": ""
								},
								{
									"name": "Content-Encoding",
									"key": "Content-Encoding",
									"value": "gzip",
									"description": ""
								},
								{
									"name": "Content-Length",
									"key": "Content-Length",
									"value": "42",
									"description": ""
								},
								{
									"name": "Content-Type",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"description": ""
								},
								{
									"name": "Date",
									"key": "Date",
									"value": "Thu, 29 Oct 2015 06:17:51 GMT",
									"description": ""
								},
								{
									"name": "Server",
									"key": "Server",
									"value": "nginx/1.6.2",
									"description": ""
								},
								{
									"name": "Vary",
									"key": "Vary",
									"value": "Accept-Encoding",
									"description": ""
								},
								{
									"name": "X-Powered-By",
									"key": "X-Powered-By",
									"value": "Sails <sailsjs.org>",
									"description": ""
								}
							],
							"cookies": [],
							"mime": "",
							"text": "{\"authenticated\":true}",
							"language": "javascript",
							"rawDataType": "text",
							"state": {
								"size": "normal"
							},
							"previewType": "html",
							"searchResultScrolledTo": "-1",
							"version": null,
							"requestObject": "\"eecb504e-1736-d34c-990a-b86d36f06ddd\"",
							"createdAt": "2016-05-25T12:29:57.000Z",
							"updatedAt": "2016-05-25T12:29:58.000Z"
						}
					],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": {
						"type": "digest",
						"digest": [
							{
								"key": "algorithm",
								"value": "MD5",
								"type": "string"
							},
							{
								"key": "username",
								"value": "postman",
								"type": "string"
							},
							{
								"key": "realm",
								"value": "{{echo_digest_realm}}",
								"type": "string"
							},
							{
								"key": "password",
								"value": "password",
								"type": "string"
							},
							{
								"key": "nonce",
								"value": "{{echo_digest_nonce}}",
								"type": "string"
							},
							{
								"key": "nonceCount",
								"value": "",
								"type": "string"
							},
							{
								"key": "clientNonce",
								"value": "",
								"type": "string"
							},
							{
								"key": "opaque",
								"value": "",
								"type": "string"
							},
							{
								"key": "qop",
								"value": "",
								"type": "string"
							},
							{
								"key": "disableRetryRequest",
								"type": "any"
							}
						]
					},
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"body contains authenticated\"] = responseBody.has(\"authenticated\");"
								]
							}
						}
					]
				},
				{
					"folder": "37368024-f6a8-0f70-85fc-7e876cde9e33",
					"id": "a4f24593-448b-88de-963f-eeb952d38a57",
					"name": "Delete Cookies",
					"dataMode": "params",
					"data": [],
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "One or more cookies that has been set for this domain can be deleted by providing the cookie names as part of the URL parameter. The response of this request is a JSON containing the list of currently set cookies.",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/cookies/delete?foo1&foo2",
					"preRequestScript": "",
					"tests": "// handle case where it is 304\n\nif (responseCode.code === 200) {\n    tests[\"Status code is 302 or 200\"] = true;\n    tests[\"Body contains cookies\"] = responseBody.has(\"cookies\");\n    \n    var body = JSON.parse(responseBody);\n    tests[\"Body contains cookie foo1\"] = 'foo1' in body.cookies;\n    tests[\"Body contains cookie foo2\"] = 'foo2' in body.cookies;\n\n}\nelse if (responseCode.code === 302) {\n    tests[\"Status code is 302 or 200\"] = true;\n    tests[\"Body has redirection message\"] = responseBody.has(\"Found. Redirecting to /cookies\")\n}\nelse {\n    tests[\"Status code is 302 or 200\"] = false;\n}\n\ntests[\"foo1 cookie is set\"] = _.get(postman.getResponseCookie('foo1'), 'value') === undefined;\n\ntests[\"foo2 cookie is set\"] = _.get(postman.getResponseCookie('foo2'), 'value') === undefined;",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [
						{
							"owner": 0,
							"lastUpdatedBy": "631643",
							"lastRevision": 277278563,
							"request": "a4f24593-448b-88de-963f-eeb952d38a57",
							"id": "522b3689-fb79-32fe-a253-7fb170b65555",
							"name": "Cookies Response",
							"status": "",
							"responseCode": {
								"code": 200,
								"name": "OK"
							},
							"time": "1417",
							"headers": [
								{
									"name": "Access-Control-Allow-Credentials",
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Headers",
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Methods",
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Origin",
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"description": ""
								},
								{
									"name": "Connection",
									"key": "Connection",
									"value": "keep-alive",
									"description": ""
								},
								{
									"name": "Content-Encoding",
									"key": "Content-Encoding",
									"value": "gzip",
									"description": ""
								},
								{
									"name": "Content-Length",
									"key": "Content-Length",
									"value": "46",
									"description": ""
								},
								{
									"name": "Content-Type",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"description": ""
								},
								{
									"name": "Date",
									"key": "Date",
									"value": "Thu, 29 Oct 2015 06:16:00 GMT",
									"description": ""
								},
								{
									"name": "Server",
									"key": "Server",
									"value": "nginx/1.6.2",
									"description": ""
								},
								{
									"name": "Vary",
									"key": "Vary",
									"value": "Accept-Encoding",
									"description": ""
								},
								{
									"name": "X-Powered-By",
									"key": "X-Powered-By",
									"value": "Sails <sailsjs.org>",
									"description": ""
								}
							],
							"cookies": [],
							"mime": "",
							"text": "{\"cookies\":{\"foo2\":\"bar\"}}",
							"language": "javascript",
							"rawDataType": "text",
							"state": {
								"size": "normal"
							},
							"previewType": "html",
							"searchResultScrolledTo": "-1",
							"version": null,
							"requestObject": "\"4ac1e980-6990-fc1d-5f80-4e5cedce9812\"",
							"createdAt": "2016-05-25T12:29:57.000Z",
							"updatedAt": "2016-05-25T12:29:58.000Z"
						}
					],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// handle case where it is 304",
									"",
									"if (responseCode.code === 200) {",
									"    tests[\"Status code is 302 or 200\"] = true;",
									"    tests[\"Body contains cookies\"] = responseBody.has(\"cookies\");",
									"    ",
									"    var body = JSON.parse(responseBody);",
									"    tests[\"Body contains cookie foo1\"] = 'foo1' in body.cookies;",
									"    tests[\"Body contains cookie foo2\"] = 'foo2' in body.cookies;",
									"",
									"}",
									"else if (responseCode.code === 302) {",
									"    tests[\"Status code is 302 or 200\"] = true;",
									"    tests[\"Body has redirection message\"] = responseBody.has(\"Found. Redirecting to /cookies\")",
									"}",
									"else {",
									"    tests[\"Status code is 302 or 200\"] = false;",
									"}",
									"",
									"tests[\"foo1 cookie is set\"] = _.get(postman.getResponseCookie('foo1'), 'value') === undefined;",
									"",
									"tests[\"foo2 cookie is set\"] = _.get(postman.getResponseCookie('foo2'), 'value') === undefined;"
								]
							}
						}
					]
				},
				{
					"folder": "74a8adf0-4f3f-068a-7c35-9745aa7b57d1",
					"id": "b4a2e234-3b0c-1a3e-14f8-5cafd567ee08",
					"name": "Time subtraction",
					"dataMode": "params",
					"data": null,
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "A simple `GET` request to `/time/subtract` to subtract units of time from the specified / current timestamp (as provided in the `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds` query parameters).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `difference` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  difference: \"difference between (provided / current) and provided timestamps\"\n}\n```",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/time/subtract?timestamp=2016-10-10&years=100",
					"preRequestScript": null,
					"tests": "var difference = JSON.parse(responseBody).difference;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var difference = JSON.parse(responseBody).difference;",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					]
				},
				{
					"folder": "74a8adf0-4f3f-068a-7c35-9745aa7b57d1",
					"id": "b709b99c-3347-40fc-2c21-98ceb7f9e267",
					"name": "Before comparisons",
					"dataMode": "params",
					"data": null,
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "A simple `GET` request to `/time/before` to check if the provided timestamps is before a comparison `target` (query parameter).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `before` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  before: true/false\n}\n```",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/time/before?timestamp=2016-10-10&target=2017-10-10",
					"preRequestScript": null,
					"tests": "var before = JSON.parse(responseBody).before;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Comparsion was correct\"] = before === true;",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var before = JSON.parse(responseBody).before;",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Comparsion was correct\"] = before === true;"
								]
							}
						}
					]
				},
				{
					"folder": "74a8adf0-4f3f-068a-7c35-9745aa7b57d1",
					"id": "c38e8be7-1739-2108-1804-a8b171c75298",
					"name": "Format timestamp",
					"dataMode": "params",
					"data": null,
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "A simple `GET` request to `/time/format` to convert the timestamp to any desired valid format.\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `format` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  format: \"formatted-timestamp\"\n}\n```",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/time/format?timestamp=2016-10-10&format=mm",
					"preRequestScript": null,
					"tests": "var format = JSON.parse(responseBody).format;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Formatted result is valid\"] = format === \"20\";\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var format = JSON.parse(responseBody).format;",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Formatted result is valid\"] = format === \"20\";",
									""
								]
							}
						}
					]
				},
				{
					"folder": "5d3595b3-5e8e-9e33-05ed-855c77298e4e",
					"id": "da16c006-6293-c1fe-ea42-e9ba8a5e68b1",
					"name": "Request Headers",
					"dataMode": "params",
					"data": [],
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "A `GET` request to this endpoint returns the list of all request headers as part of the response JSON.\nIn Postman, sending your own set of headers through the [Headers tab](https://www.getpostman.com/docs/requests#headers?source=echo-collection-app-onboarding) will reveal the headers as part of the response.",
					"headers": "my-sample-header: Lorem ipsum dolor sit amet\n",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/headers",
					"preRequestScript": "",
					"tests": "var responseJSON;\ntry {\n    tests[\"Body contains headers\"] = responseBody.has(\"headers\");\n    responseJSON = JSON.parse(responseBody);\n    tests[\"Header contains host\"] = \"host\" in responseJSON.headers;\n    tests[\"Header contains test parameter sent as part of request header\"] = \"my-sample-header\" in responseJSON.headers;\n}\ncatch (e) { }\n\n\n\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [
						{
							"owner": 0,
							"lastUpdatedBy": "631643",
							"lastRevision": 277278561,
							"request": "da16c006-6293-c1fe-ea42-e9ba8a5e68b1",
							"id": "881f141f-44c5-702f-211d-475360c6ccb3",
							"name": "my-sample-header",
							"status": "",
							"responseCode": {
								"code": 200,
								"name": "OK"
							},
							"time": "460",
							"headers": [
								{
									"name": "Access-Control-Allow-Credentials",
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Headers",
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Methods",
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Origin",
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"description": ""
								},
								{
									"name": "Connection",
									"key": "Connection",
									"value": "keep-alive",
									"description": ""
								},
								{
									"name": "Content-Encoding",
									"key": "Content-Encoding",
									"value": "gzip",
									"description": ""
								},
								{
									"name": "Content-Length",
									"key": "Content-Length",
									"value": "342",
									"description": ""
								},
								{
									"name": "Content-Type",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"description": ""
								},
								{
									"name": "Date",
									"key": "Date",
									"value": "Thu, 31 Mar 2016 11:14:00 GMT",
									"description": ""
								},
								{
									"name": "Server",
									"key": "Server",
									"value": "nginx/1.6.2",
									"description": ""
								},
								{
									"name": "Vary",
									"key": "Vary",
									"value": "Accept-Encoding",
									"description": ""
								},
								{
									"name": "X-Powered-By",
									"key": "X-Powered-By",
									"value": "Sails <sailsjs.org>",
									"description": ""
								}
							],
							"cookies": [
								{
									"domain": "echo.getpostman.com",
									"hostOnly": true,
									"httpOnly": true,
									"name": "sails.sid",
									"path": "/",
									"secure": false,
									"session": true,
									"storeId": "0",
									"value": "s%3A9stja5zKmIILxq9Jvtha7Lp9LIz1VIdK.Vp8MHC%2BEUJe4ICZPXn2JAoXaV2bTgtoQd%2B3XJLNr51Y"
								}
							],
							"mime": "",
							"text": "{\"headers\":{\"host\":\"echo.getpostman.com\",\"accept\":\"*/*\",\"accept-encoding\":\"gzip, deflate, sdch\",\"accept-language\":\"en-US,en;q=0.8\",\"cache-control\":\"no-cache\",\"my-sample-header\":\"Lorem ipsum dolor sit amet\",\"postman-token\":\"3c8ea80b-f599-fba6-e0b4-a0910440e7b6\",\"user-agent\":\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36\",\"x-forwarded-port\":\"443\",\"x-forwarded-proto\":\"https\"}}",
							"language": "javascript",
							"rawDataType": "text",
							"state": {
								"size": "normal"
							},
							"previewType": "html",
							"searchResultScrolledTo": "-1",
							"version": null,
							"requestObject": "{\"url\":\"https://echo.getpostman.com/headers\",\"headers\":[{\"key\":\"my-sample-header\",\"value\":\"Lorem ipsum dolor sit amet\",\"enabled\":true}],\"data\":[],\"method\":\"GET\",\"dataMode\":\"params\"}",
							"createdAt": "2016-05-25T12:29:57.000Z",
							"updatedAt": "2016-05-25T12:29:58.000Z"
						}
					],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"try {",
									"    tests[\"Body contains headers\"] = responseBody.has(\"headers\");",
									"    responseJSON = JSON.parse(responseBody);",
									"    tests[\"Header contains host\"] = \"host\" in responseJSON.headers;",
									"    tests[\"Header contains test parameter sent as part of request header\"] = \"my-sample-header\" in responseJSON.headers;",
									"}",
									"catch (e) { }",
									"",
									"",
									"",
									""
								]
							}
						}
					]
				},
				{
					"folder": "084b21bd-d250-180b-5ed8-94cfaca39fdd",
					"id": "dc8d6e30-c1cf-9d98-4b95-fc1ca6196511",
					"name": "Transform collection from format v2 to v1",
					"dataMode": "raw",
					"data": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"event\": [{\n      \"listen\": \"test\",\n      \"script\": {\n        \"type\": \"text/javascript\",\n        \"exec\": [\"tests['response code is 200'] = (responseCode.code === 200);\"]\n      }\n    }],\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }, {\n    \"name\": \"A simple POST request with JSON body\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"application/json\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"\n      }\n    }\n  }]\n}",
					"rawModeData": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"event\": [{\n      \"listen\": \"test\",\n      \"script\": {\n        \"type\": \"text/javascript\",\n        \"exec\": [\"tests['response code is 200'] = (responseCode.code === 200);\"]\n      }\n    }],\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }, {\n    \"name\": \"A simple POST request with JSON body\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"application/json\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"\n      }\n    }\n  }]\n}",
					"descriptionFormat": null,
					"description": "",
					"headers": "Content-Type: application/json\n",
					"method": "POST",
					"pathVariables": {},
					"url": "https://postman-echo.com/transform/collection?from=2&to=1",
					"preRequestScript": "",
					"tests": "",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [
						{
							"owner": 0,
							"lastUpdatedBy": "631643",
							"lastRevision": 928459531,
							"request": "dc8d6e30-c1cf-9d98-4b95-fc1ca6196511",
							"id": "a5a669db-6b5f-89bb-62a0-6debe73f491f",
							"name": "Sample v1 Response",
							"status": "",
							"responseCode": {
								"code": 200,
								"name": "OK",
								"fromServer": true
							},
							"time": "276",
							"headers": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"name": "Access-Control-Allow-Origin",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Wed, 11 Jan 2017 10:38:42 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"569-P9uLZEIyoPfMmQ+U0mTO1A\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "nginx/1.10.1",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "X-HTTP-Method-Override, Accept-Encoding",
									"name": "Vary",
									"description": ""
								},
								{
									"key": "set-cookie",
									"value": "sails.sid=s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI; Path=/; HttpOnly",
									"name": "set-cookie",
									"description": ""
								},
								{
									"key": "transfer-encoding",
									"value": "chunked",
									"name": "transfer-encoding",
									"description": ""
								}
							],
							"cookies": [
								{
									"url": "https://postman-echo.com/transform/collection?from=2&to=1",
									"name": "sails.sid",
									"value": "s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI",
									"domain": "postman-echo.com",
									"secure": false,
									"httpOnly": true,
									"expirationDate": 2147463847,
									"path": "/"
								}
							],
							"mime": "",
							"text": "{\"id\":\"0c42230c-c8e4-4ca0-a4aa-d393971de8b8\",\"name\":\"Sample Postman Collection\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"order\":[\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\"],\"folders\":[],\"requests\":[{\"id\":\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"name\":\"A simple GET request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"GET\",\"headers\":\"\",\"data\":[],\"rawModeData\":\"\",\"tests\":\"tests['response code is 200'] = (responseCode.code === 200);\",\"preRequestScript\":\"\",\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\"},{\"id\":\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"name\":\"A simple POST request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: text/plain\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\"url\":\"https://postman-echo.com/post\"},{\"id\":\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\",\"name\":\"A simple POST request with JSON body\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: application/json\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\"url\":\"https://postman-echo.com/post\"}]}",
							"language": "json",
							"rawDataType": null,
							"state": {
								"size": "normal"
							},
							"previewType": "text",
							"searchResultScrolledTo": "-1",
							"version": null,
							"requestObject": "{\"url\":\"https://postman-echo.com/transform/collection?from=2&to=1\",\"headers\":[{\"key\":\"Content-Type\",\"value\":\"application/json\",\"enabled\":true,\"description\":\"The mime type of this content\",\"disabled\":false}],\"data\":\"{\\n  \\\"info\\\": {\\n    \\\"name\\\": \\\"Sample Postman Collection\\\",\\n    \\\"schema\\\": \\\"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\\\",\\n    \\\"description\\\": \\\"A sample collection to demonstrate collections as a set of related requests\\\"\\n  },\\n\\n  \\\"item\\\": [{\\n    \\\"name\\\": \\\"A simple GET request\\\",\\n    \\\"event\\\": [{\\n      \\\"listen\\\": \\\"test\\\",\\n      \\\"script\\\": {\\n        \\\"type\\\": \\\"text/javascript\\\",\\n        \\\"exec\\\": [\\\"tests['response code is 200'] = (responseCode.code === 200);\\\"]\\n      }\\n    }],\\n    \\\"request\\\": {\\n      \\\"url\\\": \\\"https://postman-echo.com/get?source=newman-sample-github-collection\\\",\\n      \\\"method\\\": \\\"GET\\\"\\n    }\\n  }, {\\n    \\\"name\\\": \\\"A simple POST request\\\",\\n    \\\"request\\\": {\\n      \\\"url\\\": \\\"https://postman-echo.com/post\\\",\\n      \\\"method\\\": \\\"POST\\\",\\n      \\\"header\\\": [{\\n        \\\"key\\\": \\\"Content-Type\\\",\\n        \\\"value\\\": \\\"text/plain\\\"\\n      }],\\n      \\\"body\\\": {\\n        \\\"mode\\\": \\\"raw\\\",\\n        \\\"raw\\\": \\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"\\n      }\\n    }\\n  }, {\\n    \\\"name\\\": \\\"A simple POST request with JSON body\\\",\\n    \\\"request\\\": {\\n      \\\"url\\\": \\\"https://postman-echo.com/post\\\",\\n      \\\"method\\\": \\\"POST\\\",\\n      \\\"header\\\": [{\\n        \\\"key\\\": \\\"Content-Type\\\",\\n        \\\"value\\\": \\\"application/json\\\"\\n      }],\\n      \\\"body\\\": {\\n        \\\"mode\\\": \\\"raw\\\",\\n        \\\"raw\\\": \\\"{\\\\\\\"text\\\\\\\":\\\\\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\\\\\"}\\\"\\n      }\\n    }\\n  }]\\n}\",\"method\":\"POST\",\"dataMode\":\"raw\"}",
							"createdAt": "2017-01-11T10:39:00.000Z",
							"updatedAt": "2017-01-11T10:39:00.000Z"
						}
					],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null
				},
				{
					"folder": "5d3595b3-5e8e-9e33-05ed-855c77298e4e",
					"id": "e50f9111-3a52-a325-47f1-fc702bea1fff",
					"name": "Response Headers",
					"dataMode": "params",
					"data": [],
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "This endpoint causes the server to send custom set of response headers. Providing header values as part of the URL parameters of a `GET` request to this endpoint returns the same as part of response header.\n\nTo send your own set of headers, simply add or replace the the URL parameters with your own set.",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/response-headers?Content-Type=text/html&test=response_headers",
					"preRequestScript": "",
					"tests": "tests[\"Body contains Content-Type\"] = responseBody.has(\"Content-Type\");\ntests[\"response headers have key sent as part of request\"] = (postman.getResponseHeader('test') == 'response_headers')",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [
						{
							"owner": 0,
							"lastUpdatedBy": "631643",
							"lastRevision": 277278570,
							"request": "e50f9111-3a52-a325-47f1-fc702bea1fff",
							"id": "85a7208f-3c37-f297-9772-81b97d28dae0",
							"name": "Response headers",
							"status": "",
							"responseCode": {
								"code": 200,
								"name": "OK"
							},
							"time": "568",
							"headers": [
								{
									"name": "Access-Control-Allow-Credentials",
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Headers",
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Methods",
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"description": ""
								},
								{
									"name": "Access-Control-Allow-Origin",
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"description": ""
								},
								{
									"name": "Connection",
									"key": "Connection",
									"value": "keep-alive",
									"description": ""
								},
								{
									"name": "Content-Encoding",
									"key": "Content-Encoding",
									"value": "gzip",
									"description": ""
								},
								{
									"name": "Content-Length",
									"key": "Content-Length",
									"value": "71",
									"description": ""
								},
								{
									"name": "Content-Type",
									"key": "Content-Type",
									"value": "text/html; charset=utf-8",
									"description": ""
								},
								{
									"name": "Date",
									"key": "Date",
									"value": "Thu, 31 Mar 2016 11:14:18 GMT",
									"description": ""
								},
								{
									"name": "Server",
									"key": "Server",
									"value": "nginx/1.6.2",
									"description": ""
								},
								{
									"name": "Vary",
									"key": "Vary",
									"value": "Accept-Encoding",
									"description": ""
								},
								{
									"name": "X-Powered-By",
									"key": "X-Powered-By",
									"value": "Sails <sailsjs.org>",
									"description": ""
								},
								{
									"name": "test",
									"key": "test",
									"value": "response_headers",
									"description": ""
								}
							],
							"cookies": [
								{
									"domain": "echo.getpostman.com",
									"hostOnly": true,
									"httpOnly": true,
									"name": "sails.sid",
									"path": "/",
									"secure": false,
									"session": true,
									"storeId": "0",
									"value": "s%3A9stja5zKmIILxq9Jvtha7Lp9LIz1VIdK.Vp8MHC%2BEUJe4ICZPXn2JAoXaV2bTgtoQd%2B3XJLNr51Y"
								}
							],
							"mime": "",
							"text": "{\"Content-Type\":\"text/html\",\"test\":\"response_headers\"}",
							"language": "html",
							"rawDataType": "text",
							"state": {
								"size": "normal"
							},
							"previewType": "html",
							"searchResultScrolledTo": "-1",
							"version": null,
							"requestObject": "{\"url\":\"https://echo.getpostman.com/response-headers?Content-Type=text/html&test=response_headers\",\"headers\":[],\"data\":[],\"method\":\"GET\",\"dataMode\":\"params\"}",
							"createdAt": "2016-05-25T12:29:58.000Z",
							"updatedAt": "2016-05-25T12:29:58.000Z"
						}
					],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Body contains Content-Type\"] = responseBody.has(\"Content-Type\");",
									"tests[\"response headers have key sent as part of request\"] = (postman.getResponseHeader('test') == 'response_headers')"
								]
							}
						}
					]
				},
				{
					"folder": "74a8adf0-4f3f-068a-7c35-9745aa7b57d1",
					"id": "e8a83301-4e86-1e6c-e88c-2cbedc1524d6",
					"name": "Object representation",
					"dataMode": "params",
					"data": null,
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "A simple `GET` request to `/time/object` to return the current / provided timestamp as a JSON object.\n\nFor instance, if the `unit` has been specified as `month`, the returned timestamp would indicate the beginning of the current month. Similar results are returned for other units of time, like: `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds`\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  years: 2016,\n  months: 10,\n  days: 10,\n  hours: 23,\n  minutes: 34,\n  seconds: 20,\n  milliseconds: 980\n}\n```",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/time/start?timestamp=2016-10-10&unit=month",
					"preRequestScript": null,
					"tests": "var object = JSON.parse(responseBody);\n\ntests[\"Status code is 200\"] = responseCode.code === 200;",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var object = JSON.parse(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					]
				},
				{
					"folder": "74a8adf0-4f3f-068a-7c35-9745aa7b57d1",
					"id": "f922a99e-6e96-ded7-ac6f-3ca6f958987d",
					"name": "Extract timestamp unit",
					"dataMode": "params",
					"data": null,
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "A simple `GET` request to `/time/unit` to extract the specified timestamp unit (as provided in the `unit` query parameter). The default unit returned is the `year`.\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `unit` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  unit: \"extracted-timestamp-unit\"\n}\n```",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/time/unit?timestamp=2016-10-10&unit=day",
					"preRequestScript": null,
					"tests": "var unit = JSON.parse(responseBody).unit;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Returned unit is valid\"] = unit === 1;\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var unit = JSON.parse(responseBody).unit;",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Returned unit is valid\"] = unit === 1;",
									""
								]
							}
						}
					]
				},
				{
					"folder": "930f54b4-c5cd-2363-7cf5-b9022d3c0aae",
					"id": "fd961ad0-ab24-68d8-4be5-573e8585d526",
					"name": "GZip Compressed Response",
					"dataMode": "params",
					"data": [],
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "This endpoint returns the response using [gzip compression algoritm](https://en.wikipedia.org/wiki/Gzip).\nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `gzip` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
					"headers": "",
					"method": "GET",
					"pathVariables": {},
					"url": "https://postman-echo.com/gzip",
					"preRequestScript": "",
					"tests": "try {\n    var data = JSON.parse(responseBody);\n    tests[\"Body contains gzipped\"] = responseBody.has(\"gzipped\");\n    tests[\"Body contains headers\"] = responseBody.has(\"headers\");\n    tests[\"Body contains method\"] = responseBody.has(\"method\");\n}\ncatch(e) {\n    console.log('Cannot parse response,probably not a JSON');\n}\ntests[\"response code is 200\"] = responseCode.code === 200;",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"try {",
									"    var data = JSON.parse(responseBody);",
									"    tests[\"Body contains gzipped\"] = responseBody.has(\"gzipped\");",
									"    tests[\"Body contains headers\"] = responseBody.has(\"headers\");",
									"    tests[\"Body contains method\"] = responseBody.has(\"method\");",
									"}",
									"catch(e) {",
									"    console.log('Cannot parse response,probably not a JSON');",
									"}",
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					]
				},
				{
					"folder": "084b21bd-d250-180b-5ed8-94cfaca39fdd",
					"id": "fffc59d5-1e2d-ccc8-2101-2f7b9216be40",
					"name": "Transform collection from format v1 to v2",
					"dataMode": "raw",
					"data": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\",\n    \"4511ca8b-0bc7-430f-b894-a7ec1036f322\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    },\n    {\n      \"id\": \"4511ca8b-0bc7-430f-b894-a7ec1036f322\",\n      \"name\": \"A simple POST request with JSON body\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: application/json\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}",
					"rawModeData": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\",\n    \"4511ca8b-0bc7-430f-b894-a7ec1036f322\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    },\n    {\n      \"id\": \"4511ca8b-0bc7-430f-b894-a7ec1036f322\",\n      \"name\": \"A simple POST request with JSON body\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: application/json\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}",
					"descriptionFormat": "html",
					"description": "",
					"headers": "Content-Type: application/json\n",
					"method": "POST",
					"pathVariables": {},
					"url": "https://postman-echo.com/transform/collection?from=1&to=2",
					"preRequestScript": "",
					"tests": "",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"responses": [
						{
							"owner": 0,
							"lastUpdatedBy": "631643",
							"lastRevision": 928472286,
							"request": "fffc59d5-1e2d-ccc8-2101-2f7b9216be40",
							"id": "1ae2f3c1-9bde-e8f1-273c-82532812f931",
							"name": "Sample v2 Response",
							"status": "",
							"responseCode": {
								"code": 200,
								"name": "OK",
								"fromServer": true
							},
							"time": "920",
							"headers": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"name": "Access-Control-Allow-Origin",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Wed, 11 Jan 2017 10:41:32 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"4cc-7P727Clhlrl9+b1/vneniw\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "nginx/1.10.1",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "X-HTTP-Method-Override, Accept-Encoding",
									"name": "Vary",
									"description": ""
								},
								{
									"key": "set-cookie",
									"value": "sails.sid=s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU; Path=/; HttpOnly",
									"name": "set-cookie",
									"description": ""
								},
								{
									"key": "transfer-encoding",
									"value": "chunked",
									"name": "transfer-encoding",
									"description": ""
								}
							],
							"cookies": [
								{
									"url": "https://postman-echo.com/transform/collection?from=1&to=2",
									"name": "sails.sid",
									"value": "s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU",
									"domain": "postman-echo.com",
									"secure": false,
									"httpOnly": true,
									"expirationDate": 2147463847,
									"path": "/"
								}
							],
							"mime": "",
							"text": "{\"variables\":[],\"info\":{\"name\":\"Sample Postman Collection\",\"_postman_id\":\"7875be4b-917d-4aff-8cc4-5606c36bf418\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"schema\":\"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"},\"item\":[{\"name\":\"A simple GET request\",\"event\":[{\"listen\":\"test\",\"script\":{\"type\":\"text/javascript\",\"exec\":[\"tests['response code is 200'] = (responseCode.code === 200);\"]}}],\"request\":{\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\",\"method\":\"GET\",\"header\":[],\"body\":{\"mode\":\"raw\",\"raw\":\"\"}},\"response\":[]},{\"name\":\"A simple POST request\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"text/plain\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"}},\"response\":[]},{\"name\":\"A simple POST request with JSON body\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"application/json\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"}},\"response\":[]}]}",
							"language": "json",
							"rawDataType": null,
							"state": {
								"size": "normal"
							},
							"previewType": "text",
							"searchResultScrolledTo": "-1",
							"version": null,
							"requestObject": "{\"url\":\"https://postman-echo.com/transform/collection?from=1&to=2\",\"headers\":[{\"key\":\"Content-Type\",\"value\":\"application/json\",\"enabled\":true,\"description\":\"The mime type of this content\",\"disabled\":false}],\"data\":\"{\\n  \\\"id\\\": \\\"7875be4b-917d-4aff-8cc4-5606c36bf418\\\",\\n  \\\"name\\\": \\\"Sample Postman Collection\\\",\\n  \\\"description\\\": \\\"A sample collection to demonstrate collections as a set of related requests\\\",\\n  \\\"order\\\": [\\n    \\\"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\\\",\\n    \\\"141ba274-cc50-4377-a59c-e080066f375e\\\",\\n    \\\"4511ca8b-0bc7-430f-b894-a7ec1036f322\\\"\\n  ],\\n  \\\"folders\\\": [],\\n  \\\"requests\\\": [\\n    {\\n      \\\"id\\\": \\\"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\\\",\\n      \\\"name\\\": \\\"A simple GET request\\\",\\n      \\\"collectionId\\\": \\\"877b9dae-a50e-4152-9b89-870c37216f78\\\",\\n      \\\"method\\\": \\\"GET\\\",\\n      \\\"headers\\\": \\\"\\\",\\n      \\\"data\\\": [],\\n      \\\"rawModeData\\\": \\\"\\\",\\n      \\\"tests\\\": \\\"tests['response code is 200'] = (responseCode.code === 200);\\\",\\n      \\\"preRequestScript\\\": \\\"\\\",\\n      \\\"url\\\": \\\"https://postman-echo.com/get?source=newman-sample-github-collection\\\"\\n    },\\n    {\\n      \\\"id\\\": \\\"141ba274-cc50-4377-a59c-e080066f375e\\\",\\n      \\\"name\\\": \\\"A simple POST request\\\",\\n      \\\"collectionId\\\": \\\"877b9dae-a50e-4152-9b89-870c37216f78\\\",\\n      \\\"method\\\": \\\"POST\\\",\\n      \\\"headers\\\": \\\"Content-Type: text/plain\\\",\\n      \\\"dataMode\\\": \\\"raw\\\",\\n      \\\"data\\\": [],\\n      \\\"rawModeData\\\": \\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\",\\n      \\\"url\\\": \\\"https://postman-echo.com/post\\\"\\n    },\\n    {\\n      \\\"id\\\": \\\"4511ca8b-0bc7-430f-b894-a7ec1036f322\\\",\\n      \\\"name\\\": \\\"A simple POST request with JSON body\\\",\\n      \\\"collectionId\\\": \\\"877b9dae-a50e-4152-9b89-870c37216f78\\\",\\n      \\\"method\\\": \\\"POST\\\",\\n      \\\"headers\\\": \\\"Content-Type: application/json\\\",\\n      \\\"dataMode\\\": \\\"raw\\\",\\n      \\\"data\\\": [],\\n      \\\"rawModeData\\\": \\\"{\\\\\\\"text\\\\\\\":\\\\\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\\\\\"}\\\",\\n      \\\"url\\\": \\\"https://postman-echo.com/post\\\"\\n    }\\n  ]\\n}\",\"method\":\"POST\",\"dataMode\":\"raw\"}",
							"createdAt": "2017-01-11T10:41:39.000Z",
							"updatedAt": "2017-01-11T10:41:39.000Z"
						}
					],
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"owner": 0,
					"auth": null
				}
			]
		},
		{
			"id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
			"name": "Imgur API",
			"description": "![image](https://i.imgur.com/n744BL9.png)\n\n## API Status\nStatus for the API can be found at [status.imgur.com](http://status.imgur.com)!\n\n## Getting Started\nImgur's API exposes the entire Imgur infrastructure via a standardized programmatic interface. Using Imgur's API, you can do just about anything you can do on imgur.com, while using your programming language of choice. The Imgur API is a RESTful API based on HTTP requests and JSON responses.\n\nThis version of the API, version 3, uses OAuth 2.0. This means that all requests will need to be encrypted and sent via HTTPS. It also means that you need to register your application, even if you aren't allowing users to login.\n\nThe easiest way to start using the Imgur API is by clicking the **Run in Postman** button above. [Postman](https://www.getpostman.com/) is a free tool which helps developers run and debug API requests, and is the source of truth for this documentation. Every endpoint you see documented here is readily available by running our Postman collection. \n\n## Example code\nThese examples serve as a starting point to help familiarize you with the basics of the Imgur API.\n* [Official Python library](https://github.com/Imgur/imgurpython)\n* [Android Upload Example](https://github.com/AKiniyalocts/imgur-android)\n* [Older Example Android app](https://github.com/talklittle/ImgurAPIv3ExampleAndroid)\n* [Example HTML5/JavaScript app](https://github.com/eirikb/gifie) - [Javascript OAuth](https://gist.github.com/eirikb/7404666)—[Live Demo](http://eirikb.github.io/gifie/) (uses your webcam)\n* [Example Objective C library](https://github.com/geoffmacd/ImgurSession)\n\n## Need help?\nThe Imgur engineers are always around answering questions. The quickest way to get help is by posting your question on StackOverflow with the [Imgur tag](https://stackoverflow.com/questions/tagged/imgur).\n\n## Register an Application (IMPORTANT)\nEach client must register their application and receive the `client_id` and `client_secret`.\n\nFor public read-only and anonymous resources, such as getting image info, looking up user comments, etc. all you need to do is send an authorization header with your client_id in your requests. This also works if you'd like to upload images anonymously (without the image being tied to an account), or if you'd like to create an anonymous album. This lets us know which application is accessing the API.\n\n    Authorization: Client-ID <YOUR_CLIENT_ID>\n\n\n### Registration Quickstart\nIf you are just getting started, an easy way to explore the endpoints is by creating an application using following instructions below.\n\n1. Download [Postman](https://www.getpostman.com/) and click the **Run in Postman** button at the top of this page. This will load our collection of endpoints into Postman for easy debugging.\n2. [Register your application](https://api.imgur.com/oauth2/addclient) using the postman callback URL: `https://www.getpostman.com/oauth2/callback` ![Image](https://i.imgur.com/Ied42En.png)\n3. In Postman, under the main request builder panel, click the Authorization tab. Click the **Get New Access Token** button. Set **Auth URL** to `https://api.imgur.com/oauth2/authorize` and **Access Token URL** to `https://api.imgur.com/oauth2/token`. Add the **Client ID** and **Client Secret** you received from registering your application above, then click **Request Token** ![Image](https://i.imgur.com/iKHSGFD.png)\n4. After logging in and granting access to your application, you should receive a refresh token. ![Image](https://i.imgur.com/0dN8cyJ.png) Copy this refresh token, then click the gear icon in the top right of Postman. Click **Manage Environments** then **Add**, and add the `refreshToken`, `clientId`, and `clientSecret` fields as shown below ![Image](https://i.imgur.com/DaFV5ux.png)\n5. Inside the **Account** folder, run the **Generate Access Token** endpoint. The response you receive will give you an access token which will be valid for about a month. This token is automatically saved to your Postman environment via the JavaScript test for that endpoint as seen below. Whenever your token expires, just re-run this endpoint and a new token will be saved to your environment. ![Image](https://i.imgur.com/5Ed4RhP.png)\n6. Run any endpoint within the collection. You have authorized your app and logged in with your username, so you are now making authenticated requests against the Imgur API. Happy hacking!  \n\n## Commercial Usage\nYour application is commercial if you're making any money with it (which includes in-app advertising), if you plan on making any money with it, or if it belongs to a commercial organization.\n\nTo use Imgur's API commercially, you must first [register your application](https://api.imgur.com/oauth2/addclient). Once that's done, you must [register with Mashape](https://market.mashape.com/imgur/imgur-9). Mashape allows you to choose a pricing plan that fits your needs. From then on, the API endpoint is `https://imgur-apiv3.p.mashape.com/` which must be used in place of `https://api.imgur.com/`. Additionally, you must set a `X-Mashape-Key` request header with the key obtained from Mashape.\n\n## Free Usage\nThe Imgur API is free for non-commercial usage. Your application is probably free if you don't plan on making any money with it, or if it's open source.\n\n## Endpoints\nThe API is accessed by making HTTP requests to a specific version endpoint URL, in which GET or POST variables contain information about what you wish to access. Every endpoint is accessed via an SSL-enabled HTTPS (port 443), this is because everything is using OAuth 2.0.\n\nEverything (methods, parameters, etc.) is fixed to a version number, and every call must contain one. Different Versions are available at different endpoint URLs. The latest version is Version 3.\n\nThe stable HTTP endpoint for the latest version is:\n`https://api.imgur.com/3/`\n\n## Responses\nEach response is wrapped in a data tag. This means if you have a response, it will always be within the data field. We also include a status code and success flag in the response. For more information and examples go to the [data models](https://api.imgur.com/models) page.\n\nResponses are either JSON (the default), JSONP, or XML. Response formats are specified by supplying an extension to the API call. For example, if you want to access the gallery information with JSON:\n\n    https://api.imgur.com/3/gallery.json\n    \nJSONP responses are made by adding the callback parameter via either GET or POST to the request. For example:\n\n    https://api.imgur.com/3/gallery.json?callback=function_name\n    \nand to specify an XML response, the URL is:\n\n    https://api.imgur.com/3/gallery.xml\n    \n## Paging Results\nFor the most part, if the API action is plural, you can page it via a query string parameter.\n\nNOTE: /gallery endpoints do not support the perPage query string, and /album/{id}/images is not paged.\n\n| Query String Parameter | Required | Description                                                   |\n|------------------------|----------|---------------------------------------------------------------|\n| page                   | optional | Page number of the result set (default: 0)                    |\n| perPage                | optional | Limit the number of results per page. (default: 50, max: 100) |\n\nExample:\n\n    https://api.imgur.com/3/account/imgur/images/0.json?perPage=42&page=6\n    \n## Authentication\nThe API requires each client to use OAuth 2 authentication. This means you'll have to [register your application](https://api.imgur.com/oauth2/addclient), and generate an access_code if you'd like to log in as a user.\nFor public read-only and anonymous resources, such as getting image info, looking up user comments, etc. all you need to do is send an authorization header with your client_id in your requests. This also works if you'd like to upload images anonymously (without the image being tied to an account), or if you'd like to create an anonymous album. This lets us know which application is accessing the API.\n\n    Authorization: Client-ID <YOUR_CLIENT_ID>\n\nFor accessing a user's account, please visit the OAuth2 section of the docs.\nOAuth Endpoints\nTo access OAuth, the following endpoints must be used:\n\n    https://api.imgur.com/oauth2/addclient\n    https://api.imgur.com/oauth2/authorize\n    https://api.imgur.com/oauth2/token\n    \nYou can also verify your OAuth 2.0 tokens by setting your header and visiting the page \n\n    https://api.imgur.com/oauth2/secret\n    \n## Rate Limits\nThe Imgur API uses a credit allocation system to ensure fair distribution of capacity. Each application can allow *approximately 1,250 uploads per day or approximately 12,500 requests per day*. If the daily limit is hit five times in a month, then the app will be blocked for the rest of the month. The remaining credit limit will be shown with each requests response in the `X-RateLimit-ClientRemaining` HTTP header.\n\nWe also limit each user (via their IP Address) for each application, this is to ensure that no single user is able to spam an application. This limit will simply stop the user from requesting more data for an hour. We recommend that each application takes precautions against spamming by implementing rate limiting on their own applications. Each response will also include the remaining credits for each user in the `X-RateLimit-UserLimit` HTTP header.\n\nEach request contains rate limit information in the HTTP response headers.\n\n| HTTP Header                 | Description                                                       |\n|-----------------------------|-------------------------------------------------------------------|\n| X-RateLimit-UserLimit       | Total credits that can be allocated.                              |\n| X-RateLimit-UserRemaining   | Total credits available.                                          |\n| X-RateLimit-UserReset       | Timestamp (unix epoch) for when the credits will be reset.        |\n| X-RateLimit-ClientLimit     | Total credits that can be allocated for the application in a day. |\n| X-RateLimit-ClientRemaining | Total credits remaining for the application in a day.             |\n\nUnless otherwise noted, an API call deducts 1 credit from your allocation. However, uploads have a significantly higher computational cost on our back-end, and deduct 10 credits per call. All OAuth calls, such as refreshing tokens or authorizing users, do not deduct any credits.\nYou can also check the current rate limit status on your application by sending a GET request to \n\n    https://api.imgur.com/3/credits\n\nYour use of the Imgur API is also limited by the number of POST requests your IP can make across all endpoints. This limit is *1,250 POST requests per hour*. [Commercial Usage](http://api.imgur.com/#commercial) is not impacted by this limit. Each POST request will contain the following headers.\n\n| HTTP Header                 | Description                                        |\n|-----------------------------|----------------------------------------------------|\n| X-Post-Rate-Limit-Limit     | Total POST credits that are allocated.             |\n| X-Post-Rate-Limit-Remaining | Total POST credits available.                      |\n| X-Post-Rate-Limit-Reset     | Time in seconds until your POST ratelimit is reset |\n\n# Authorization and OAuth\n\n## OAuth 2.0 Overview\nThe Imgur API uses OAuth 2.0 for authentication. OAuth 2.0 has four steps: registration, authorization, making the request, and getting new access_tokens after the initial one expired.\n\n* [Registration](https://api.imgur.com/oauth2/addclient) gives you your `client_id` and `client_secret`, which is then used to authorize the user to your app.\n* Authorization is the process of the user saying \"I would like YourSuperAwesomeImgurApp to access my data\". YourSuperAwesomeImgurApp cannot access the user's account without them agreeing to it. After they agree, you will get refresh and access tokens.\n    * `access_token`: is your secret key used to access the user's data. It can be thought of the user's password and username combined into one, and is used to access the user's account. It expires after 1 month.\n    * `refresh_token`: is used to request new access_tokens. Since access_tokens expire after 1 month, we need a way to request new ones without going through the entire authorization step again. It does not expire.\n    * `authorization_code`: is used for obtaining the the access and refresh tokens. It's purpose is to be immediately exchanged for an access_token and refresh_token.\n    * Finally, after obtaining your access_token, you make your API requests by sending the Authorization header as such: \n    ```Authorization: Bearer YOUR_ACCESS_TOKEN```\n    \n* Registration\n\nEach client must register their application and receive the client_id and client_secret.\n\nFor public read-only and anonymous resources, such as getting image info, looking up user comments, etc. all you need to do is send an authorization header with your client_id in your requests. This also works if you'd like to upload images anonymously (without the image being tied to an account), or if you'd like to create an anonymous album. This lets us know which application is accessing the API.\n\n    Authorization: Client-ID YOUR_CLIENT_ID\n\n## Authorization\n\n> _NOTE:_ If your app is not only requesting public read-only information, then you may skip this step.\n\nTo access a user's account, the user must first authorize your application so that you can get an access token. Requesting an access token is fairly straightforward: point a browser (pop-up, or full page redirect if needed) to a URL and include a set of query string parameters.\n\n    https://api.imgur.com/oauth2/authorize?client_id=YOUR_CLIENT_ID&response_type=REQUESTED_RESPONSE_TYPE&state=APPLICATION_STATE\n    \nThe user will now be able to enter their password and accept that they'd like to use your application. Once this happens, they will be redirected to your redirect URL (that you entered during registration) with the access token. You can now send the access token in the headers to access their account information.\n\n#### Forming the authorization URL\n\nAuthorization Endpoint: `https://api.imgur.com/oauth2/authorize`\n\n| Parameter     | Values                                       | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n|---------------|----------------------------------------------||\n| response_type | `token`, `code`, or `pin`                    | _Only `token` should be used, as the other methods have been deprecated._ Determines if Imgur returns an access_token, authorization_code (_deprecated_), or a PIN code(_deprecated_). When using `token`, the `access_token` and `refresh_token` will be given to you in the form of query string parameters attached to your redirect URL, which the user may be able to read.                                                                                                                                          |\n| client_id     | the Client ID you recieved from registration | Indicates the client that is making the request.                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| state         | any string                                   | This optional parameter indicates any state which may be useful to your application upon receipt of the response. Imgur round-trips this parameter, so your application receives the same value it sent. Possible uses include redirecting the user to the correct resource in your site, nonces, and cross-site-request-forgery mitigations.                                                                                                                                                                             |\n\n#### The `response_type` Parameter\n\n`token`: This authorization flow will directly return the `access_token` and `refresh_token` via the redirect URL you specified during registration, in the form of hash query string parameters. Example: `http://example.com#access_token=ACCESS_TOKEN&token_type=Bearer&expires_in=3600`\n\nThe `code` and `pin` response types have been deprecated and will soon no longer be supported.\n\n### Handling the Authorization Response\n\nThe response will be sent to the redirect URL that was specified during registration. The contents and format of the response is determined by the value of the response_type parameter.\nYou're able to change your applications redirect URL at any time by accessing the ['apps' section of your account settings](http://imgur.com/account/settings/apps).\n\n#### JavaScript responses for the response_type: `token`\n\nImgur returns an access token to your application if the user grants your application the permissions it requested. The access token is returned to your application in the fragment as part of the `access_token` parameter. Since a fragment (the part of the URL after the `#`) is not sent to the server, client side javascript must parse the fragment and extract the value of the `access_token` parameter.\nOther parameters included in the response include `expires_in` and `token_type`. These parameters describe the lifetime of the token in seconds, and the kind of token that is being returned. If the `state` parameter was included in the request, then it is also included in the response.\nAn example User Agent flow response is shown below:\n\n    https://example.com/oauthcallback#access_token=ACCESS_TOKEN&token_type=Bearer&expires_in=3600\n    \nBelow is a JavaScript snippet that parses the response and returns the parameters to the server.\n\n```js\n// First, parse the query string\nvar params = {}, queryString = location.hash.substring(1),\n    regex = /([^&=]+)=([^&]*)/g, m;\nwhile (m = regex.exec(queryString)) {\n  params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);\n}\n\n// And send the token over to the server\nvar req = new XMLHttpRequest();\n// consider using POST so query isn't logged\nreq.open('GET', 'https://' + window.location.host + '/catchtoken?' + queryString, true);\n\nreq.onreadystatechange = function (e) {\n  if (req.readyState == 4) {\n     if(req.status == 200){\n       window.location = params['state']\n   }\n  else if(req.status == 400) {\n        alert('There was an error processing the token.')\n    }\n    else {\n      alert('something else other than 200 was returned')\n    }\n  }\n};\nreq.send(null);\n```\n\nThis code sends the parameters received on the fragment to the server using XMLHttpRequest and writes the access token to local storage in the browser. The latter is an optional step, and depends on whether or not the application requires other JavaScript code to make calls to the Imgur API. Also note that this code sends the parameters to the token endpoint, and they are sent over an HTTPS channel.\n\n#### Error Response\n\nThe Imgur API returns an error if the user did not grant your application the permissions it requested. The error is returned to the application in the query string parameter error if the web server flow is used. If the user agent flow was used, then the error is returned in the fragment. If the state parameter was included in the request, it is also present in the error response.\n\nAn example error response for the web server flow is shown below:\n\n    https://example.com/oauthcallback?error=access_denied\n    \n### Making your requests\nCongrats! You must have the user's access_token at this point and you're ready to start making API requests to their account. All that's required for this is to set the header in your requests:\n\n    Authorization: Bearer YOUR_ACCESS_TOKEN\n    \n### Refresh Tokens\n\nIf a user has authorized their account but you no longer have a valid access_token for them, then a new one can be generated by using the refresh_token.\n\nWhen your application receives a refresh token, it is important to store that refresh token for future use. If your application loses the refresh token, you will have to prompt the user for their login information again.\n\nTo obtain a new access token, your application performs a POST to `https://api.imgur.com/oauth2/token`. The request must include the following parameters to use a refresh token:\n\n| Field         | Description                                                                               |\n|---------------|-------------------------------------------------------------------------------------------|\n| refresh_token | The refresh token returned from the authorization code exchange                           |\n| client_id     | The client_id obtained during application registration                                    |\n| client_secret | The client secret obtained during application registration                                |\n| grant_type    | As defined in the OAuth2 specification, this field must contain a value of: `refresh_token` |\n\nAs long as the user has not revoked the access granted to your application, the response includes a new access token. A response from such a request is shown below:\n\n```json\n{\n    \"access_token\":\"5c3118ebb73fbb275945ab340be60b610a3216d6\",\n    \"refresh_token\":\"d36b474c95bb9ee54b992c7c34fffc2cc343d0a7\",\n    \"expires_in\":3600,\n    \"token_type\":\"Bearer\",\n    \"account_username\":\"saponifi3d\"\n}\n```\n\n### More OAuth 2 help and documentation\nFor more information about how to use OAuth 2, please visit the great documentation from Google. At the time of writing, our OAuth 2 server is completely compatible with theirs. The documentation may be found here: https://developers.google.com/accounts/docs/OAuth2\n\n\n\n# Performance Tips\nBelow are a few ways you can speed up your application's use of the Imgur API. \n\nIf you have any additional feature requests, please reach out on Twitter [@imgurAPI](https://twitter.com/imgurAPI)!\n\n### ETag Support\nThe Imgur API supports [ETags](http://en.wikipedia.org/wiki/HTTP_ETag), which allows the API to signal to developers whether or not data from previous queries have changed. \n\nUsage:\n1. When fetching from the Imgur API, the response header will include an ETag with a digest of the response data. Save this ETag value for future requests to the same route. \n\n    An example ETag response header: \n    \n    `ETag: \"a695f4e9672bf7fc7a779ac12ead684d72292506\"`\n1. On the next request to the same route, include a If-None-Match header in the request with the ETag from the first step. (Note: the quotations around the hash must be included) \n\n    An example ETag request header: \n    \n    `If-None-Match: \"a695f4e9672bf7fc7a779ac12ead684d72292506\"`\n1. If the data hasn't changed, the response status code will be *304* (Not Modified) and no data will be returned.\n1. If the response data has changed since the last request, the data is returned normally with a new ETag in the response header. Save this value for future requests.\n\n    *Note:* Although ETags help speed up your application, requests with the *If-None-Match* header will still count towards rate limits.",
			"order": [],
			"folders_order": [
				"445a2a36-d28b-f20e-6726-ea93763a6b2e",
				"8d68524f-ae43-8376-229d-111330be193f",
				"784415f7-0d09-da44-e489-fc991a97d3dd",
				"6fa917ac-8810-2bd5-590c-f96ca355fc27",
				"f5b96361-d3b5-82fd-ebb8-fca422bdca4f"
			],
			"folders": [
				{
					"id": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"name": "Account",
					"description": "",
					"order": [
						"87d2f677-f1e2-0d59-790f-6de0d4057e59",
						"26f8dd45-a745-9881-5e7f-4034e79db93a",
						"ee7dafad-7020-9c9f-f7be-3b11d9134ca7",
						"7854b508-4d44-785b-b9c7-0ba5d01339fc",
						"bec52fe9-3709-679d-11ac-8e695543402f",
						"e69240f1-0fd7-6d03-67fe-899ddeb943ad",
						"df5a3cc3-b0a2-a3ee-2243-cec2794116b1",
						"398faf3e-8f0c-5ec8-d3a8-0b0c78c716ed",
						"f761f3ee-6c38-1bcc-0c82-23e81408d0f3",
						"64a07401-a412-65b8-2279-457cfb6a616d",
						"7dc84d45-b616-c687-60c5-29ffd64abcd4",
						"3be46f14-0e09-e817-4d2b-69ddcecb7931",
						"56bad542-b66a-6767-b817-eec79b6594d5",
						"d95b8c4f-967a-2943-dc62-5d22df2b1a9b",
						"5b418a82-ab29-b156-7cbc-e76eede9151b",
						"dd88301c-10f2-bece-2697-8520b9ce5f0f",
						"295a6968-1872-61de-a27a-6014c380a282",
						"67a45751-571a-92bf-e3b6-cd4520012de8",
						"62c6466a-fe5c-9bd2-55ec-3c77c07ad4d0",
						"0507c390-058b-3586-6a36-e401207bdcb2",
						"a95d9a2b-3b0b-5552-437b-f79457f777d8",
						"c4fb7e3b-ea6f-6706-02c6-f1ad59a0614d",
						"d0ed0cc3-137f-986a-1360-bee54723d104",
						"b0a58172-5aed-1dd4-693b-f583e817e7f2",
						"db3c4e2a-319c-9ae4-bb9e-7fbb45563f1b",
						"dbdc4f5b-0994-62df-ebee-e2fc4b62c094",
						"7879c0fd-cbde-d0aa-6286-4c5d8f66c642",
						"e92bd083-44a6-75ba-459d-cd3744f81efe",
						"cc5ae98e-c3a6-ee65-9a7d-1b61e32e2fe2",
						"3f94fb90-2e68-97f6-0003-c78f5dc3714e",
						"2c9509a0-10fb-f5ba-ba70-409bfa962733",
						"58306cbf-eedd-eaa1-8a98-0ea3222e3960"
					],
					"folders_order": [],
					"owner": "3708974",
					"collection": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378"
				},
				{
					"id": "8d68524f-ae43-8376-229d-111330be193f",
					"name": "Comment",
					"description": "![image](https://i.imgur.com/pyWbOmo.png)",
					"order": [
						"71f5937a-a97c-60ac-a566-0024c18a7d92",
						"d010c3a0-b63e-c8b3-b21d-711a8ac76a6f",
						"a7f26a33-12ee-b805-d5b4-d1a582c6ca40",
						"0d53650a-e714-ca83-ecc0-72b725debb24",
						"49d11ff6-750f-1416-9cae-23c890510a45",
						"25d1b097-c236-d166-b1eb-7ede02b83f84",
						"fe0c8ddd-775f-790e-2c44-35c693b48e6e"
					],
					"folders_order": [],
					"owner": "3708974",
					"collection": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378"
				},
				{
					"id": "784415f7-0d09-da44-e489-fc991a97d3dd",
					"name": "Album",
					"description": "![image](https://i.imgur.com/U6GEQR5.png)\n\nThere are two methods of sending the image ids, one way is by sending an array of images, this is denoted by `[]`'s. Everywhere you see `ids[]`, it's also an option to send a string of ids that is comma delineated. For example: `ids=aaaaa,bbbbb,ccccc` is the same as sending `ids[]=aaaaa&ids[]=bbbbb&ids[]=ccccc`.",
					"order": [
						"a1e24f50-3f14-1281-f39c-c408e85da64e",
						"87de0fbe-aba7-4663-db35-bf332c1e1eb5",
						"5504681d-47fa-83ff-0577-0bb6241c4a29",
						"2ae0edeb-af02-6e53-4b11-2c938add7b0e",
						"80cf09db-7bea-1100-c493-75ca0152a0ab",
						"caff9942-ea83-6bfb-9153-12fffc82a1f9",
						"d05f33c9-4ce5-f3f4-c2d9-003d24043467",
						"06d2cd82-9eef-19a5-fd85-2cb97f7b2799",
						"09e31a03-323e-70a1-07ef-e67e68f8cb40",
						"5ad013b4-3a2d-036e-9236-a7aa100aea7d",
						"a82ad962-eb52-9ebf-6746-8a213c7a663c",
						"930bdbdd-91e3-2daa-44d1-90f55a2940ce",
						"115db14e-e6ba-53d9-7619-7669d143e2e8",
						"aea0bcca-a975-76d6-c6ce-816034f51d9a"
					],
					"folders_order": [],
					"owner": "3708974",
					"collection": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378"
				},
				{
					"id": "6fa917ac-8810-2bd5-590c-f96ca355fc27",
					"name": "Gallery",
					"description": "Due to caching limitations of Imgur, it's not possible to change the result size of the gallery resources.",
					"order": [
						"fea0ab15-534b-dcaf-38d7-cbe96ca65c38",
						"0fa84768-50e1-573e-40c3-e1a4338e8670",
						"a3d2221b-a29f-7232-b00e-9cb0cf7644ae",
						"415ca2ef-8c80-f889-3161-799dde0417ae",
						"562fad20-54c1-ef1f-2c1e-15eee8de624f",
						"5dbad427-325f-07f4-8a49-ac6607132109",
						"cd0c3945-bd1f-046f-b820-b0c6d29fdec4",
						"42101d93-46d2-f601-f131-24e21cba1c34",
						"31f83f64-75c7-2289-7482-c61b9c264f6b",
						"31b099c9-169f-8817-a161-6809606673dd",
						"bb8297e8-49e4-80a5-7c89-11cfa3280e24",
						"8f08f324-a88f-b413-ab21-8377bb6c3a79",
						"94ea45fd-4db0-1589-3254-72d96d6b000c",
						"a800702e-8521-6b8c-7b70-aa8d288c15d4",
						"7ae43a01-cf06-92e3-ae1e-8585daad974f",
						"805e9624-58ca-9a3a-b160-0c87f290d8e0",
						"e91b52f9-1158-5e36-071a-c560b7f6ef8f",
						"b269f0d9-21bf-1f47-ef33-45d456fcafca",
						"72033e05-1ae8-c68d-7d98-3a37adb45670",
						"20424cfb-5eca-4756-2670-f78f85f42e15",
						"2830ee56-08bd-5687-9278-8483a2cc2448"
					],
					"folders_order": [],
					"owner": "3708974",
					"collection": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378"
				},
				{
					"id": "f5b96361-d3b5-82fd-ebb8-fca422bdca4f",
					"name": "Image",
					"description": "",
					"order": [
						"438e83ab-6fd1-74e2-bd79-415fde9e4eb4",
						"62fe5382-c4db-542c-b097-fb48e1ce1622",
						"4725f5e7-21b0-41af-99af-02152ddcb2a9",
						"62ec7859-9216-fe70-19f4-7cecd913b494",
						"4b32bbde-a3af-3a3b-a019-0eccdf272d43",
						"ef2dfc90-28a7-0c9b-b2a2-f6b8f8a36cf3",
						"5de8d1b2-ae4f-9d4e-f312-e7b43406c605"
					],
					"folders_order": [],
					"owner": "3708974",
					"collection": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378"
				}
			],
			"owner": "3708974",
			"sharedWithTeam": false,
			"shared": false,
			"synced": true,
			"subscribed": false,
			"updatedAt": 1518214762608,
			"createdAt": 1518214762608,
			"hasRequests": true,
			"published": false,
			"requests": [
				{
					"id": "0507c390-058b-3586-6a36-e401207bdcb2",
					"name": "Comment",
					"description": "Return information about a specific comment. This endpoint works the same as the [Comment Endpoint](https://api.imgur.com/endpoint/comment/). You can use any of the additional actions that the comment endpoint allows on this end point.",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/comment/{{commentId}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "06d2cd82-9eef-19a5-fd85-2cb97f7b2799",
					"name": "Favorite Album",
					"description": "Favorite an album with a given ID. The user is required to be logged in to favorite the album.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/album/{{albumHash}}/favorite",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "784415f7-0d09-da44-e489-fc991a97d3dd",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "09e31a03-323e-70a1-07ef-e67e68f8cb40",
					"name": "Set Album Images (Un-Authed)",
					"description": "Sets the images for an album, removes all other images and only uses the images in this request.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)\n\n#### Parameters\n\n| Key   | Required | Description                                           |\n|-------|----------|-------------------------------------------------------|\n| deletehashes[] | required | The image deletehashes that you want to be added to the album. |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "Authorization: Client-ID {{clientId}}",
					"dataMode": "params",
					"data": [
						{
							"key": "deletehashes[]",
							"value": "{{imageDeleteHash}}",
							"type": "text"
						},
						{
							"key": "deletehashes[]",
							"value": "{{imageDeleteHash2}}",
							"type": "text"
						}
					],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/album/{{albumDeleteHash}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"owner": "3708974",
					"folder": "784415f7-0d09-da44-e489-fc991a97d3dd",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "0d53650a-e714-ca83-ecc0-72b725debb24",
					"name": "Replies",
					"description": "Get the comment with all of the replies for the comment.\n\n#### Response Model: [Comment](https://api.imgur.com/models/comment)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/comment/{{commentId}}/replies",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"owner": "3708974",
					"folder": "8d68524f-ae43-8376-229d-111330be193f",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "0fa84768-50e1-573e-40c3-e1a4338e8670",
					"name": "Subreddit Galleries",
					"description": "View gallery images for a subreddit\n\n| Key       | Required | Value                                                                                                        |\n|-----------|----------|--------------------------------------------------------------------------------------------------------------|\n| subreddit | required | pics - A valid subreddit name                                                                                |\n| sort      | optional | `time` &#124; `top` - defaults to time                                                                                |\n| page      | optional | integer - the data paging number                                                                             |\n| window    | optional | Change the date range of the request if the sort is \"top\". Options are  `day` &#124; `week` &#124; `month` &#124; `year` &#124; `all`. Defaults to week |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/gallery/r/{{subreddit}}/{{sort}}/{{window}}/{{page}}",
					"responses": [
						{
							"request": {
								"id": "d9571dd4-8976-45b3-869b-a28ccbb911c2",
								"description": "",
								"method": "GET",
								"headers": "Authorization: Client-ID {{clientId}}",
								"data": [],
								"rawModeData": "",
								"url": "https://api.imgur.com/3/gallery/r/{{subreddit}}/{{sort}}/{{window}}/{{page}}",
								"queryParams": [],
								"headerData": [
									{
										"key": "Authorization",
										"value": "Client-ID {{clientId}}",
										"type": "text",
										"enabled": true
									}
								]
							},
							"requestObject": "{\"id\":\"d9571dd4-8976-45b3-869b-a28ccbb911c2\",\"description\":\"\",\"method\":\"GET\",\"headers\":\"Authorization: Client-ID {{clientId}}\",\"data\":[],\"rawModeData\":\"\",\"url\":\"https://api.imgur.com/3/gallery/r/{{subreddit}}/{{sort}}/{{window}}/{{page}}\",\"queryParams\":[],\"headerData\":[{\"key\":\"Authorization\",\"value\":\"Client-ID {{clientId}}\",\"type\":\"text\",\"enabled\":true}]}",
							"id": "cf3f0294-883e-f355-91c7-841df151dae5",
							"name": "Sample Response",
							"status": "OK",
							"responseCode": {
								"code": 200,
								"name": "OK",
								"detail": ""
							},
							"language": "json",
							"previewType": "html",
							"time": "334",
							"headers": [
								{
									"key": "Accept-Ranges",
									"value": "bytes",
									"name": "Accept-Ranges",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "X-RateLimit-ClientLimit, X-RateLimit-ClientRemaining, X-RateLimit-UserLimit, X-RateLimit-UserRemaining, X-RateLimit-UserReset",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Age",
									"value": "0",
									"name": "Age",
									"description": ""
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, post-check=0, pre-check=0",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": ""
								},
								{
									"key": "Content-Length",
									"value": "3070",
									"name": "Content-Length",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Mon, 01 May 2017 22:57:37 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"b2159d6299d2c0bb52ef626c3f8d3d30828ebc23\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Fastly-Debug-Digest",
									"value": "aceda32f97e72aaad63276f9f2425a77a38eb4627569b691716ae9d6b7fef829",
									"name": "Fastly-Debug-Digest",
									"description": ""
								},
								{
									"key": "Server",
									"value": "cat factory 1.0",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": ""
								},
								{
									"key": "X-Cache",
									"value": "MISS, MISS",
									"name": "X-Cache",
									"description": ""
								},
								{
									"key": "X-Cache-Hits",
									"value": "0, 0",
									"name": "X-Cache-Hits",
									"description": ""
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": ""
								},
								{
									"key": "X-Redux",
									"value": "1",
									"name": "X-Redux",
									"description": ""
								},
								{
									"key": "X-Served-By",
									"value": "cache-iad2145-IAD, cache-sea1025-SEA",
									"name": "X-Served-By",
									"description": ""
								},
								{
									"key": "X-Timer",
									"value": "S1493679458.561282,VS0,VE119",
									"name": "X-Timer",
									"description": ""
								},
								{
									"key": "access-control-allow-headers",
									"value": "Authorization, Content-Type, Accept, X-Mashape-Authorization, IMGURPLATFORM, IMGURUIDJAFO, sessionCount, IMGURMWBETA, IMGURMWBETAOPTIN",
									"name": "access-control-allow-headers",
									"description": ""
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET, PUT, POST, DELETE, OPTIONS",
									"name": "access-control-allow-methods",
									"description": ""
								},
								{
									"key": "access-control-allow-origin",
									"value": "*",
									"name": "access-control-allow-origin",
									"description": ""
								}
							],
							"cookies": [
								{
									"expirationDate": "Mon Jan 18 2038 10:14:07 GMT+0000 (UTC)",
									"httpOnly": false,
									"domain": "imgur.com",
									"path": "/",
									"secure": false,
									"value": "0ac920e771a1be71e700fdefdb22232a",
									"name": "IMGURSESSION"
								},
								{
									"expirationDate": "Mon Jan 18 2038 05:14:07 GMT+0000 (UTC)",
									"httpOnly": true,
									"domain": "imgur.com",
									"path": "/",
									"secure": false,
									"value": "1",
									"name": "_nc"
								},
								{
									"expirationDate": "Sun Oct 29 2017 05:19:01 GMT+0000 (UTC)",
									"httpOnly": false,
									"domain": "api.imgur.com",
									"path": "/",
									"secure": false,
									"value": "496bdd0d6f02f181ae3fe2eaf473380f%7E2yespXiWCe7Ur6k3qf5jgS7iksNTeBC6",
									"name": "authautologin"
								}
							],
							"text": "{\"data\":[{\"id\":\"QJa0R6q\",\"title\":\"Shiprock - New Mexico [OC][1080x644]\",\"description\":null,\"datetime\":1493611803,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":1080,\"height\":644,\"size\":86174,\"views\":149622,\"bandwidth\":12893526228,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/QJa0R6q.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":148994,\"is_album\":false},{\"id\":\"RodyQ0k\",\"title\":\"Painters Bluff, overlooking a flood stage white river. North Central Ark. [10864x3728] [OC]\",\"description\":null,\"datetime\":1493641803,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":10864,\"height\":3728,\"size\":4884667,\"views\":20336,\"bandwidth\":99334588112,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/RodyQ0k.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":20291,\"is_album\":false},{\"id\":\"weKftEq\",\"title\":\"Cape Flattery, WA is quite flattering indeed. [oc] [2048x1367]\",\"description\":null,\"datetime\":1493611803,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":1367,\"height\":2048,\"size\":460562,\"views\":12854,\"bandwidth\":5920063948,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/weKftEq.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":12794,\"is_album\":false},{\"id\":\"EgF9TQh\",\"title\":\"Hyalite Canyon, Montana [OC] [4032x2268]\",\"description\":null,\"datetime\":1493610603,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":4032,\"height\":2268,\"size\":4082007,\"views\":10724,\"bandwidth\":43775443068,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/EgF9TQh.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":10689,\"is_album\":false},{\"id\":\"EEo6VgY\",\"title\":\"Russian Wilderness, Klamath National Forest [OC] [15045 x 5613]\",\"description\":null,\"datetime\":1493622003,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":15045,\"height\":5613,\"size\":2901059,\"views\":8271,\"bandwidth\":23994658989,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/EEo6VgY.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":8246,\"is_album\":false},{\"id\":\"lY1lDJO\",\"title\":\"Fiordland National Park, New Zealand [OC] [4032\\u00d72268]\",\"description\":null,\"datetime\":1493626279,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":3226,\"height\":1814,\"size\":875971,\"views\":8067,\"bandwidth\":7066458057,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/lY1lDJO.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":7936,\"is_album\":false},{\"id\":\"oG6w6F8\",\"title\":\"Posted this in r\\/pics first, but maybe you guys appreciate it too! [3821x2147]\",\"description\":null,\"datetime\":1493638203,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":3821,\"height\":2147,\"size\":2520309,\"views\":6374,\"bandwidth\":16064449566,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/oG6w6F8.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":6365,\"is_album\":false},{\"id\":\"O1IBlpc\",\"title\":\"Milky Way rise over the Atlantic in Avon NC [5679x3791]\",\"description\":null,\"datetime\":1493640003,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":5679,\"height\":3791,\"size\":2675943,\"views\":5105,\"bandwidth\":13660689015,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/O1IBlpc.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":4918,\"is_album\":false},{\"id\":\"pVQZLnk\",\"title\":\"Up high in the Willamette National Forest facing Cougar Creek, OR [OC] [2160x769]\",\"description\":null,\"datetime\":1493626203,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":2048,\"height\":729,\"size\":72458,\"views\":4522,\"bandwidth\":327655076,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/pVQZLnk.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":4494,\"is_album\":false},{\"id\":\"WNB9Cbm\",\"title\":\"Poisoned Glen, Donegal, Ireland [OC][1600x1200]\",\"description\":null,\"datetime\":1493629802,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":1600,\"height\":1200,\"size\":1030403,\"views\":4027,\"bandwidth\":4149432881,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/WNB9Cbm.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":3985,\"is_album\":false},{\"id\":\"DNZH3Z6\",\"title\":\"Sheyenne National Grasslands, North Dakota [OC] [6016x4000]\",\"description\":null,\"datetime\":1493654403,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":6016,\"height\":4000,\"size\":3124634,\"views\":3544,\"bandwidth\":11073702896,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/DNZH3Z6.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":3395,\"is_album\":false},{\"id\":\"Op1Mm35\",\"title\":\"A long day of driving and grey skies along Michigan's west coast and Upper Peninsula landed us in front a crimson sunset over Lake Superior, Silver City, MI [OC]\",\"description\":null,\"datetime\":1493640624,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":4032,\"height\":3024,\"size\":1850072,\"views\":3186,\"bandwidth\":5894329392,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/Op1Mm35.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":3178,\"is_album\":false},{\"id\":\"UvZxdQc\",\"title\":\"Blausee Kandersteg, Switzerland [3840x2160]\",\"description\":null,\"datetime\":1493629203,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":3840,\"height\":2160,\"size\":2729072,\"views\":3173,\"bandwidth\":8659345456,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/UvZxdQc.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":3132,\"is_album\":false},{\"id\":\"tQBGTi2\",\"title\":\"Bosco di Ficuzza @ Sicilia, Italia [OC] [5312x2988]\",\"description\":null,\"datetime\":1493646604,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":5312,\"height\":2988,\"size\":2101308,\"views\":2658,\"bandwidth\":5585276664,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/tQBGTi2.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":2610,\"is_album\":false},{\"id\":\"H1Gtlsd\",\"title\":\"Mount Fitz Roy, Argentina. [1920x1200]\",\"description\":null,\"datetime\":1493640003,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":1920,\"height\":1200,\"size\":574354,\"views\":2443,\"bandwidth\":1403146822,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/H1Gtlsd.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":2443,\"is_album\":false},{\"id\":\"mn0Mgjn\",\"title\":\"Who Knew Bangladesh Was Beautiful? [2500x1875][OC]\",\"description\":null,\"datetime\":1493608803,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":2500,\"height\":1874,\"size\":2152428,\"views\":2139,\"bandwidth\":4604043492,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/mn0Mgjn.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":2135,\"is_album\":false},{\"id\":\"fjRgUXU\",\"title\":\"Wyoming's Beautiful Red Hillsides Covered in Snow[1600x1064] [OC]\",\"description\":\"View from Wyoming 28 NNW towards Lander, WY and the Wind River Reservation\",\"datetime\":1493599803,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":1600,\"height\":1064,\"size\":413390,\"views\":1841,\"bandwidth\":761050990,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/fjRgUXU.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":1830,\"is_album\":false},{\"id\":\"AtGAnlL\",\"title\":\"Nauyaca waterfalls, Dominical, Puntarenas, Costa Rica [OC] [4032x3024]\",\"description\":null,\"datetime\":1493662202,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":1512,\"height\":2016,\"size\":807179,\"views\":2013,\"bandwidth\":1624851327,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/AtGAnlL.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":1801,\"is_album\":false},{\"id\":\"G0nc9Cw\",\"title\":\"Swiss forest [5312x2988]\",\"description\":null,\"datetime\":1493628603,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":2125,\"height\":1195,\"size\":822524,\"views\":1640,\"bandwidth\":1348939360,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/G0nc9Cw.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":1640,\"is_album\":false},{\"id\":\"rWSUNa4\",\"title\":\"Such a hard walk to get here at 4600m, but worth it! Lagoon 69, Peru [OC] [3264x1836]\",\"description\":\"4600m altitude, killer hike. #Earthporn\",\"datetime\":1493671803,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":3264,\"height\":1836,\"size\":1000847,\"views\":1864,\"bandwidth\":1865578808,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/rWSUNa4.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":1534,\"is_album\":false},{\"id\":\"nRb0mHU\",\"title\":\"Paro Valley, Bhutan [2500x650][OC]\",\"description\":null,\"datetime\":1493609402,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":2500,\"height\":650,\"size\":813010,\"views\":1506,\"bandwidth\":1224393060,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/nRb0mHU.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":1505,\"is_album\":false},{\"id\":\"KhEVbFu\",\"title\":\"Went to \\u00c5re, Sweden, for some After Ski and took this whilst drunk (4032x2046 )\",\"description\":null,\"datetime\":1493670002,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":4032,\"height\":2046,\"size\":647324,\"views\":1100,\"bandwidth\":712056400,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/KhEVbFu.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":873,\"is_album\":false},{\"id\":\"Yo82Voc\",\"title\":\"Zhangjiajie National Park, China [1920x1200]\",\"description\":null,\"datetime\":1493593203,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":1920,\"height\":1200,\"size\":995801,\"views\":406939,\"bandwidth\":405230263139,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/Yo82Voc.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":174,\"is_album\":false},{\"id\":\"XnIjxzp\",\"title\":\"Pic from this weekends storms in south eastern Illinois\",\"description\":null,\"datetime\":1493647826,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":3264,\"height\":1836,\"size\":844596,\"views\":13,\"bandwidth\":10979748,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/XnIjxzp.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":13,\"is_album\":false},{\"id\":\"uMA4I7J\",\"title\":\"Grand Canyon from Nankoweap Granary [OC] [12216 \\u00d7 3896]\",\"description\":null,\"datetime\":1493594403,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":9773,\"height\":3117,\"size\":4425163,\"views\":2013,\"bandwidth\":8907853119,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/uMA4I7J.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":0,\"is_album\":false},{\"id\":\"ZpmWhX1\",\"title\":\"Got seat-belted into a trusty helicopter as the pilot carefully flew me over the N\\u0101 Pali Coast of Kauai, Hawaii to take this shot [OC][2048x1365]\",\"description\":null,\"datetime\":1493676686,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":2048,\"height\":1366,\"size\":1992394,\"views\":1891,\"bandwidth\":3767617054,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/ZpmWhX1.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":0,\"is_album\":false},{\"id\":\"wI7hn2J\",\"title\":\"West Virginia may have it's issues, but it sure is beautiful. Cabins, WV [5344x3066]\",\"description\":null,\"datetime\":1493594403,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":2138,\"height\":1202,\"size\":756545,\"views\":1759,\"bandwidth\":1330762655,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/wI7hn2J.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":0,\"is_album\":false},{\"id\":\"lCutGyD\",\"title\":\"Crab Beach at the end of Cannibal Island Road, Humboldt County, CA [2000x1125] [OC]\",\"description\":null,\"datetime\":1493595603,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":2000,\"height\":1125,\"size\":474211,\"views\":3106,\"bandwidth\":1472899366,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/lCutGyD.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":0,\"is_album\":false}],\"success\":true,\"status\":200}",
							"rawDataType": "text",
							"owner": "3708974"
						}
					],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"owner": "3708974",
					"folder": "6fa917ac-8810-2bd5-590c-f96ca355fc27",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "115db14e-e6ba-53d9-7619-7669d143e2e8",
					"name": "Remove Images from an Album (Un-Authed)",
					"description": "Takes parameter, `ids[]`, as an array of ids and removes from the album.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)\n\n#### Parameters\n\n| Key   | Required | Description                                           |\n|-------|----------|-------------------------------------------------------|\n| ids[] | required | The image ids that you want to be removed from the album. |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "Authorization: Client-ID {{clientId}}",
					"dataMode": "params",
					"data": [
						{
							"key": "ids[]",
							"value": "{{imageHash}}",
							"type": "text"
						},
						{
							"key": "ids[]",
							"value": "{{imageHash2}}",
							"type": "text"
						}
					],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/album/{{albumDeleteHash}}/remove_images",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"owner": "3708974",
					"folder": "784415f7-0d09-da44-e489-fc991a97d3dd",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "20424cfb-5eca-4756-2670-f78f85f42e15",
					"name": "Album / Image Comment",
					"description": "Information about a specific comment. This action also allows any of the additional actions provided in the [Comment Endpoint](https://api.imgur.com/endpoints/comment).",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/gallery/{{galleryHash}}/comment/{{commentId}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// This endpoint is critical to the test flow, ",
									"// so this stops the request cycle if any of these tests error.",
									"postman.setNextRequest('end');",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"var commentId = res.data.id;",
									"",
									"tests['Status code is 200'] = (responseCode.code === 200);",
									"tests['Comment retrieval was successful'] = res.success === true;",
									"",
									"tests['Returns Correct Comment ID'] = res.data.id == postman.getEnvironmentVariable('commentId');",
									"tests['Returns Correct Image ID'] = res.data.image_id == postman.getEnvironmentVariable('galleryHash'); // Technically this can also be album id. We should probably specify in the response",
									"tests['Returns Correct Comment Data'] = res.data.comment == postman.getEnvironmentVariable('commentText');",
									"tests['Returns Correct Author Username'] = res.data.author == postman.getEnvironmentVariable('username');",
									"// tests['Returns A Valid Platform'] = [\"iphone\", \"android\", \"desktop\", \"mweb\"].indexOf(res.data.platform) > -1;",
									"",
									"postman.setNextRequest('Album / Image Comments'); // Gallery -> Album / Image Comment"
								]
							}
						}
					],
					"owner": "3708974",
					"folder": "6fa917ac-8810-2bd5-590c-f96ca355fc27",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"preRequestScript": null,
					"tests": "// This endpoint is critical to the test flow, \n// so this stops the request cycle if any of these tests error.\npostman.setNextRequest('end');\n\nvar res = JSON.parse(responseBody);\n\nvar commentId = res.data.id;\n\ntests['Status code is 200'] = (responseCode.code === 200);\ntests['Comment retrieval was successful'] = res.success === true;\n\ntests['Returns Correct Comment ID'] = res.data.id == postman.getEnvironmentVariable('commentId');\ntests['Returns Correct Image ID'] = res.data.image_id == postman.getEnvironmentVariable('galleryHash'); // Technically this can also be album id. We should probably specify in the response\ntests['Returns Correct Comment Data'] = res.data.comment == postman.getEnvironmentVariable('commentText');\ntests['Returns Correct Author Username'] = res.data.author == postman.getEnvironmentVariable('username');\n// tests['Returns A Valid Platform'] = [\"iphone\", \"android\", \"desktop\", \"mweb\"].indexOf(res.data.platform) > -1;\n\npostman.setNextRequest('Album / Image Comments'); // Gallery -> Album / Image Comment",
					"pathVariables": {}
				},
				{
					"id": "25d1b097-c236-d166-b1eb-7ede02b83f84",
					"name": "Vote",
					"description": "Vote on a comment. The `vote` parameter can only be set as `up`, `down`, or `veto`.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/comment/{{commentId}}/vote/{{vote}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "8d68524f-ae43-8376-229d-111330be193f",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "26f8dd45-a745-9881-5e7f-4034e79db93a",
					"name": "Account Base",
					"description": "Request standard user information. If you need the username for the account that is logged in, it is returned in the request for an [access token](/account/current_account). Note: This endpoint also supports the ability to lookup account base info by account ID. To do so, pass the query parameter `account_id`.\n\n#### Response Model: [Account](https://api.imgur.com/models/account)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}",
					"responses": [
						{
							"request": {
								"id": "cb0c221d-140b-4958-bde3-c3628a0d3191",
								"description": "",
								"method": "GET",
								"headers": "Authorization: Client-ID {{clientId}}",
								"data": [],
								"rawModeData": "",
								"url": "https://api.imgur.com/3/account/{{username}}",
								"queryParams": [],
								"headerData": [
									{
										"key": "Authorization",
										"value": "Client-ID {{clientId}}"
									}
								]
							},
							"requestObject": "{\"id\":\"cb0c221d-140b-4958-bde3-c3628a0d3191\",\"description\":\"\",\"method\":\"GET\",\"headers\":\"Authorization: Client-ID {{clientId}}\",\"data\":[],\"rawModeData\":\"\",\"url\":\"https://api.imgur.com/3/account/{{username}}\",\"queryParams\":[],\"headerData\":[{\"key\":\"Authorization\",\"value\":\"Client-ID {{clientId}}\"}]}",
							"id": "5aa31a3f-a7ed-5e7f-b4f7-fbe7c507e498",
							"name": "Sample Response",
							"status": "OK",
							"responseCode": {
								"code": 200,
								"name": "OK",
								"detail": ""
							},
							"language": "json",
							"previewType": "html",
							"time": "133",
							"headers": [
								{
									"key": "Accept-Ranges",
									"value": "bytes",
									"name": "Accept-Ranges",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "X-RateLimit-ClientLimit, X-RateLimit-ClientRemaining, X-RateLimit-UserLimit, X-RateLimit-UserRemaining, X-RateLimit-UserReset",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Age",
									"value": "0",
									"name": "Age",
									"description": ""
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, post-check=0, pre-check=0",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Wed, 31 May 2017 14:56:02 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"42f114046cd3f43be6995f2566c8ebb31f9dd21a\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "cat factory 1.0",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": ""
								},
								{
									"key": "X-Backstage",
									"value": "110",
									"name": "X-Backstage",
									"description": ""
								},
								{
									"key": "X-Cache",
									"value": "MISS",
									"name": "X-Cache",
									"description": ""
								},
								{
									"key": "X-Cache-Hits",
									"value": "0",
									"name": "X-Cache-Hits",
									"description": ""
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": ""
								},
								{
									"key": "X-RateLimit-ClientLimit",
									"value": "12500",
									"name": "X-RateLimit-ClientLimit",
									"description": ""
								},
								{
									"key": "X-RateLimit-ClientRemaining",
									"value": "12500",
									"name": "X-RateLimit-ClientRemaining",
									"description": ""
								},
								{
									"key": "X-RateLimit-UserLimit",
									"value": "500",
									"name": "X-RateLimit-UserLimit",
									"description": ""
								},
								{
									"key": "X-RateLimit-UserRemaining",
									"value": "499",
									"name": "X-RateLimit-UserRemaining",
									"description": ""
								},
								{
									"key": "X-RateLimit-UserReset",
									"value": "1496246162",
									"name": "X-RateLimit-UserReset",
									"description": ""
								},
								{
									"key": "X-Redux",
									"value": "1",
									"name": "X-Redux",
									"description": ""
								},
								{
									"key": "X-Served-By",
									"value": "cache-iad2621-IAD",
									"name": "X-Served-By",
									"description": ""
								},
								{
									"key": "X-Timer",
									"value": "S1496242562.109182,VS0,VE30",
									"name": "X-Timer",
									"description": ""
								},
								{
									"key": "access-control-allow-headers",
									"value": "Authorization, Content-Type, Accept, X-Mashape-Authorization, IMGURPLATFORM, IMGURUIDJAFO, sessionCount, IMGURMWBETA, IMGURMWBETAOPTIN",
									"name": "access-control-allow-headers",
									"description": ""
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET, PUT, POST, DELETE, OPTIONS",
									"name": "access-control-allow-methods",
									"description": ""
								},
								{
									"key": "access-control-allow-origin",
									"value": "*",
									"name": "access-control-allow-origin",
									"description": ""
								}
							],
							"cookies": [
								{
									"expirationDate": "Tue Jan 19 2038 03:14:07 GMT+0000 (UTC)",
									"httpOnly": false,
									"domain": "imgur.com",
									"path": "/",
									"secure": false,
									"value": "a8af9726c6c741c5694e2164c15d1bdc",
									"name": "IMGURSESSION"
								},
								{
									"expirationDate": "Sat Jan 16 2038 11:14:07 GMT+0000 (UTC)",
									"httpOnly": true,
									"domain": "imgur.com",
									"path": "/",
									"secure": false,
									"value": "1",
									"name": "_nc"
								},
								{
									"expirationDate": "Mon Jan 18 2038 19:14:07 GMT+0000 (UTC)",
									"httpOnly": false,
									"domain": "imgur.com",
									"path": "/",
									"secure": false,
									"value": "110",
									"name": "backstage"
								},
								{
									"expirationDate": "Sat Oct 28 2017 07:33:23 GMT+0000 (UTC)",
									"httpOnly": false,
									"domain": "api.imgur.com",
									"path": "/",
									"secure": false,
									"value": "898d560972119ade98fdae2cc4313b0b%7EqnBR5g7CRpOGxrTXiaBYk1zqRz2O9165",
									"name": "authautologin"
								},
								{
									"expirationDate": "Sat Jan 16 2038 13:14:07 GMT+0000 (UTC)",
									"httpOnly": false,
									"domain": "api.imgur.com",
									"path": "/",
									"secure": false,
									"value": "upload.i-086fcbff9142dde07.production",
									"name": "UPSERVERID"
								}
							],
							"text": "{\"data\":{\"id\":48437714,\"url\":\"ghostinspector\",\"bio\":null,\"avatar\":null,\"reputation\":0,\"reputation_name\":\"Neutral\",\"created\":1481839668,\"pro_expiration\":false,\"user_follow\":{\"status\":false}},\"success\":true,\"status\":200}",
							"rawDataType": "text",
							"owner": "3708974"
						}
					],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// This endpoint is critical to the test flow, ",
									"// so this stops the request cycle if any of these tests error.",
									"postman.setNextRequest('end');",
									"",
									"tests['Status code is 200'] = (responseCode.code === 200);",
									"",
									"postman.setNextRequest(\"Image Upload\"); // Image -> Image Upload"
								]
							}
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"preRequestScript": null,
					"tests": "// This endpoint is critical to the test flow, \n// so this stops the request cycle if any of these tests error.\npostman.setNextRequest('end');\n\ntests['Status code is 200'] = (responseCode.code === 200);\n\npostman.setNextRequest(\"Image Upload\"); // Image -> Image Upload",
					"pathVariables": {}
				},
				{
					"id": "2830ee56-08bd-5687-9278-8483a2cc2448",
					"name": "Album / Image Comment Creation",
					"description": "#### Response Model: [Basic](https://api.imgur.com/models/basic)\n\n#### Parameters\n\n| Key     | Required | Value                    |\n|---------|----------|--------------------------|\n| comment | required | The text of the comment. |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "Authorization: Bearer {{accessToken}}",
					"dataMode": "params",
					"data": [
						{
							"key": "comment",
							"value": "{{commentText}}",
							"type": "text"
						}
					],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/gallery/{{galleryHash}}/comment",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// This endpoint is critical to the test flow, ",
									"// so this stops the request cycle if any of these tests error.",
									"postman.setNextRequest('end');",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"var commentId = res.data.id;",
									"",
									"tests['Status code is 200'] = (responseCode.code === 200);",
									"tests['Comment creation was successful'] = res.success === true;",
									"",
									"postman.setEnvironmentVariable('commentId', commentId);",
									"",
									"postman.setNextRequest('Album / Image Comment'); // Gallery -> Album / Image Comment"
								]
							}
						}
					],
					"owner": "3708974",
					"folder": "6fa917ac-8810-2bd5-590c-f96ca355fc27",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"preRequestScript": null,
					"tests": "// This endpoint is critical to the test flow, \n// so this stops the request cycle if any of these tests error.\npostman.setNextRequest('end');\n\nvar res = JSON.parse(responseBody);\n\nvar commentId = res.data.id;\n\ntests['Status code is 200'] = (responseCode.code === 200);\ntests['Comment creation was successful'] = res.success === true;\n\npostman.setEnvironmentVariable('commentId', commentId);\n\npostman.setNextRequest('Album / Image Comment'); // Gallery -> Album / Image Comment",
					"pathVariables": {}
				},
				{
					"id": "295a6968-1872-61de-a27a-6014c380a282",
					"name": "Album Count (Un-Authed / Authed)",
					"description": "Return the total number of albums associated with the account.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}\n// Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/albums/count",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						},
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}",
							"enabled": false
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "2ae0edeb-af02-6e53-4b11-2c938add7b0e",
					"name": "Album Creation (Un-Authed / Authed)",
					"description": "Create a new album. Optional parameter of `ids[]` is an array of image ids to add to the album. If uploading anonymous images to an anonymous album please use the optional parameter of `deletehashes[]` rather than `ids[]`. Note: including the optional `deletehashes[]` parameter will also work for authenticated user albums. There is no need to duplicate image ids with their corresponding deletehash.\n\nThis method is available without authenticating an account, and may be used merely by sending \"Authorization: Client-ID {client_id}\" in the request headers. Doing so will create an anonymous album which is not tied to an account.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)\n\n#### Parameters\n\n| Key            | Required | Description                                                                                                                          |\n|----------------|----------|--------------------------------------------------------------------------------------------------------------------------------------|\n| ids[]          | optional | The image ids that you want to be included in the album.                                                                             |\n| deletehashes[] | optional | The deletehashes of the images that you want to be included in the album.                                                            |\n| title          | optional | The title of the album                                                                                                               |\n| description    | optional | The description of the album                                                                                                         |\n| privacy        | optional | Sets the privacy level of the album. Values are : `public` &#124; `hidden` &#124; secret. Defaults to user's privacy settings for logged in users. |\n| layout         | optional | (_deprecated_) Sets the layout to display the album. Values are : `blog` &#124; `grid` &#124; `horizontal` &#124; `vertical`                                               |\n| cover          | optional | The ID of an image that you want to be the cover of the album                                                                        |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "// Authorization: Client-ID {{clientId}}\nAuthorization: Bearer {{accessToken}}",
					"dataMode": "params",
					"data": [
						{
							"key": "ids[]",
							"value": "{{imageHash}}",
							"type": "text",
							"description": "The image ids that you want to be included in the album."
						},
						{
							"key": "ids[]",
							"value": "{{imageHash2}}",
							"type": "text",
							"description": "any additional image ids...",
							"enabled": false
						},
						{
							"key": "deletehashes[]",
							"value": "{{deleteHash}}",
							"type": "text",
							"description": "The deletehashes of the images that you want to be included in the album.",
							"enabled": false
						},
						{
							"key": "deletehashes[]",
							"value": "{{deleteHash2}}",
							"type": "text",
							"description": "any additional deletehashes...",
							"enabled": false
						},
						{
							"key": "title",
							"value": "My dank meme album",
							"type": "text",
							"description": "The title of the album"
						},
						{
							"key": "description",
							"value": "This albums contains a lot of dank memes. Be prepared.",
							"type": "text",
							"description": "The description of the album"
						},
						{
							"key": "privacy",
							"value": "public",
							"type": "text",
							"description": "Sets the privacy level of the album. Values are : public | hidden | secret. Defaults to user's privacy settings for logged in users.",
							"enabled": false
						},
						{
							"key": "cover",
							"value": "{{imageHash}}",
							"type": "text",
							"description": "The ID of an image that you want to be the cover of the album"
						}
					],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/album",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}",
							"description": "Use this header if performing this action anonymously.",
							"enabled": false
						},
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}",
							"description": "Use this header if performing this action as a logged-in user."
						}
					],
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// This endpoint is critical to the test flow, ",
									"// so this stops the request cycle if any of these tests error.",
									"postman.setNextRequest('end');",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"var albumHash = res.data.id;",
									"var albumDeleteHash = res.data.deletehash;",
									"",
									"tests['Returns 7 char alphanumeric album id'] = /^[a-z0-9]{5}$/i.test(albumHash);",
									"tests['Returns 15 char alhpanumeric album deletehash'] = /^[a-z0-9]{15}$/i.test(albumDeleteHash);",
									"",
									"postman.setEnvironmentVariable('albumHash', albumHash);",
									"postman.setEnvironmentVariable('galleryHash', albumHash);",
									"postman.setEnvironmentVariable('albumDeleteHash', albumDeleteHash);",
									"",
									"tests['Status code is 200'] = (responseCode.code === 200);",
									"",
									"postman.setNextRequest('Share with Community (Album)'); // Gallery -> Share with Community (Album)"
								]
							}
						}
					],
					"owner": "3708974",
					"folder": "784415f7-0d09-da44-e489-fc991a97d3dd",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"preRequestScript": null,
					"tests": "// This endpoint is critical to the test flow, \n// so this stops the request cycle if any of these tests error.\npostman.setNextRequest('end');\n\nvar res = JSON.parse(responseBody);\n\nvar albumHash = res.data.id;\nvar albumDeleteHash = res.data.deletehash;\n\ntests['Returns 7 char alphanumeric album id'] = /^[a-z0-9]{5}$/i.test(albumHash);\ntests['Returns 15 char alhpanumeric album deletehash'] = /^[a-z0-9]{15}$/i.test(albumDeleteHash);\n\npostman.setEnvironmentVariable('albumHash', albumHash);\npostman.setEnvironmentVariable('galleryHash', albumHash);\npostman.setEnvironmentVariable('albumDeleteHash', albumDeleteHash);\n\ntests['Status code is 200'] = (responseCode.code === 200);\n\npostman.setNextRequest('Share with Community (Album)'); // Gallery -> Share with Community (Album)",
					"pathVariables": {}
				},
				{
					"id": "2c9509a0-10fb-f5ba-ba70-409bfa962733",
					"name": "Follow User",
					"description": "Follows the {{follow_user_id}} specified for the currently logged in user.",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/me/follow/tag/{{tagName}}",
					"responses": [
						{
							"request": {
								"id": "d6500a59-ac58-4534-8891-f5146568177b",
								"description": "",
								"method": "POST",
								"headers": "Authorization: Bearer {{bearerToken}}",
								"data": [],
								"rawModeData": "",
								"url": "https://api.imgur.com/3/account/me/follow/tag/funny",
								"queryParams": [],
								"headerData": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}"
									}
								]
							},
							"requestObject": "{\"id\":\"d6500a59-ac58-4534-8891-f5146568177b\",\"description\":\"\",\"method\":\"POST\",\"headers\":\"Authorization: Bearer {{bearerToken}}\",\"data\":[],\"rawModeData\":\"\",\"url\":\"https://api.imgur.com/3/account/me/follow/tag/funny\",\"queryParams\":[],\"headerData\":[{\"key\":\"Authorization\",\"value\":\"Bearer {{bearerToken}}\"}]}",
							"id": "90454d6a-9e1d-eec2-f3d8-729426851ca8",
							"name": "Follow Tag: Success",
							"status": "OK",
							"responseCode": {
								"code": 200,
								"name": "OK",
								"detail": ""
							},
							"language": "json",
							"previewType": "html",
							"time": "170",
							"headers": [
								{
									"key": "Accept-Ranges",
									"value": "bytes",
									"name": "Accept-Ranges",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "X-RateLimit-ClientLimit, X-RateLimit-ClientRemaining, X-RateLimit-UserLimit, X-RateLimit-UserRemaining, X-RateLimit-UserReset",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, post-check=0, pre-check=0",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Fri, 02 Jun 2017 23:30:47 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"4a931e85c4c3e49f1fb921656d64b65510e32928\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "cat factory 1.0",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": ""
								},
								{
									"key": "X-Cache",
									"value": "MISS",
									"name": "X-Cache",
									"description": ""
								},
								{
									"key": "X-Cache-Hits",
									"value": "0",
									"name": "X-Cache-Hits",
									"description": ""
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": ""
								},
								{
									"key": "X-Post-Rate-Limit-Limit",
									"value": "1250",
									"name": "X-Post-Rate-Limit-Limit",
									"description": ""
								},
								{
									"key": "X-Post-Rate-Limit-Remaining",
									"value": "1216",
									"name": "X-Post-Rate-Limit-Remaining",
									"description": ""
								},
								{
									"key": "X-Post-Rate-Limit-Reset",
									"value": "1327",
									"name": "X-Post-Rate-Limit-Reset",
									"description": ""
								},
								{
									"key": "X-RateLimit-ClientLimit",
									"value": "12500",
									"name": "X-RateLimit-ClientLimit",
									"description": ""
								},
								{
									"key": "X-RateLimit-ClientRemaining",
									"value": "12500",
									"name": "X-RateLimit-ClientRemaining",
									"description": ""
								},
								{
									"key": "X-RateLimit-UserLimit",
									"value": "2000",
									"name": "X-RateLimit-UserLimit",
									"description": ""
								},
								{
									"key": "X-RateLimit-UserRemaining",
									"value": "1999",
									"name": "X-RateLimit-UserRemaining",
									"description": ""
								},
								{
									"key": "X-RateLimit-UserReset",
									"value": "1496449847",
									"name": "X-RateLimit-UserReset",
									"description": ""
								},
								{
									"key": "X-Redux",
									"value": "1",
									"name": "X-Redux",
									"description": ""
								},
								{
									"key": "X-Served-By",
									"value": "cache-sea1029-SEA",
									"name": "X-Served-By",
									"description": ""
								},
								{
									"key": "X-Timer",
									"value": "S1496446248.628701,VS0,VE146",
									"name": "X-Timer",
									"description": ""
								},
								{
									"key": "access-control-allow-headers",
									"value": "Authorization, Content-Type, Accept, X-Mashape-Authorization, IMGURPLATFORM, IMGURUIDJAFO, sessionCount, IMGURMWBETA, IMGURMWBETAOPTIN",
									"name": "access-control-allow-headers",
									"description": ""
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET, PUT, POST, DELETE, OPTIONS",
									"name": "access-control-allow-methods",
									"description": ""
								},
								{
									"key": "access-control-allow-origin",
									"value": "*",
									"name": "access-control-allow-origin",
									"description": ""
								}
							],
							"cookies": [],
							"text": "{\"data\":true,\"success\":true,\"status\":200}",
							"rawDataType": "text",
							"owner": "3708974"
						},
						{
							"request": {
								"id": "758e7117-be59-4404-8ce6-505dd7a0b60d",
								"description": "",
								"method": "POST",
								"headers": "Authorization: Bearer {{bearerToken}}",
								"data": [],
								"rawModeData": "",
								"url": "https://api.imgur.com/3/account/me/follow/tag/{{tagName}}",
								"queryParams": [],
								"headerData": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}"
									}
								]
							},
							"requestObject": "{\"id\":\"758e7117-be59-4404-8ce6-505dd7a0b60d\",\"description\":\"\",\"method\":\"POST\",\"headers\":\"Authorization: Bearer {{bearerToken}}\",\"data\":[],\"rawModeData\":\"\",\"url\":\"https://api.imgur.com/3/account/me/follow/tag/{{tagName}}\",\"queryParams\":[],\"headerData\":[{\"key\":\"Authorization\",\"value\":\"Bearer {{bearerToken}}\"}]}",
							"id": "3126e1b2-a432-f155-e6fa-11fbb426c340",
							"name": "Follow Tag: Tag Does Not Exist",
							"status": "Not Found",
							"responseCode": {
								"code": 404,
								"name": "Not Found",
								"detail": ""
							},
							"language": "json",
							"previewType": "html",
							"time": "130",
							"headers": [
								{
									"key": "Accept-Ranges",
									"value": "bytes",
									"name": "Accept-Ranges",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "X-RateLimit-ClientLimit, X-RateLimit-ClientRemaining, X-RateLimit-UserLimit, X-RateLimit-UserRemaining, X-RateLimit-UserReset",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, post-check=0, pre-check=0",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Fri, 02 Jun 2017 23:38:20 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"01b15643ab5929bc68c8536a37aad4b33335b3b7\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "cat factory 1.0",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": ""
								},
								{
									"key": "X-Cache",
									"value": "MISS",
									"name": "X-Cache",
									"description": ""
								},
								{
									"key": "X-Cache-Hits",
									"value": "0",
									"name": "X-Cache-Hits",
									"description": ""
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": ""
								},
								{
									"key": "X-Post-Rate-Limit-Limit",
									"value": "1250",
									"name": "X-Post-Rate-Limit-Limit",
									"description": ""
								},
								{
									"key": "X-Post-Rate-Limit-Remaining",
									"value": "1208",
									"name": "X-Post-Rate-Limit-Remaining",
									"description": ""
								},
								{
									"key": "X-Post-Rate-Limit-Reset",
									"value": "875",
									"name": "X-Post-Rate-Limit-Reset",
									"description": ""
								},
								{
									"key": "X-Redux",
									"value": "1",
									"name": "X-Redux",
									"description": ""
								},
								{
									"key": "X-Served-By",
									"value": "cache-sea1029-SEA",
									"name": "X-Served-By",
									"description": ""
								},
								{
									"key": "X-Timer",
									"value": "S1496446700.380993,VS0,VE92",
									"name": "X-Timer",
									"description": ""
								},
								{
									"key": "access-control-allow-headers",
									"value": "Authorization, Content-Type, Accept, X-Mashape-Authorization, IMGURPLATFORM, IMGURUIDJAFO, sessionCount, IMGURMWBETA, IMGURMWBETAOPTIN",
									"name": "access-control-allow-headers",
									"description": ""
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET, PUT, POST, DELETE, OPTIONS",
									"name": "access-control-allow-methods",
									"description": ""
								},
								{
									"key": "access-control-allow-origin",
									"value": "*",
									"name": "access-control-allow-origin",
									"description": ""
								}
							],
							"cookies": [],
							"text": "{\"data\":{\"error\":\"Tag does not exist\",\"request\":\"\\/3\\/account\\/me\\/follow\\/tag\\/{{tagName}}\",\"method\":\"POST\"},\"success\":false,\"status\":404}",
							"rawDataType": "text",
							"owner": "3708974"
						}
					],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "31b099c9-169f-8817-a161-6809606673dd",
					"name": "Random Gallery Images",
					"description": "*DEPRECATED* Returns a random set of gallery images.",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "",
					"data": [],
					"rawModeData": "",
					"url": "",
					"responses": [],
					"queryParams": [],
					"headerData": [],
					"owner": "3708974",
					"folder": "6fa917ac-8810-2bd5-590c-f96ca355fc27",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "31f83f64-75c7-2289-7482-c61b9c264f6b",
					"name": "Gallery Search",
					"description": "Search the gallery with a given query string.\n\n\n#### Parameters\n| Key    | Required | Value                                                                                                        |\n|--------|----------|--------------------------------------------------------------------------------------------------------------|\n| sort   | optional | time &#124; viral &#124; top - defaults to time                                                                        |\n| window | optional | Change the date range of the request if the sort is 'top', day &#124; week &#124; month &#124; year &#124; all, defaults to all. |\n| page   | optional | integer - the data paging number                                                                             |\n\n\n#### Simple Search Query Parameters\n\n| Key | Value                                                                                                                                                                                                                                                                                    |\n|-----|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| q   | Query string (note: if advanced search parameters are set, this query string is ignored). This parameter also supports boolean operators (AND, OR, NOT) and indices (tag: user: title: ext: subreddit: album: meme:). An example compound query would be 'title: cats AND dogs ext: gif' |\n\n\n\n#### Advanced Search Query Parameters\n\n| Key       | Value                                                                                                                                                                                                |\n|-----------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| q_all     | Search for all of these words (and)                                                                                                                                                                  |\n| q_any     | Search for any of these words (or)                                                                                                                                                                   |\n| q_exactly | Search for exactly this word or phrase                                                                                                                                                               |\n| q_not     | Exclude results matching this                                                                                                                                                                        |\n| q_type    | Show results for any file type, jpg  &#124; png  &#124; gif  &#124; anigif (animated gif)  &#124; album                                                                                                                      |\n| q_size_px | Size ranges, small (500 pixels square or less)  &#124; med (500 to 2,000 pixels square)  &#124; big (2,000 to 5,000 pixels square)  &#124; lrg (5,000 to 10,000 pixels square)  &#124; huge (10,000 square pixels and above) |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/gallery/search/{{sort}}/{{window}}/{{page}}?q=cats",
					"responses": [],
					"queryParams": [
						{
							"key": "q",
							"value": "cats"
						}
					],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"owner": "3708974",
					"folder": "6fa917ac-8810-2bd5-590c-f96ca355fc27",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "398faf3e-8f0c-5ec8-d3a8-0b0c78c716ed",
					"name": "Account Avatar (Authed)",
					"description": "Get the current account's avatar URL and avatar name.",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/avatar",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "3be46f14-0e09-e817-4d2b-69ddcecb7931",
					"name": "Verify User's E-mail",
					"description": "Checks to see if user has verified their email address.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/verifyemail",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "3f94fb90-2e68-97f6-0003-c78f5dc3714e",
					"name": "Follow Tag",
					"description": "Follows the {{tagName}} specified for the currently logged in user.",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/me/follow/tag/{{tagName}}",
					"responses": [
						{
							"request": {
								"id": "d574bbe2-96ff-433a-8b16-92978cdef67f",
								"description": "",
								"method": "POST",
								"headers": "Authorization: Bearer {{bearerToken}}",
								"data": [],
								"rawModeData": "",
								"url": "https://api.imgur.com/3/account/me/follow/tag/funny",
								"queryParams": [],
								"headerData": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}"
									}
								]
							},
							"requestObject": "{\"id\":\"d574bbe2-96ff-433a-8b16-92978cdef67f\",\"description\":\"\",\"method\":\"POST\",\"headers\":\"Authorization: Bearer {{bearerToken}}\",\"data\":[],\"rawModeData\":\"\",\"url\":\"https://api.imgur.com/3/account/me/follow/tag/funny\",\"queryParams\":[],\"headerData\":[{\"key\":\"Authorization\",\"value\":\"Bearer {{bearerToken}}\"}]}",
							"id": "34cb1d2c-a655-745b-a2ed-b168e5115520",
							"name": "Follow Tag: Success",
							"status": "OK",
							"responseCode": {
								"code": 200,
								"name": "OK",
								"detail": ""
							},
							"language": "json",
							"previewType": "html",
							"time": "170",
							"headers": [
								{
									"key": "Accept-Ranges",
									"value": "bytes",
									"name": "Accept-Ranges",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "X-RateLimit-ClientLimit, X-RateLimit-ClientRemaining, X-RateLimit-UserLimit, X-RateLimit-UserRemaining, X-RateLimit-UserReset",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, post-check=0, pre-check=0",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Fri, 02 Jun 2017 23:30:47 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"4a931e85c4c3e49f1fb921656d64b65510e32928\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "cat factory 1.0",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": ""
								},
								{
									"key": "X-Cache",
									"value": "MISS",
									"name": "X-Cache",
									"description": ""
								},
								{
									"key": "X-Cache-Hits",
									"value": "0",
									"name": "X-Cache-Hits",
									"description": ""
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": ""
								},
								{
									"key": "X-Post-Rate-Limit-Limit",
									"value": "1250",
									"name": "X-Post-Rate-Limit-Limit",
									"description": ""
								},
								{
									"key": "X-Post-Rate-Limit-Remaining",
									"value": "1216",
									"name": "X-Post-Rate-Limit-Remaining",
									"description": ""
								},
								{
									"key": "X-Post-Rate-Limit-Reset",
									"value": "1327",
									"name": "X-Post-Rate-Limit-Reset",
									"description": ""
								},
								{
									"key": "X-RateLimit-ClientLimit",
									"value": "12500",
									"name": "X-RateLimit-ClientLimit",
									"description": ""
								},
								{
									"key": "X-RateLimit-ClientRemaining",
									"value": "12500",
									"name": "X-RateLimit-ClientRemaining",
									"description": ""
								},
								{
									"key": "X-RateLimit-UserLimit",
									"value": "2000",
									"name": "X-RateLimit-UserLimit",
									"description": ""
								},
								{
									"key": "X-RateLimit-UserRemaining",
									"value": "1999",
									"name": "X-RateLimit-UserRemaining",
									"description": ""
								},
								{
									"key": "X-RateLimit-UserReset",
									"value": "1496449847",
									"name": "X-RateLimit-UserReset",
									"description": ""
								},
								{
									"key": "X-Redux",
									"value": "1",
									"name": "X-Redux",
									"description": ""
								},
								{
									"key": "X-Served-By",
									"value": "cache-sea1029-SEA",
									"name": "X-Served-By",
									"description": ""
								},
								{
									"key": "X-Timer",
									"value": "S1496446248.628701,VS0,VE146",
									"name": "X-Timer",
									"description": ""
								},
								{
									"key": "access-control-allow-headers",
									"value": "Authorization, Content-Type, Accept, X-Mashape-Authorization, IMGURPLATFORM, IMGURUIDJAFO, sessionCount, IMGURMWBETA, IMGURMWBETAOPTIN",
									"name": "access-control-allow-headers",
									"description": ""
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET, PUT, POST, DELETE, OPTIONS",
									"name": "access-control-allow-methods",
									"description": ""
								},
								{
									"key": "access-control-allow-origin",
									"value": "*",
									"name": "access-control-allow-origin",
									"description": ""
								}
							],
							"cookies": [],
							"text": "{\"data\":true,\"success\":true,\"status\":200}",
							"rawDataType": "text",
							"owner": "3708974"
						},
						{
							"request": {
								"id": "9111fe15-8cfd-41dc-9d1e-594c3f6b34b0",
								"description": "",
								"method": "POST",
								"headers": "Authorization: Bearer {{bearerToken}}",
								"data": [],
								"rawModeData": "",
								"url": "https://api.imgur.com/3/account/me/follow/tag/{{tagName}}",
								"queryParams": [],
								"headerData": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}"
									}
								]
							},
							"requestObject": "{\"id\":\"9111fe15-8cfd-41dc-9d1e-594c3f6b34b0\",\"description\":\"\",\"method\":\"POST\",\"headers\":\"Authorization: Bearer {{bearerToken}}\",\"data\":[],\"rawModeData\":\"\",\"url\":\"https://api.imgur.com/3/account/me/follow/tag/{{tagName}}\",\"queryParams\":[],\"headerData\":[{\"key\":\"Authorization\",\"value\":\"Bearer {{bearerToken}}\"}]}",
							"id": "d61b3fc1-68da-babe-38ec-266329b160bd",
							"name": "Follow Tag: Tag Does Not Exist",
							"status": "Not Found",
							"responseCode": {
								"code": 404,
								"name": "Not Found",
								"detail": ""
							},
							"language": "json",
							"previewType": "html",
							"time": "130",
							"headers": [
								{
									"key": "Accept-Ranges",
									"value": "bytes",
									"name": "Accept-Ranges",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "X-RateLimit-ClientLimit, X-RateLimit-ClientRemaining, X-RateLimit-UserLimit, X-RateLimit-UserRemaining, X-RateLimit-UserReset",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, post-check=0, pre-check=0",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Fri, 02 Jun 2017 23:38:20 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"01b15643ab5929bc68c8536a37aad4b33335b3b7\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "cat factory 1.0",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": ""
								},
								{
									"key": "X-Cache",
									"value": "MISS",
									"name": "X-Cache",
									"description": ""
								},
								{
									"key": "X-Cache-Hits",
									"value": "0",
									"name": "X-Cache-Hits",
									"description": ""
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": ""
								},
								{
									"key": "X-Post-Rate-Limit-Limit",
									"value": "1250",
									"name": "X-Post-Rate-Limit-Limit",
									"description": ""
								},
								{
									"key": "X-Post-Rate-Limit-Remaining",
									"value": "1208",
									"name": "X-Post-Rate-Limit-Remaining",
									"description": ""
								},
								{
									"key": "X-Post-Rate-Limit-Reset",
									"value": "875",
									"name": "X-Post-Rate-Limit-Reset",
									"description": ""
								},
								{
									"key": "X-Redux",
									"value": "1",
									"name": "X-Redux",
									"description": ""
								},
								{
									"key": "X-Served-By",
									"value": "cache-sea1029-SEA",
									"name": "X-Served-By",
									"description": ""
								},
								{
									"key": "X-Timer",
									"value": "S1496446700.380993,VS0,VE92",
									"name": "X-Timer",
									"description": ""
								},
								{
									"key": "access-control-allow-headers",
									"value": "Authorization, Content-Type, Accept, X-Mashape-Authorization, IMGURPLATFORM, IMGURUIDJAFO, sessionCount, IMGURMWBETA, IMGURMWBETAOPTIN",
									"name": "access-control-allow-headers",
									"description": ""
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET, PUT, POST, DELETE, OPTIONS",
									"name": "access-control-allow-methods",
									"description": ""
								},
								{
									"key": "access-control-allow-origin",
									"value": "*",
									"name": "access-control-allow-origin",
									"description": ""
								}
							],
							"cookies": [],
							"text": "{\"data\":{\"error\":\"Tag does not exist\",\"request\":\"\\/3\\/account\\/me\\/follow\\/tag\\/{{tagName}}\",\"method\":\"POST\"},\"success\":false,\"status\":404}",
							"rawDataType": "text",
							"owner": "3708974"
						}
					],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "415ca2ef-8c80-f889-3161-799dde0417ae",
					"name": "Gallery Tag",
					"description": "Returns tag metadata, and posts tagged with the `tagName` provided",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/gallery/t/{{tagName}}/{{sort}}/{{window}}/{{page}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"owner": "3708974",
					"folder": "6fa917ac-8810-2bd5-590c-f96ca355fc27",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "42101d93-46d2-f601-f131-24e21cba1c34",
					"name": "Update Gallery Item Tags",
					"description": "Update the tags for a post in the gallery",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "Authorization: Bearer {{accessToken}}",
					"dataMode": "params",
					"data": [
						{
							"key": "id",
							"value": "{{galleryHash}}",
							"type": "text",
							"description": "Required. ID of the gallery item"
						},
						{
							"key": "tags",
							"value": "funny,cats",
							"type": "text",
							"description": "Required. The name of the tags you wish to associate with a post. Can be passed as tags[]=funny&tags[]=cat or tags=funny,cat"
						}
					],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/gallery/tags/{{galleryHash}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "6fa917ac-8810-2bd5-590c-f96ca355fc27",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "438e83ab-6fd1-74e2-bd79-415fde9e4eb4",
					"name": "Image",
					"description": "Get information about an image.",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/image/{{imageHash}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"owner": "3708974",
					"folder": "f5b96361-d3b5-82fd-ebb8-fca422bdca4f",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "4725f5e7-21b0-41af-99af-02152ddcb2a9",
					"name": "Image Deletion (Un-Authed)",
					"description": "Deletes an image.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "DELETE",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/image/{{imageDeleteHash}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var res = JSON.parse(responseBody);",
									"",
									"tests[\"Successful delete\"] = res.success === true;"
								]
							}
						}
					],
					"owner": "3708974",
					"folder": "f5b96361-d3b5-82fd-ebb8-fca422bdca4f",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"preRequestScript": null,
					"tests": "var res = JSON.parse(responseBody);\n\ntests[\"Successful delete\"] = res.success === true;",
					"pathVariables": {}
				},
				{
					"id": "49d11ff6-750f-1416-9cae-23c890510a45",
					"name": "Reply Creation",
					"description": "Create a reply for the given comment.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)\n\n#### Parameters\n\n| Key      | Required | Description                                                    |\n|----------|----------|----------------------------------------------------------------|\n| image_id | required | The ID of the image or album in the gallery that you wish to comment on |\n| comment  | required | The comment text, this is what will be displayed               |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "Authorization: Bearer {{accessToken}}",
					"dataMode": "params",
					"data": [
						{
							"key": "image_id",
							"value": "{{imageHash}}",
							"type": "text"
						},
						{
							"key": "image_id",
							"value": "{{albumHash}}",
							"type": "text",
							"enabled": false
						},
						{
							"key": "comment",
							"value": "I'm a giraffe!",
							"type": "text"
						}
					],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/comment/{{commentId}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "8d68524f-ae43-8376-229d-111330be193f",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "4b32bbde-a3af-3a3b-a019-0eccdf272d43",
					"name": "Update Image Information (Un-Authed)",
					"description": "Updates the title or description of an image.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)\n\n#### Parameters\n\n| Key         | Required | Description                   |\n|-------------|----------|-------------------------------|\n| title       | optional | The title of the image.       |\n| description | optional | The description of the image. |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "Authorization: Client-ID {{clientId}}",
					"dataMode": "params",
					"data": [
						{
							"key": "title",
							"value": "Heart",
							"type": "text"
						},
						{
							"key": "description",
							"value": "This is an image of a heart outline.",
							"type": "text"
						}
					],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/image/{{imageDeleteHash}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"owner": "3708974",
					"folder": "f5b96361-d3b5-82fd-ebb8-fca422bdca4f",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "5504681d-47fa-83ff-0577-0bb6241c4a29",
					"name": "Album Image",
					"description": "Get information about an image in an album, any additional actions found in [Image Endpoint](https://api.imgur.com/endpoints/image/) will also work.\n\n#### Response Model: [Image](https://api.imgur.com/models/image)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/album/{{albumHash}}/image/{{imageHash}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"owner": "3708974",
					"folder": "784415f7-0d09-da44-e489-fc991a97d3dd",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "562fad20-54c1-ef1f-2c1e-15eee8de624f",
					"name": "Gallery Tags",
					"description": "Gets a list of default tags",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/tags",
					"responses": [
						{
							"request": {
								"id": "b4452875-3887-4f28-b874-a6508ca6c765",
								"description": "",
								"method": "GET",
								"headers": "Authorization: Client-ID {{clientId}}",
								"data": [],
								"rawModeData": "",
								"url": "https://api.imgur.com/3/tags",
								"queryParams": [],
								"headerData": [
									{
										"key": "Authorization",
										"value": "Client-ID {{clientId}}",
										"enabled": true
									}
								]
							},
							"requestObject": "{\"id\":\"b4452875-3887-4f28-b874-a6508ca6c765\",\"description\":\"\",\"method\":\"GET\",\"headers\":\"Authorization: Client-ID {{clientId}}\",\"data\":[],\"rawModeData\":\"\",\"url\":\"https://api.imgur.com/3/tags\",\"queryParams\":[],\"headerData\":[{\"key\":\"Authorization\",\"value\":\"Client-ID {{clientId}}\",\"enabled\":true}]}",
							"id": "a07e8350-826d-017b-3d30-c3a0e910eb03",
							"name": "default",
							"status": "OK",
							"responseCode": {
								"code": 200,
								"name": "OK",
								"detail": ""
							},
							"language": "json",
							"previewType": "html",
							"time": "179",
							"headers": [
								{
									"key": "Accept-Ranges",
									"value": "bytes",
									"name": "Accept-Ranges",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "X-RateLimit-ClientLimit, X-RateLimit-ClientRemaining, X-RateLimit-UserLimit, X-RateLimit-UserRemaining, X-RateLimit-UserReset",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Age",
									"value": "0",
									"name": "Age",
									"description": ""
								},
								{
									"key": "Cache-Control",
									"value": "max-age=600, stale-while-revalidate=600, stale-if-error=86400, public",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Fri, 07 Apr 2017 19:54:27 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"654638dca6af713e4a605743db1b1e44e57e64e8\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Fastly-Debug-Digest",
									"value": "1fdea3c3defc52d7ceb7d4b907f719afb783012504318a46a435dc407e043b58",
									"name": "Fastly-Debug-Digest",
									"description": ""
								},
								{
									"key": "Server",
									"value": "cat factory 1.0",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": ""
								},
								{
									"key": "X-Backstage",
									"value": "102",
									"name": "X-Backstage",
									"description": ""
								},
								{
									"key": "X-Cache",
									"value": "MISS, MISS",
									"name": "X-Cache",
									"description": ""
								},
								{
									"key": "X-Cache-Hits",
									"value": "0, 0",
									"name": "X-Cache-Hits",
									"description": ""
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": ""
								},
								{
									"key": "X-Redux",
									"value": "1",
									"name": "X-Redux",
									"description": ""
								},
								{
									"key": "X-Served-By",
									"value": "cache-iad2134-IAD, cache-sea1045-SEA",
									"name": "X-Served-By",
									"description": ""
								},
								{
									"key": "access-control-allow-headers",
									"value": "Authorization, Content-Type, Accept, X-Mashape-Authorization, IMGURPLATFORM, IMGURUIDJAFO, sessionCount, IMGURMWBETA, IMGURMWBETAOPTIN",
									"name": "access-control-allow-headers",
									"description": ""
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET, PUT, POST, DELETE, OPTIONS",
									"name": "access-control-allow-methods",
									"description": ""
								},
								{
									"key": "access-control-allow-origin",
									"value": "*",
									"name": "access-control-allow-origin",
									"description": ""
								}
							],
							"cookies": [],
							"text": "{\"data\":{\"tags\":[{\"id\":\"32179\",\"name\":\"embroidery\",\"display_name\":\"embroidery\",\"followers\":0,\"total_items\":270,\"background_hash\":\"iPuYto5\"},{\"id\":\"7003\",\"name\":\"rick_and_morty\",\"display_name\":\"rick and morty\",\"followers\":61,\"total_items\":2040,\"background_hash\":\"gmFssAG\"},{\"id\":\"112\",\"name\":\"gaming\",\"display_name\":\"gaming\",\"followers\":1924,\"total_items\":116988,\"background_hash\":\"IHP8OaT\"},{\"id\":\"745\",\"name\":\"aww\",\"display_name\":\"aww\",\"followers\":163,\"total_items\":81401,\"background_hash\":\"CEN9s8K\"},{\"id\":\"1836014\",\"name\":\"science_and_tech\",\"display_name\":\"science and tech\",\"followers\":9,\"total_items\":834,\"background_hash\":\"CLrdVV6\"},{\"id\":\"1571089\",\"name\":\"air_swimming\",\"display_name\":\"air swimming\",\"followers\":0,\"total_items\":2,\"background_hash\":\"1vLtpXB\"},{\"id\":\"50086\",\"name\":\"current_events\",\"display_name\":\"current events\",\"followers\":27,\"total_items\":3813,\"background_hash\":\"Iyz9AJZ\"},{\"id\":\"1012\",\"name\":\"photography\",\"display_name\":\"photography\",\"followers\":95,\"total_items\":13811,\"background_hash\":\"JjJ7UBc\"},{\"id\":\"427\",\"name\":\"anime\",\"display_name\":\"anime\",\"followers\":1046,\"total_items\":15267,\"background_hash\":\"1O08gF2\"},{\"id\":\"1\",\"name\":\"funny\",\"display_name\":\"funny\",\"followers\":2608,\"total_items\":358356,\"background_hash\":\"5T5koLx\"},{\"id\":\"301\",\"name\":\"puppy\",\"display_name\":\"puppy\",\"followers\":84,\"total_items\":9018,\"background_hash\":\"1dQGsS9\"},{\"id\":\"181\",\"name\":\"cosplay\",\"display_name\":\"cosplay\",\"followers\":355,\"total_items\":15412,\"background_hash\":\"cZWZSmA\"},{\"id\":\"151\",\"name\":\"cats\",\"display_name\":\"cats\",\"followers\":289,\"total_items\":12751,\"background_hash\":\"qFtpv4k\"},{\"id\":\"133\",\"name\":\"memes\",\"display_name\":\"memes\",\"followers\":581,\"total_items\":230846,\"background_hash\":\"IkZeAAy\"},{\"id\":\"24034\",\"name\":\"golden_retriever\",\"display_name\":\"golden retriever\",\"followers\":9,\"total_items\":657,\"background_hash\":\"rKAbi90\"},{\"id\":\"10337\",\"name\":\"perfect_loop\",\"display_name\":\"perfect loop\",\"followers\":22,\"total_items\":1351,\"background_hash\":\"R1dEESs\"},{\"id\":\"1828820\",\"name\":\"eat_what_you_want\",\"display_name\":\"eat what you want\",\"followers\":3,\"total_items\":800,\"background_hash\":\"tvBBQUq\"},{\"id\":\"1042\",\"name\":\"minecraft\",\"display_name\":\"minecraft\",\"followers\":102,\"total_items\":14170,\"background_hash\":\"Ikykl3U\"},{\"id\":\"10723\",\"name\":\"fitness\",\"display_name\":\"fitness\",\"followers\":161,\"total_items\":2442,\"background_hash\":\"f8B0kEw\"},{\"id\":\"12427\",\"name\":\"creativity\",\"display_name\":\"creativity\",\"followers\":15,\"total_items\":2313,\"background_hash\":\"NanxezK\"},{\"id\":\"4717\",\"name\":\"nostalgia\",\"display_name\":\"nostalgia\",\"followers\":19,\"total_items\":1550,\"background_hash\":\"uEdCS9t\"},{\"id\":\"2124623\",\"name\":\"wholesome\",\"display_name\":\"wholesome\",\"followers\":5,\"total_items\":0,\"background_hash\":\"6xwDMxF\"},{\"id\":\"34\",\"name\":\"tattoo\",\"display_name\":\"tattoo\",\"followers\":121,\"total_items\":5347,\"background_hash\":\"S8izsI3\"},{\"id\":\"85\",\"name\":\"pokemon\",\"display_name\":\"pokemon\",\"followers\":329,\"total_items\":12228,\"background_hash\":\"0hNEBcR\"},{\"id\":\"2398\",\"name\":\"lego\",\"display_name\":\"lego\",\"followers\":34,\"total_items\":3182,\"background_hash\":\"oB1KOoT\"},{\"id\":\"49\",\"name\":\"diy\",\"display_name\":\"diy\",\"followers\":223,\"total_items\":6904,\"background_hash\":\"QL9pTeJ\"},{\"id\":\"25\",\"name\":\"wallpaper\",\"display_name\":\"wallpaper\",\"followers\":499,\"total_items\":8540,\"background_hash\":\"R1dEESs\"},{\"id\":\"2743\",\"name\":\"banana_for_scale\",\"display_name\":\"banana for scale\",\"followers\":7,\"total_items\":2061,\"background_hash\":\"OFLek0A\"},{\"id\":\"40\",\"name\":\"art\",\"display_name\":\"art\",\"followers\":303,\"total_items\":140374,\"background_hash\":\"f8B0kEw\"},{\"id\":\"640668\",\"name\":\"the_great_outdoors\",\"display_name\":\"the great outdoors\",\"followers\":6,\"total_items\":918,\"background_hash\":\"zU89CUx\"},{\"id\":\"103\",\"name\":\"star_wars\",\"display_name\":\"star wars\",\"followers\":285,\"total_items\":17778,\"background_hash\":\"UCUaMEu\"},{\"id\":\"814\",\"name\":\"gifs\",\"display_name\":\"gifs\",\"followers\":164,\"total_items\":3673,\"background_hash\":\"qaYq4fG\"},{\"id\":\"1024\",\"name\":\"awesome\",\"display_name\":\"awesome\",\"followers\":129,\"total_items\":29118,\"background_hash\":\"x0HXbK1\"},{\"id\":\"55060\",\"name\":\"movies_and_tv\",\"display_name\":\"movies and tv\",\"followers\":1,\"total_items\":2043,\"background_hash\":\"C0pGMbY\"},{\"id\":\"18838\",\"name\":\"storytime\",\"display_name\":\"storytime\",\"followers\":9,\"total_items\":604,\"background_hash\":\"jhE5UKO\"},{\"id\":\"50866\",\"name\":\"inspiring\",\"display_name\":\"inspiring\",\"followers\":39,\"total_items\":84811,\"background_hash\":\"mr4OtIu\"},{\"id\":\"3211\",\"name\":\"the_more_you_know\",\"display_name\":\"the more you know\",\"followers\":73,\"total_items\":3857,\"background_hash\":\"EpmW3Oy\"},{\"id\":\"55870\",\"name\":\"old_school_cool\",\"display_name\":\"old school cool\",\"followers\":0,\"total_items\":62,\"background_hash\":\"fzXe2ol\"},{\"id\":\"9907\",\"name\":\"transformation\",\"display_name\":\"transformation\",\"followers\":10,\"total_items\":204,\"background_hash\":\"hWiiySS\"}],\"featured\":\"nostalgia\",\"galleries\":[{\"id\":0,\"name\":\"Most Viral\",\"description\":\"Today's most popular posts\",\"topPost\":{\"id\":\"FimF0\",\"title\":\"sexting 101\",\"description\":null,\"datetime\":1491566570,\"cover\":\"zvqtvfh\",\"cover_width\":338,\"cover_height\":600,\"account_url\":\"svgn\",\"account_id\":24813003,\"privacy\":\"hidden\",\"layout\":\"blog\",\"views\":87615,\"link\":\"http:\\/\\/imgur.com\\/a\\/FimF0\",\"ups\":9410,\"downs\":130,\"points\":9280,\"score\":9280,\"is_album\":true,\"vote\":null,\"favorite\":null,\"nsfw\":false,\"section\":\"TrollXChromosomes\",\"comment_count\":397,\"topic\":\"No Topic\",\"topic_id\":29,\"images_count\":8,\"in_gallery\":true,\"is_ad\":false,\"tags\":[],\"in_most_viral\":true}},{\"id\":1,\"name\":\"User Submitted\",\"description\":\"Brand new posts shared in real time\",\"topPost\":{\"id\":\"q6TxQKy\",\"title\":\"Advancements in night vision technology\",\"description\":\"A Las Vegas-based company called SPI has a colour night vision sensor called the X27. The ultra-sensitive sensor is able to shoot both ordinary images during the day, as well as its colour night vision images at night. Point it up at the sky, and you\\u2019ll be able to clearly see stars and constellations.\\n\\nSource: https:\\/\\/www.youtube.com\\/watch?v=8bTgG2Ft4xQ\",\"datetime\":1491581287,\"type\":\"image\\/gif\",\"animated\":true,\"width\":720,\"height\":404,\"size\":27214090,\"views\":7927,\"bandwidth\":215726091430,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"gifs\",\"account_url\":\"TotallyNotABrownBear\",\"account_id\":38754689,\"is_ad\":false,\"tags\":[{\"name\":\"photography\",\"display_name\":\"photography\",\"followers\":95,\"total_items\":13811},{\"name\":\"science_and_tech\",\"display_name\":\"science and tech\",\"followers\":9,\"total_items\":834}],\"in_most_viral\":false,\"in_gallery\":true,\"topic\":\"No Topic\",\"topic_id\":29,\"mp4\":\"http:\\/\\/i.imgur.com\\/q6TxQKy.mp4\",\"gifv\":\"http:\\/\\/i.imgur.com\\/q6TxQKy.gifv\",\"mp4_size\":2013900,\"link\":\"http:\\/\\/i.imgur.com\\/q6TxQKyh.gif\",\"looping\":true,\"comment_count\":65,\"ups\":1349,\"downs\":4,\"points\":1345,\"score\":1348,\"is_album\":false}},{\"id\":2,\"name\":\"Random\",\"description\":\"A mix from the Imgur archives\",\"topPost\":{\"id\":\"GDaIC\",\"title\":\"Anyone know what this thing is? \",\"description\":null,\"datetime\":1302675303,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":1680,\"height\":1050,\"size\":317749,\"views\":123240,\"bandwidth\":39159386760,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"pics\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":true,\"in_gallery\":true,\"topic\":null,\"topic_id\":0,\"link\":\"http:\\/\\/i.imgur.com\\/GDaIC.jpg\",\"comment_count\":72,\"ups\":399,\"downs\":4,\"points\":395,\"score\":456,\"is_album\":false}},{\"id\":3,\"name\":\"Staff Picks\",\"description\":\"Great posts picked by Imgur staff\",\"topPost\":{\"id\":\"PyumGeD\",\"title\":\"This made me laugh and smile.\",\"description\":null,\"datetime\":1491576109,\"type\":\"image\\/gif\",\"animated\":true,\"width\":720,\"height\":720,\"size\":34276628,\"views\":32415,\"bandwidth\":1111076896620,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"gifs\",\"account_url\":\"TheOneThatGotBanned\",\"account_id\":11170171,\"is_ad\":false,\"tags\":[{\"name\":\"funny\",\"display_name\":\"funny\",\"followers\":2608,\"total_items\":358356},{\"name\":\"aww\",\"display_name\":\"aww\",\"followers\":163,\"total_items\":81401},{\"name\":\"funny_animal\",\"display_name\":\"funny animal\",\"followers\":11,\"total_items\":717},{\"name\":\"staff_picks\",\"display_name\":\"staff picks\",\"followers\":6,\"total_items\":0}],\"in_most_viral\":true,\"in_gallery\":true,\"topic\":\"No Topic\",\"topic_id\":29,\"mp4\":\"http:\\/\\/i.imgur.com\\/PyumGeD.mp4\",\"gifv\":\"http:\\/\\/i.imgur.com\\/PyumGeD.gifv\",\"mp4_size\":1953844,\"link\":\"http:\\/\\/i.imgur.com\\/PyumGeDh.gif\",\"looping\":true,\"comment_count\":82,\"ups\":2008,\"downs\":56,\"points\":1952,\"score\":1968,\"is_album\":false}}]},\"success\":true,\"status\":200}",
							"rawDataType": "text",
							"owner": "3708974"
						}
					],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setNextRequest('Image/Image Upload');",
									"",
									"tests[\"test test\"] = true;"
								]
							}
						}
					],
					"owner": "3708974",
					"folder": "6fa917ac-8810-2bd5-590c-f96ca355fc27",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"preRequestScript": null,
					"tests": "postman.setNextRequest('Image/Image Upload');\n\ntests[\"test test\"] = true;",
					"pathVariables": {}
				},
				{
					"id": "56bad542-b66a-6767-b817-eec79b6594d5",
					"name": "Send Verification E-mail",
					"description": "Sends an email to the user to verify that their email is valid to upload to gallery. Must be logged in as the user to send.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/verifyemail",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "58306cbf-eedd-eaa1-8a98-0ea3222e3960",
					"name": "Unfollow tag",
					"description": "Unfollows the {{tagName}} specified for the currently logged in user.\r\n",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "DELETE",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/me/follow/tag/{{tagName}}",
					"responses": [
						{
							"request": {
								"id": "16424830-8c8f-4b48-8a84-cbc483a3d52d",
								"description": "",
								"method": "DELETE",
								"headers": "Authorization: Bearer {{bearerToken}}",
								"data": [],
								"rawModeData": "",
								"url": "https://api.imgur.com/3/account/me/follow/tag/funny",
								"queryParams": [],
								"headerData": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}"
									}
								]
							},
							"requestObject": "{\"id\":\"16424830-8c8f-4b48-8a84-cbc483a3d52d\",\"description\":\"\",\"method\":\"DELETE\",\"headers\":\"Authorization: Bearer {{bearerToken}}\",\"data\":[],\"rawModeData\":\"\",\"url\":\"https://api.imgur.com/3/account/me/follow/tag/funny\",\"queryParams\":[],\"headerData\":[{\"key\":\"Authorization\",\"value\":\"Bearer {{bearerToken}}\"}]}",
							"id": "9d2a583a-3303-2437-4d75-1c5af09465ed",
							"name": "Unfollow Tag: Success",
							"status": "OK",
							"responseCode": {
								"code": 200,
								"name": "OK",
								"detail": ""
							},
							"language": "json",
							"previewType": "html",
							"time": "185",
							"headers": [
								{
									"key": "Accept-Ranges",
									"value": "bytes",
									"name": "Accept-Ranges",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "X-RateLimit-ClientLimit, X-RateLimit-ClientRemaining, X-RateLimit-UserLimit, X-RateLimit-UserRemaining, X-RateLimit-UserReset",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, post-check=0, pre-check=0",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Fri, 02 Jun 2017 23:32:31 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"4a931e85c4c3e49f1fb921656d64b65510e32928\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "cat factory 1.0",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": ""
								},
								{
									"key": "X-Cache",
									"value": "MISS",
									"name": "X-Cache",
									"description": ""
								},
								{
									"key": "X-Cache-Hits",
									"value": "0",
									"name": "X-Cache-Hits",
									"description": ""
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": ""
								},
								{
									"key": "X-RateLimit-ClientLimit",
									"value": "12500",
									"name": "X-RateLimit-ClientLimit",
									"description": ""
								},
								{
									"key": "X-RateLimit-ClientRemaining",
									"value": "12499",
									"name": "X-RateLimit-ClientRemaining",
									"description": ""
								},
								{
									"key": "X-RateLimit-UserLimit",
									"value": "2000",
									"name": "X-RateLimit-UserLimit",
									"description": ""
								},
								{
									"key": "X-RateLimit-UserRemaining",
									"value": "1998",
									"name": "X-RateLimit-UserRemaining",
									"description": ""
								},
								{
									"key": "X-RateLimit-UserReset",
									"value": "1496449847",
									"name": "X-RateLimit-UserReset",
									"description": ""
								},
								{
									"key": "X-Redux",
									"value": "1",
									"name": "X-Redux",
									"description": ""
								},
								{
									"key": "X-Served-By",
									"value": "cache-sea1029-SEA",
									"name": "X-Served-By",
									"description": ""
								},
								{
									"key": "X-Timer",
									"value": "S1496446351.410382,VS0,VE147",
									"name": "X-Timer",
									"description": ""
								},
								{
									"key": "access-control-allow-headers",
									"value": "Authorization, Content-Type, Accept, X-Mashape-Authorization, IMGURPLATFORM, IMGURUIDJAFO, sessionCount, IMGURMWBETA, IMGURMWBETAOPTIN",
									"name": "access-control-allow-headers",
									"description": ""
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET, PUT, POST, DELETE, OPTIONS",
									"name": "access-control-allow-methods",
									"description": ""
								},
								{
									"key": "access-control-allow-origin",
									"value": "*",
									"name": "access-control-allow-origin",
									"description": ""
								}
							],
							"cookies": [],
							"text": "{\"data\":true,\"success\":true,\"status\":200}",
							"rawDataType": "text",
							"owner": "3708974"
						},
						{
							"request": {
								"id": "cc212144-9e17-49f3-964d-44311b48221e",
								"description": "",
								"method": "DELETE",
								"headers": "Authorization: Bearer {{bearerToken}}",
								"data": [],
								"rawModeData": "",
								"url": "https://api.imgur.com/3/account/me/follow/tag/funny",
								"queryParams": [],
								"headerData": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}"
									}
								]
							},
							"requestObject": "{\"id\":\"cc212144-9e17-49f3-964d-44311b48221e\",\"description\":\"\",\"method\":\"DELETE\",\"headers\":\"Authorization: Bearer {{bearerToken}}\",\"data\":[],\"rawModeData\":\"\",\"url\":\"https://api.imgur.com/3/account/me/follow/tag/funny\",\"queryParams\":[],\"headerData\":[{\"key\":\"Authorization\",\"value\":\"Bearer {{bearerToken}}\"}]}",
							"id": "ea7ca871-ac4c-2b6f-2392-20cb0b333995",
							"name": "Unfollow Tag: Not Following",
							"status": "Conflict",
							"responseCode": {
								"code": 409,
								"name": "Conflict",
								"detail": ""
							},
							"language": "json",
							"previewType": "html",
							"time": "119",
							"headers": [
								{
									"key": "Accept-Ranges",
									"value": "bytes",
									"name": "Accept-Ranges",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "X-RateLimit-ClientLimit, X-RateLimit-ClientRemaining, X-RateLimit-UserLimit, X-RateLimit-UserRemaining, X-RateLimit-UserReset",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, post-check=0, pre-check=0",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Fri, 02 Jun 2017 23:34:41 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "\"e227211b0191945f4be2ec72f81c138f52baae21\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "cat factory 1.0",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": ""
								},
								{
									"key": "X-Cache",
									"value": "MISS",
									"name": "X-Cache",
									"description": ""
								},
								{
									"key": "X-Cache-Hits",
									"value": "0",
									"name": "X-Cache-Hits",
									"description": ""
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": ""
								},
								{
									"key": "X-Redux",
									"value": "1",
									"name": "X-Redux",
									"description": ""
								},
								{
									"key": "X-Served-By",
									"value": "cache-sea1029-SEA",
									"name": "X-Served-By",
									"description": ""
								},
								{
									"key": "X-Timer",
									"value": "S1496446482.679292,VS0,VE94",
									"name": "X-Timer",
									"description": ""
								},
								{
									"key": "access-control-allow-headers",
									"value": "Authorization, Content-Type, Accept, X-Mashape-Authorization, IMGURPLATFORM, IMGURUIDJAFO, sessionCount, IMGURMWBETA, IMGURMWBETAOPTIN",
									"name": "access-control-allow-headers",
									"description": ""
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET, PUT, POST, DELETE, OPTIONS",
									"name": "access-control-allow-methods",
									"description": ""
								},
								{
									"key": "access-control-allow-origin",
									"value": "*",
									"name": "access-control-allow-origin",
									"description": ""
								}
							],
							"cookies": [],
							"text": "{\"data\":{\"error\":\"Not following tag\",\"request\":\"\\/3\\/account\\/me\\/follow\\/tag\\/funny\",\"method\":\"DELETE\"},\"success\":false,\"status\":409}",
							"rawDataType": "text",
							"owner": "3708974"
						},
						{
							"request": {
								"id": "99fcff45-002f-4f6d-9854-8a63657a25d7",
								"description": "",
								"method": "DELETE",
								"headers": "Authorization: Bearer {{bearerToken}}",
								"data": [],
								"rawModeData": "",
								"url": "https://api.imgur.com/3/account/me/follow/tag/{{tagName}}",
								"queryParams": [],
								"headerData": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}"
									}
								]
							},
							"requestObject": "{\"id\":\"99fcff45-002f-4f6d-9854-8a63657a25d7\",\"description\":\"\",\"method\":\"DELETE\",\"headers\":\"Authorization: Bearer {{bearerToken}}\",\"data\":[],\"rawModeData\":\"\",\"url\":\"https://api.imgur.com/3/account/me/follow/tag/{{tagName}}\",\"queryParams\":[],\"headerData\":[{\"key\":\"Authorization\",\"value\":\"Bearer {{bearerToken}}\"}]}",
							"id": "43d8f4a3-1764-b150-ee49-293f2257cfbe",
							"name": "Unfollow Tag: Tag Does Not Exist",
							"status": "Not Found",
							"responseCode": {
								"code": 404,
								"name": "Not Found",
								"detail": ""
							},
							"language": "json",
							"previewType": "html",
							"time": "134",
							"headers": [
								{
									"key": "Accept-Ranges",
									"value": "bytes",
									"name": "Accept-Ranges",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "X-RateLimit-ClientLimit, X-RateLimit-ClientRemaining, X-RateLimit-UserLimit, X-RateLimit-UserRemaining, X-RateLimit-UserReset",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, post-check=0, pre-check=0",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Fri, 02 Jun 2017 23:37:06 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"6c7c0e7d55aaf4aa3f3001f04ebddad4c9daab9a\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "cat factory 1.0",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": ""
								},
								{
									"key": "X-Cache",
									"value": "MISS",
									"name": "X-Cache",
									"description": ""
								},
								{
									"key": "X-Cache-Hits",
									"value": "0",
									"name": "X-Cache-Hits",
									"description": ""
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": ""
								},
								{
									"key": "X-Redux",
									"value": "1",
									"name": "X-Redux",
									"description": ""
								},
								{
									"key": "X-Served-By",
									"value": "cache-sea1029-SEA",
									"name": "X-Served-By",
									"description": ""
								},
								{
									"key": "X-Timer",
									"value": "S1496446626.259756,VS0,VE96",
									"name": "X-Timer",
									"description": ""
								},
								{
									"key": "access-control-allow-headers",
									"value": "Authorization, Content-Type, Accept, X-Mashape-Authorization, IMGURPLATFORM, IMGURUIDJAFO, sessionCount, IMGURMWBETA, IMGURMWBETAOPTIN",
									"name": "access-control-allow-headers",
									"description": ""
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET, PUT, POST, DELETE, OPTIONS",
									"name": "access-control-allow-methods",
									"description": ""
								},
								{
									"key": "access-control-allow-origin",
									"value": "*",
									"name": "access-control-allow-origin",
									"description": ""
								}
							],
							"cookies": [],
							"text": "{\"data\":{\"error\":\"Tag does not exist\",\"request\":\"\\/3\\/account\\/me\\/follow\\/tag\\/{{tagName}}\",\"method\":\"DELETE\"},\"success\":false,\"status\":404}",
							"rawDataType": "text",
							"owner": "3708974"
						}
					],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "5ad013b4-3a2d-036e-9236-a7aa100aea7d",
					"name": "Set Album Images (Authed)",
					"description": "Sets the images for an album, removes all other images and only uses the images in this request. You must include either ids[] or deletehashes[].\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)\n\n#### Parameters\n\n| Key            | Required | Description                                             |\n|----------------|----------|---------------------------------------------------------|\n| ids[]          | optional | The image ids that you want to be added to the album.   |\n| deletehashes[] | optional | The image deletehashes that you want to be added to the album. |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "Authorization: Bearer {{accessToken}}",
					"dataMode": "params",
					"data": [
						{
							"key": "ids[]",
							"value": "{{imageHash}}",
							"type": "text"
						},
						{
							"key": "ids[]",
							"value": "{{imageHash2}}",
							"type": "text"
						}
					],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/album/{{albumHash}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "784415f7-0d09-da44-e489-fc991a97d3dd",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "5b418a82-ab29-b156-7cbc-e76eede9151b",
					"name": "Album",
					"description": "Get additional information about an album, this endpoint works the same as the [Album Endpoint](). You can also use any of the additional routes that are used on an album in the album endpoint.\n\n#### Response Model: [Album](https://api.imgur.com/models/album)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/album/{{albumHash}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "5dbad427-325f-07f4-8a49-ac6607132109",
					"name": "Gallery Tag Info",
					"description": "Gets metadata about a tag",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/gallery/tag_info/{{tagName}}",
					"responses": [
						{
							"request": {
								"id": "3b1efb55-ca05-4cb4-91fc-f23da36d2893",
								"description": "",
								"method": "GET",
								"headers": "Authorization: Client-ID {{clientId}}",
								"data": [],
								"rawModeData": "",
								"url": "https://api.imgur.com/3/gallery/tag_info/{{tagName}}",
								"queryParams": [],
								"headerData": [
									{
										"key": "Authorization",
										"value": "Client-ID {{clientId}}",
										"enabled": true
									}
								]
							},
							"requestObject": "{\"id\":\"3b1efb55-ca05-4cb4-91fc-f23da36d2893\",\"description\":\"\",\"method\":\"GET\",\"headers\":\"Authorization: Client-ID {{clientId}}\",\"data\":[],\"rawModeData\":\"\",\"url\":\"https://api.imgur.com/3/gallery/tag_info/{{tagName}}\",\"queryParams\":[],\"headerData\":[{\"key\":\"Authorization\",\"value\":\"Client-ID {{clientId}}\",\"enabled\":true}]}",
							"id": "9b02cf80-1de0-2640-2249-51bc19f12873",
							"name": "Sample Response",
							"status": "OK",
							"responseCode": {
								"code": 200,
								"name": "OK",
								"detail": ""
							},
							"language": "json",
							"previewType": "html",
							"time": "297",
							"headers": [
								{
									"key": "Accept-Ranges",
									"value": "bytes",
									"name": "Accept-Ranges",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "X-RateLimit-ClientLimit, X-RateLimit-ClientRemaining, X-RateLimit-UserLimit, X-RateLimit-UserRemaining, X-RateLimit-UserReset",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Age",
									"value": "0",
									"name": "Age",
									"description": ""
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, post-check=0, pre-check=0",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": ""
								},
								{
									"key": "Content-Length",
									"value": "209",
									"name": "Content-Length",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Mon, 01 May 2017 23:07:51 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"5a56ce1a98501a15bf140a5153123fd2872d2660\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Fastly-Debug-Digest",
									"value": "d8d41765403e061c7588a1fe905f6349874d7cdb25d44e22d90bf2334f005d3a",
									"name": "Fastly-Debug-Digest",
									"description": ""
								},
								{
									"key": "Server",
									"value": "cat factory 1.0",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": ""
								},
								{
									"key": "X-Cache",
									"value": "MISS, MISS",
									"name": "X-Cache",
									"description": ""
								},
								{
									"key": "X-Cache-Hits",
									"value": "0, 0",
									"name": "X-Cache-Hits",
									"description": ""
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": ""
								},
								{
									"key": "X-Redux",
									"value": "1",
									"name": "X-Redux",
									"description": ""
								},
								{
									"key": "X-Served-By",
									"value": "cache-iad2126-IAD, cache-sea1031-SEA",
									"name": "X-Served-By",
									"description": ""
								},
								{
									"key": "X-Timer",
									"value": "S1493680071.956339,VS0,VE91",
									"name": "X-Timer",
									"description": ""
								},
								{
									"key": "access-control-allow-headers",
									"value": "Authorization, Content-Type, Accept, X-Mashape-Authorization, IMGURPLATFORM, IMGURUIDJAFO, sessionCount, IMGURMWBETA, IMGURMWBETAOPTIN",
									"name": "access-control-allow-headers",
									"description": ""
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET, PUT, POST, DELETE, OPTIONS",
									"name": "access-control-allow-methods",
									"description": ""
								},
								{
									"key": "access-control-allow-origin",
									"value": "*",
									"name": "access-control-allow-origin",
									"description": ""
								}
							],
							"cookies": [
								{
									"expirationDate": "Mon Jan 18 2038 03:14:07 GMT+0000 (UTC)",
									"httpOnly": false,
									"domain": "imgur.com",
									"path": "/",
									"secure": false,
									"value": "0ac920e771a1be71e700fdefdb22232a",
									"name": "IMGURSESSION"
								},
								{
									"expirationDate": "Sun Jan 17 2038 22:14:07 GMT+0000 (UTC)",
									"httpOnly": true,
									"domain": "imgur.com",
									"path": "/",
									"secure": false,
									"value": "1",
									"name": "_nc"
								},
								{
									"expirationDate": "Sun Oct 29 2017 05:19:01 GMT+0000 (UTC)",
									"httpOnly": false,
									"domain": "api.imgur.com",
									"path": "/",
									"secure": false,
									"value": "496bdd0d6f02f181ae3fe2eaf473380f%7E2yespXiWCe7Ur6k3qf5jgS7iksNTeBC6",
									"name": "authautologin"
								}
							],
							"text": "{\"data\":{\"name\":\"the_more_you_know\",\"display_name\":\"the more you know\",\"followers\":76,\"total_items\":369594,\"following\":false,\"background_hash\":\"EpmW3Oy\",\"is_promoted\":false,\"description\":\"\",\"logo_hash\":null,\"logo_destination_url\":null,\"description_annotations\":{}},\"success\":true,\"status\":200}",
							"rawDataType": "text",
							"owner": "3708974"
						}
					],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setNextRequest('Image/Image Upload');",
									"",
									"tests[\"test test\"] = true;"
								]
							}
						}
					],
					"owner": "3708974",
					"folder": "6fa917ac-8810-2bd5-590c-f96ca355fc27",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"preRequestScript": null,
					"tests": "postman.setNextRequest('Image/Image Upload');\n\ntests[\"test test\"] = true;",
					"pathVariables": {}
				},
				{
					"id": "5de8d1b2-ae4f-9d4e-f312-e7b43406c605",
					"name": "Favorite an Image",
					"description": "Favorite an image with the given ID. The user is required to be logged in to favorite the image.\n\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/image/{{imageHash}}/favorite",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "f5b96361-d3b5-82fd-ebb8-fca422bdca4f",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "62c6466a-fe5c-9bd2-55ec-3c77c07ad4d0",
					"name": "Comments",
					"description": "Return the comments the user has created.\n\n#### Response Model: [Comment](https://api.imgur.com/models/comment)\n\n#### Parameters\n\n| Key  | Required | Value                                                         |\n|------|----------|---------------------------------------------------------------|\n| commentSort | optional | `best`, `worst`, `oldest`, or `newest`. Defaults to `newest`. |\n| page | optional | Page number (50 items per page). Defaults to `0`.               |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/comments/{{commentSort}}/{{page}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "62ec7859-9216-fe70-19f4-7cecd913b494",
					"name": "Image Deletion (Authed)",
					"description": "Deletes an image.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "DELETE",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/image/{{imageHash}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// This endpoint is critical to the test flow, ",
									"// so this stops the request cycle if any of these tests error.",
									"postman.setNextRequest('end');",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"tests['Status code is 200'] = (responseCode.code === 200);",
									"tests['Image deletion was successful'] = res.success === true && res.data === true;",
									"",
									"postman.setNextRequest('end'); // stop running tests by setting next request to an invalid name / id"
								]
							}
						}
					],
					"owner": "3708974",
					"folder": "f5b96361-d3b5-82fd-ebb8-fca422bdca4f",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"preRequestScript": null,
					"tests": "// This endpoint is critical to the test flow, \n// so this stops the request cycle if any of these tests error.\npostman.setNextRequest('end');\n\nvar res = JSON.parse(responseBody);\n\ntests['Status code is 200'] = (responseCode.code === 200);\ntests['Image deletion was successful'] = res.success === true && res.data === true;\n\npostman.setNextRequest('end'); // stop running tests by setting next request to an invalid name / id",
					"pathVariables": {}
				},
				{
					"id": "62fe5382-c4db-542c-b097-fb48e1ce1622",
					"name": "Image Upload",
					"description": "Upload a new image.\n\n#### Parameters\n\n| Key         | Required | Description                                                                                                                            |\n|-------------|----------|----------------------------------------------------------------------------------------------------------------------------------------|\n| image       | required | A binary file, base64 data, or a URL for an image. (up to 10MB)                                                                        |\n| album       | optional | The id of the album you want to add the image to. For anonymous albums, `album` should be the deletehash that is returned at creation. |\n| type        | optional | The type of the file that's being sent; `file`, `base64` or `URL`                                                                            |\n| name        | optional | The name of the file, this is automatically detected if uploading a file with a POST and multipart / form-data                         |\n| title       | optional | The title of the image.                                                                                                                |\n| description | optional | The description of the image.                                                                                                          |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "// Authorization: Client-ID {{clientId}}\nAuthorization: Bearer {{accessToken}}",
					"dataMode": "params",
					"data": [
						{
							"key": "image",
							"value": "R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7",
							"type": "text",
							"description": "*required* A binary file, base64 data, or a URL for an image. (up to 10MB)"
						},
						{
							"key": "album",
							"value": "{{albumHash}}",
							"description": "[optional] The album",
							"type": "text",
							"enabled": false
						},
						{
							"key": "title",
							"value": "1x1 Pixel",
							"type": "text",
							"enabled": false
						},
						{
							"key": "description",
							"value": "This is an 1x1 pixel image.",
							"type": "text",
							"enabled": false
						},
						{
							"key": "name",
							"value": "pixel.gif",
							"type": "text",
							"enabled": false
						},
						{
							"key": "type",
							"value": "gif",
							"description": "",
							"type": "text",
							"enabled": false
						}
					],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/image",
					"responses": [
						{
							"request": {
								"id": "79b92f3f-0c0f-467b-9326-8ede7dcec5f4",
								"description": "",
								"method": "POST",
								"headers": "Authorization: Client-ID {{clientId}}\n// Authorization: Bearer {{accessToken}}",
								"dataMode": "params",
								"data": [
									{
										"key": "image",
										"value": "R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7",
										"type": "text",
										"description": ""
									},
									{
										"key": "album",
										"value": "{{albumHash}}",
										"description": "",
										"type": "text",
										"enabled": false
									},
									{
										"key": "title",
										"value": "1x1 Pixel",
										"type": "text",
										"enabled": false
									},
									{
										"key": "description",
										"value": "This is an 1x1 pixel image.",
										"type": "text",
										"enabled": false
									},
									{
										"key": "name",
										"value": "pixel.gif",
										"type": "text",
										"enabled": false
									},
									{
										"key": "type",
										"value": "gif",
										"description": "",
										"type": "text",
										"enabled": false
									}
								],
								"rawModeData": "",
								"url": "https://api.imgur.com/3/image",
								"queryParams": [],
								"headerData": [
									{
										"key": "Authorization",
										"value": "Client-ID {{clientId}}",
										"enabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"enabled": false
									}
								]
							},
							"requestObject": "{\"id\":\"79b92f3f-0c0f-467b-9326-8ede7dcec5f4\",\"description\":\"\",\"method\":\"POST\",\"headers\":\"Authorization: Client-ID {{clientId}}\\n// Authorization: Bearer {{accessToken}}\",\"dataMode\":\"params\",\"data\":[{\"key\":\"image\",\"value\":\"R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7\",\"type\":\"text\",\"description\":\"\"},{\"key\":\"album\",\"value\":\"{{albumHash}}\",\"description\":\"\",\"type\":\"text\",\"enabled\":false},{\"key\":\"title\",\"value\":\"1x1 Pixel\",\"type\":\"text\",\"enabled\":false},{\"key\":\"description\",\"value\":\"This is an 1x1 pixel image.\",\"type\":\"text\",\"enabled\":false},{\"key\":\"name\",\"value\":\"pixel.gif\",\"type\":\"text\",\"enabled\":false},{\"key\":\"type\",\"value\":\"gif\",\"description\":\"\",\"type\":\"text\",\"enabled\":false}],\"rawModeData\":\"\",\"url\":\"https://api.imgur.com/3/image\",\"queryParams\":[],\"headerData\":[{\"key\":\"Authorization\",\"value\":\"Client-ID {{clientId}}\",\"enabled\":true},{\"key\":\"Authorization\",\"value\":\"Bearer {{accessToken}}\",\"enabled\":false}]}",
							"id": "9e7c95be-e3fe-b852-d65c-b509be2f28a4",
							"name": "Sample Anonymous Upload",
							"status": "OK",
							"responseCode": {
								"code": 200,
								"name": "OK",
								"detail": ""
							},
							"language": "json",
							"previewType": "html",
							"time": "1620",
							"headers": [
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Authorization, Content-Type, Accept, X-Mashape-Authorization, IMGURPLATFORM, IMGURUIDJAFO, SESSIONCOUNT, IMGURMWBETA, IMGURMWBETAOPTIN",
									"name": "Access-Control-Allow-Headers",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, PUT, POST, DELETE, OPTIONS",
									"name": "Access-Control-Allow-Methods",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "X-RateLimit-ClientLimit, X-RateLimit-ClientRemaining, X-RateLimit-UserLimit, X-RateLimit-UserRemaining, X-RateLimit-UserReset",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, post-check=0, pre-check=0",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "close",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Tue, 23 May 2017 16:28:10 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"f8e9f040e2b6ba2ebf5c836309b5cb50cf4b7368\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Expires",
									"value": "Thu, 19 Nov 1981 08:52:00 GMT",
									"name": "Expires",
									"description": ""
								},
								{
									"key": "Pragma",
									"value": "no-cache",
									"name": "Pragma",
									"description": ""
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": ""
								},
								{
									"key": "X-Post-Rate-Limit-Limit",
									"value": "1250",
									"name": "X-Post-Rate-Limit-Limit",
									"description": ""
								},
								{
									"key": "X-Post-Rate-Limit-Remaining",
									"value": "1250",
									"name": "X-Post-Rate-Limit-Remaining",
									"description": ""
								},
								{
									"key": "X-Post-Rate-Limit-Reset",
									"value": "-2",
									"name": "X-Post-Rate-Limit-Reset",
									"description": ""
								},
								{
									"key": "X-origin-ip",
									"value": "172.16.2.228",
									"name": "X-origin-ip",
									"description": ""
								}
							],
							"cookies": [
								{
									"expirationDate": "Tue Jan 19 2038 09:14:07 GMT+0000 (UTC)",
									"httpOnly": false,
									"domain": "imgur.com",
									"path": "/",
									"secure": false,
									"value": "259f1853850b21cb4df8bc5bd15b7884",
									"name": "IMGURSESSION"
								},
								{
									"expirationDate": "Tue Jan 19 2038 09:14:07 GMT+0000 (UTC)",
									"httpOnly": true,
									"domain": "imgur.com",
									"path": "/",
									"secure": false,
									"value": "1",
									"name": "_nc"
								},
								{
									"expirationDate": "Tue Jan 19 2038 06:14:07 GMT+0000 (UTC)",
									"httpOnly": false,
									"domain": "api.imgur.com",
									"path": "/",
									"secure": false,
									"value": "upload.i-054973f4f04ffec62.production",
									"name": "UPSERVERID"
								}
							],
							"text": "{\n  \"data\": {\n    \"id\": \"orunSTu\",\n    \"title\": null,\n    \"description\": null,\n    \"datetime\": 1495556889,\n    \"type\": \"image/gif\",\n    \"animated\": false,\n    \"width\": 1,\n    \"height\": 1,\n    \"size\": 42,\n    \"views\": 0,\n    \"bandwidth\": 0,\n    \"vote\": null,\n    \"favorite\": false,\n    \"nsfw\": null,\n    \"section\": null,\n    \"account_url\": null,\n    \"account_id\": 0,\n    \"is_ad\": false,\n    \"in_most_viral\": false,\n    \"tags\": [],\n    \"ad_type\": 0,\n    \"ad_url\": \"\",\n    \"in_gallery\": false,\n    \"deletehash\": \"x70po4w7BVvSUzZ\",\n    \"name\": \"\",\n    \"link\": \"http://i.imgur.com/orunSTu.gif\"\n  },\n  \"success\": true,\n  \"status\": 200\n}",
							"rawDataType": "text",
							"owner": "3708974"
						}
					],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}",
							"enabled": false
						},
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// This endpoint is critical to the test flow, ",
									"// so this stops the request cycle if any of these tests error.",
									"postman.setNextRequest('end');",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"var imageHash = res.data.id;",
									"var imageDeleteHash = res.data.deletehash;",
									"tests['Returns 7 char alphanumeric id'] = /^[a-z0-9]{7}$/i.test(imageHash);",
									"tests['Returns 15 char alhpanumeric deletehash'] = /^[a-z0-9]{15}$/i.test(imageDeleteHash);",
									"",
									"postman.setEnvironmentVariable('imageHash', imageHash);",
									"postman.setEnvironmentVariable('imageDeleteHash', imageDeleteHash);",
									"",
									"postman.setNextRequest('Account Images'); // Account -> Account Images"
								]
							}
						}
					],
					"owner": "3708974",
					"folder": "f5b96361-d3b5-82fd-ebb8-fca422bdca4f",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"preRequestScript": null,
					"tests": "// This endpoint is critical to the test flow, \n// so this stops the request cycle if any of these tests error.\npostman.setNextRequest('end');\n\nvar res = JSON.parse(responseBody);\n\nvar imageHash = res.data.id;\nvar imageDeleteHash = res.data.deletehash;\ntests['Returns 7 char alphanumeric id'] = /^[a-z0-9]{7}$/i.test(imageHash);\ntests['Returns 15 char alhpanumeric deletehash'] = /^[a-z0-9]{15}$/i.test(imageDeleteHash);\n\npostman.setEnvironmentVariable('imageHash', imageHash);\npostman.setEnvironmentVariable('imageDeleteHash', imageDeleteHash);\n\npostman.setNextRequest('Account Images'); // Account -> Account Images",
					"pathVariables": {}
				},
				{
					"id": "64a07401-a412-65b8-2279-457cfb6a616d",
					"name": "Change Account Settings",
					"description": "Updates the account settings for a given user, the user must be logged in.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)\n\n#### Parameters\n\n| Key                    | Required | Description                                                                           |\n|------------------------|----------|---------------------------------------------------------------------------------------|\n| bio                    | optional | The biography of the user, is displayed in the gallery profile page.                  |\n| public_images          | optional | Set the users images to private or public by default                                  |\n| messaging_enabled      | optional | true &#124; false - Allows the user to enable / disable private messages                   |\n| album_privacy          | optional | public &#124; hidden &#124; secret - Sets the default privacy level of albums the users creates |\n| accepted_gallery_terms | optional | true &#124; false - The user agreement to the Imgur Gallery terms.                         |\n| username               | optional | A valid Imgur username (between 4 and 63 alphanumeric characters)                     |\n| show_mature            | optional | true &#124; false - Toggle display of mature images in gallery list endpoints.             |\n| newsletter_subscribed  | optional | true &#124; false - Toggle subscription to email newsletter.                               |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "PUT",
					"headers": "Authorization: Bearer {{accessToken}}",
					"dataMode": "params",
					"data": [
						{
							"key": "bio",
							"value": "Long time lurker...",
							"type": "text",
							"enabled": false
						},
						{
							"key": "public_images",
							"value": "false",
							"type": "text",
							"enabled": false
						},
						{
							"key": "messaging_enabled",
							"value": "true",
							"type": "text",
							"enabled": false
						},
						{
							"key": "album_privacy",
							"value": "public",
							"type": "text",
							"enabled": false
						},
						{
							"key": "accepted_gallery_terms",
							"value": "true",
							"type": "text",
							"enabled": false
						},
						{
							"key": "username",
							"value": "ImgurUser",
							"type": "text",
							"enabled": false
						},
						{
							"key": "show_mature",
							"value": "true",
							"type": "text",
							"enabled": false
						},
						{
							"key": "newsletter_subscribed",
							"value": "true",
							"type": "text",
							"enabled": false
						},
						{
							"key": "avatar",
							"value": "flavor/taco",
							"description": "See Account Available Avatars for possible values",
							"type": "text",
							"enabled": false
						}
					],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/settings",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "67a45751-571a-92bf-e3b6-cd4520012de8",
					"name": "Album Deletion",
					"description": "Delete an Album with a given id.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "DELETE",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/album/{{albumHash}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "71f5937a-a97c-60ac-a566-0024c18a7d92",
					"name": "Comment",
					"description": "Get information about a specific comment.\n\n#### Response Model: [Comment](https://api.imgur.com/models/comment)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/comment/{{commentId}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"owner": "3708974",
					"folder": "8d68524f-ae43-8376-229d-111330be193f",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "72033e05-1ae8-c68d-7d98-3a37adb45670",
					"name": "Album / Image Comments",
					"description": "Get comments on an image or album in the gallery.\n\n`galleryHash` is the unique identifier of an album or image in the gallery.\n\n`commentSort` is one of `best` | `top` | `new` - defaults to `best`.",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"dataMode": "params",
					"data": [
						{
							"key": "access_token",
							"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImYwMmZkODgwOTNmNTQ2Mjg1MDY2YTNmNGQxNGNiMzBhZTZhY2MyM2YifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJhdWQiOiI4NDEzNTkzNTM5ODgtcml0aWhjNDRhdjVwZGwydTBlZWticWI3NzlvaGg2Ym4uYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMDY3OTQ2NzEyMzA5MjA4NTQ0MTUiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiYXpwIjoiODQxMzU5MzUzOTg4LThiMzVsNWFwZTFuYzdyYzR0cm9pYWpqbHRwbWI5cXFkLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwiZW1haWwiOiJkcGFzdHVzZWtAZ21haWwuY29tIiwiaWF0IjoxNDU1MTQwMDQyLCJleHAiOjE0NTUxNDM2NDIsIm5hbWUiOiJEYW4gUGFzdHVzZWsiLCJwaWN0dXJlIjoiaHR0cHM6Ly9saDQuZ29vZ2xldXNlcmNvbnRlbnQuY29tLy0yMXV3LVVaMmttMC9BQUFBQUFBQUFBSS9BQUFBQUFBQUZsdy9QcjVLdDdVckxaay9zOTYtYy9waG90by5qcGciLCJnaXZlbl9uYW1lIjoiRGFuIiwiZmFtaWx5X25hbWUiOiJQYXN0dXNlayIsImxvY2FsZSI6ImVuIn0.DcCxKOoMHVUBIppiJDBqLMPUoJk_FMv9RAQNl8mh7HNia3iq5jQCNIea0h3B6-akf7vxfp__b4f3N59qnOcmd4zdAYCT7zO5YubHhyeoOXENwueoTbKzexoNmZMPDZUrKqj-4sAqscHuiJmT2Nwwkdu2g8cFxI0-TpQVHAspJJJ5r_oMP45kdeRpwYV2R7Azct-vYs6QxQaQMn6_azm9Va7HckEop4my8wMoCfAbF1gDiB-JNW63QSzBFBK7SMNXOcrkssoGP3zXdfqjIdU1MK3Wx6i8zqEiV1IrI8XglvWnhIO7z0R_8AAG37DruKNg3HtGRgNtt0grE48ELnQ-zA",
							"type": "text"
						}
					],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/gallery/{{galleryHash}}/comments/{{commentSort}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// This endpoint is critical to the test flow, ",
									"// so this stops the request cycle if any of these tests error.",
									"postman.setNextRequest('end');",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"tests['Status code is 200'] = (responseCode.code === 200);",
									"tests['Comment retrieval was successful'] = res.success === true;",
									"",
									"tests['Returns Correct Comment ID'] = res.data[0] && res.data[0].id == postman.getEnvironmentVariable('commentId');",
									"tests['Returns Correct Image ID'] = res.data[0] && res.data[0].image_id == postman.getEnvironmentVariable('galleryHash'); // Technically this can also be album id. We should probably specify in the response",
									"tests['Returns Correct Comment Data'] = res.data[0] && res.data[0].comment == postman.getEnvironmentVariable('commentText');",
									"tests['Returns Correct Author Username'] = res.data[0] && res.data[0].author == postman.getEnvironmentVariable('username');",
									"// tests['Returns A Valid Platform'] = [\"iphone\", \"android\", \"desktop\", \"mweb\"].indexOf(res.data[0].platform) > -1;",
									"",
									"postman.setNextRequest('Remove from Gallery'); // Gallery -> Remove from Gallery"
								]
							}
						}
					],
					"owner": "3708974",
					"folder": "6fa917ac-8810-2bd5-590c-f96ca355fc27",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"preRequestScript": null,
					"tests": "// This endpoint is critical to the test flow, \n// so this stops the request cycle if any of these tests error.\npostman.setNextRequest('end');\n\nvar res = JSON.parse(responseBody);\n\ntests['Status code is 200'] = (responseCode.code === 200);\ntests['Comment retrieval was successful'] = res.success === true;\n\ntests['Returns Correct Comment ID'] = res.data[0] && res.data[0].id == postman.getEnvironmentVariable('commentId');\ntests['Returns Correct Image ID'] = res.data[0] && res.data[0].image_id == postman.getEnvironmentVariable('galleryHash'); // Technically this can also be album id. We should probably specify in the response\ntests['Returns Correct Comment Data'] = res.data[0] && res.data[0].comment == postman.getEnvironmentVariable('commentText');\ntests['Returns Correct Author Username'] = res.data[0] && res.data[0].author == postman.getEnvironmentVariable('username');\n// tests['Returns A Valid Platform'] = [\"iphone\", \"android\", \"desktop\", \"mweb\"].indexOf(res.data[0].platform) > -1;\n\npostman.setNextRequest('Remove from Gallery'); // Gallery -> Remove from Gallery",
					"pathVariables": {}
				},
				{
					"id": "7854b508-4d44-785b-b9c7-0ba5d01339fc",
					"name": "Account Gallery Favorites",
					"description": "Return the images the user has favorited in the gallery.\n\n#### Response Model: [Gallery Image](https://api.imgur.com/models/gallery_image) OR [Gallery Album](https://api.imgur.com/models/gallery_album)\n\n\n#### Parameters\n\n| Key  | Required | Description                                                                                     |\n|------|----------|-------------------------------------------------------------------------------------------------|\n| page | optional | integer - allows you to set the page number so you don't have to retrieve all the data at once. |\n| favoriteSort | optional | `oldest`, or `newest`. Defaults to `newest`.                                                    |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/gallery_favorites/{{page}}/{{favoritesSort}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "7879c0fd-cbde-d0aa-6286-4c5d8f66c642",
					"name": "Image Count",
					"description": "Returns the total number of images associated with the account.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/images/count",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "7ae43a01-cf06-92e3-ae1e-8585daad974f",
					"name": "Gallery Image",
					"description": "Get additional information about an image in the gallery.",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/gallery/image/{{galleryImageHash}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"owner": "3708974",
					"folder": "6fa917ac-8810-2bd5-590c-f96ca355fc27",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "7dc84d45-b616-c687-60c5-29ffd64abcd4",
					"name": "Account Gallery Profile",
					"description": "Returns the totals for the gallery profile.\n\n#### Response Model: [Gallery Profile](https://api.imgur.com/models/gallery_profile)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/settings",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "805e9624-58ca-9a3a-b160-0c87f290d8e0",
					"name": "Album / Image Reporting",
					"description": "Report an Image in the gallery\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)\n\n#### Parameters\n\n| Key    | Required | Description                                       |\n|--------|----------|---------------------------------------------------|\n| reason | optional | An integer representing the reason for the report (see codes below) |\n\n\n#### Report Reason Codes\n\n| Value | Description                         |\n|-------|-------------------------------------|\n| 1     | Doesn't belong on Imgur             |\n| 2     | Spam                                |\n| 3     | Abusive                             |\n| 4     | Mature content not marked as mature |\n| 5     | Pornography                         |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "Authorization: Bearer {{accessToken}}",
					"dataMode": "params",
					"data": [
						{
							"key": "reason",
							"value": "1",
							"type": "text"
						}
					],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/gallery/image/{{galleryHash}}/report",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "6fa917ac-8810-2bd5-590c-f96ca355fc27",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "80cf09db-7bea-1100-c493-75ca0152a0ab",
					"name": "Update Album (Un-Authed / Authed)",
					"description": "Update the information of an album. For anonymous albums, `albumHash` should be the deletehash that is returned at creation.\n\nIf uploading anonymous images to an anonymous album please use the optional parameter of `deletehashes[]` rather than `ids[]`. Note: including the optional `deletehashes[]` parameter will also work for authenticated user albums. There is no need to duplicate image ids with their corresponding deletehash.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)\n\n#### Parameters\n\n| Key            | Required | Description                                                                                                                          |\n|----------------|----------|--------------------------------------------------------------------------------------------------------------------------------------|\n| ids[]          | optional | The image ids that you want to be included in the album.                                                                             |\n| deletehashes[] | optional | The deletehashes of the images that you want to be included in the album.                                                            |\n| title          | optional | The title of the album                                                                                                               |\n| description    | optional | The description of the album                                                                                                         |\n| privacy        | optional | Sets the privacy level of the album. Values are : `public` &#124; `hidden` &#124; secret. Defaults to user's privacy settings for logged in users. |\n| layout         | optional | (_deprecated_) Sets the layout to display the album. Values are : `blog` &#124; `grid` &#124; `horizontal` &#124; `vertical`                                               |\n| cover          | optional | The ID of an image that you want to be the cover of the album                                                                        |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "PUT",
					"headers": "// Authorization: Client-ID {{clientId}}\nAuthorization: Bearer {{accessToken}}",
					"dataMode": "params",
					"data": [
						{
							"key": "ids[]",
							"value": "{{imageHash}}",
							"type": "text",
							"description": "Optional. The image ids that you want to be included in the album.",
							"enabled": false
						},
						{
							"key": "ids[]",
							"value": "{{image2Hash}}",
							"type": "text",
							"description": "any additional image ids...",
							"enabled": false
						},
						{
							"key": "deletehashes",
							"value": "{{deleteHash}}",
							"type": "text",
							"description": "Optional. The deletehashes of the images that you want to be included in the album."
						},
						{
							"key": "title",
							"value": "My dank meme album",
							"type": "text",
							"description": "Optional. The title of the album"
						},
						{
							"key": "description",
							"value": "This album contains a lot of dank memes. Be prepared.",
							"type": "text",
							"description": "Optional. The description of the album"
						},
						{
							"key": "privacy",
							"value": "public",
							"type": "text",
							"description": "Optional. Sets the privacy level of the album. Values are : `public` | `hidden` | `secret`. Defaults to user's privacy settings for logged in users.",
							"enabled": false
						},
						{
							"key": "cover",
							"value": "{{imageHash}}",
							"type": "text",
							"description": "Optional. The ID of an image that you want to be the cover of the album"
						}
					],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/album/{{albumHash}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}",
							"description": "Use this header if performing this action anonymously.",
							"enabled": false
						},
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}",
							"description": "Use this header if performing this action as a logged-in user."
						}
					],
					"owner": "3708974",
					"folder": "784415f7-0d09-da44-e489-fc991a97d3dd",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "87d2f677-f1e2-0d59-790f-6de0d4057e59",
					"name": "Generate Access Token",
					"description": "Given a user's refresh token, this endpoint generates an access token.",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "",
					"dataMode": "params",
					"data": [
						{
							"key": "refresh_token",
							"value": "{{refreshToken}}",
							"description": "The refresh token returned from the authorization code exchange\n",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "{{clientId}}",
							"description": "The client_id obtained during application registration\n",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "{{clientSecret}}",
							"description": "The client secret obtained during application registration\n",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "refresh_token",
							"description": "As defined in the OAuth2 specification, this field must contain a value of: `refresh_token`",
							"type": "text"
						}
					],
					"rawModeData": "",
					"url": "https://api.imgur.com/oauth2/token",
					"responses": [],
					"queryParams": [],
					"headerData": [],
					"events": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let tokenStore = postman.getEnvironmentVariable(\"refreshTokenStore\");",
									"",
									"// Bail early if we have no token store. ",
									"// This is only used for imgur testing because monitors run hourly",
									"// and we would hit a ratelimit if we didn't randomize the user",
									"if (!tokenStore) {",
									"    return;",
									"}",
									"",
									"function getRandomIntInclusive(min, max) {",
									"  min = Math.ceil(min);",
									"  max = Math.floor(max);",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"tokenStore = JSON.parse(tokenStore);",
									"",
									"const user = tokenStore[getRandomIntInclusive(0,9)];",
									"",
									"console.log(`using username ${user.username} with refresh token ${user.refreshToken} for testing`)",
									"",
									"postman.setEnvironmentVariable(\"username\", user.username)",
									"postman.setEnvironmentVariable(\"refreshToken\", user.refreshToken)",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// This endpoint is critical to the test flow, ",
									"// so this stops the request cycle if any of these tests error.",
									"postman.setNextRequest('end');",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"var accessToken = res.access_token;",
									"var refreshToken = res.refresh_token;",
									"tests['Returns 40 char hex access token'] = /^[a-f0-9]{40}$/i.test(accessToken);",
									"tests['Returns 40 char hex refresh token'] = /^[a-f0-9]{40}$/i.test(refreshToken);",
									"",
									"postman.setEnvironmentVariable(\"accessToken\", accessToken);",
									"",
									"postman.setNextRequest(\"Account Base\"); // Account -> Account Base"
								]
							}
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"preRequestScript": "let tokenStore = postman.getEnvironmentVariable(\"refreshTokenStore\");\n\n// Bail early if we have no token store. \n// This is only used for imgur testing because monitors run hourly\n// and we would hit a ratelimit if we didn't randomize the user\nif (!tokenStore) {\n    return;\n}\n\nfunction getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\ntokenStore = JSON.parse(tokenStore);\n\nconst user = tokenStore[getRandomIntInclusive(0,9)];\n\nconsole.log(`using username ${user.username} with refresh token ${user.refreshToken} for testing`)\n\npostman.setEnvironmentVariable(\"username\", user.username)\npostman.setEnvironmentVariable(\"refreshToken\", user.refreshToken)\n",
					"tests": "// This endpoint is critical to the test flow, \n// so this stops the request cycle if any of these tests error.\npostman.setNextRequest('end');\n\nvar res = JSON.parse(responseBody);\n\nvar accessToken = res.access_token;\nvar refreshToken = res.refresh_token;\ntests['Returns 40 char hex access token'] = /^[a-f0-9]{40}$/i.test(accessToken);\ntests['Returns 40 char hex refresh token'] = /^[a-f0-9]{40}$/i.test(refreshToken);\n\npostman.setEnvironmentVariable(\"accessToken\", accessToken);\n\npostman.setNextRequest(\"Account Base\"); // Account -> Account Base",
					"pathVariables": {}
				},
				{
					"id": "87de0fbe-aba7-4663-db35-bf332c1e1eb5",
					"name": "Album Images",
					"description": "Return all of the images in the album.\n\n#### Response Model: [Image](https://api.imgur.com/models/image)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/album/{{albumHash}}/images",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"owner": "3708974",
					"folder": "784415f7-0d09-da44-e489-fc991a97d3dd",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "8f08f324-a88f-b413-ab21-8377bb6c3a79",
					"name": "Share with Community (Album)",
					"description": "Share an Album or Image to the Gallery.",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "Authorization: Bearer {{accessToken}}",
					"dataMode": "params",
					"data": [
						{
							"key": "title",
							"value": "Get this cat to the front page",
							"description": "Required. The title of the image."
						},
						{
							"key": "topic",
							"value": "Funny",
							"description": "Optional. Topic name"
						},
						{
							"key": "terms",
							"value": "1",
							"description": "Optional. If the user has not accepted our terms yet, this endpoint will return an error. To by-pass the terms in general simply set this value to `1`."
						},
						{
							"key": "mature",
							"value": "0",
							"description": "Optional. If the post is [mature](http://imgur.com/rules), set this value to `1`."
						},
						{
							"key": "tags",
							"value": "funny,cat",
							"description": "Optional. The name of the tags you wish to associate with a post. Can be passed as `tags[]=funny&tags[]=cat` or `tags=funny,cat`"
						}
					],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/gallery/album/{{albumHash}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// This endpoint is critical to the test flow, ",
									"// so this stops the request cycle if any of these tests error.",
									"postman.setNextRequest('end');",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"tests['Status code is 200'] = (responseCode.code === 200);",
									"tests['Share was successful'] = res.data === true;",
									"",
									"postman.setNextRequest('Album / Image Voting'); // Gallery -> Album / Image Voting"
								]
							}
						}
					],
					"owner": "3708974",
					"folder": "6fa917ac-8810-2bd5-590c-f96ca355fc27",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"preRequestScript": null,
					"tests": "// This endpoint is critical to the test flow, \n// so this stops the request cycle if any of these tests error.\npostman.setNextRequest('end');\n\nvar res = JSON.parse(responseBody);\n\ntests['Status code is 200'] = (responseCode.code === 200);\ntests['Share was successful'] = res.data === true;\n\npostman.setNextRequest('Album / Image Voting'); // Gallery -> Album / Image Voting",
					"pathVariables": {}
				},
				{
					"id": "930bdbdd-91e3-2daa-44d1-90f55a2940ce",
					"name": "Add Images to an Album (Authed)",
					"description": "Adds the images to an album. You must specify ids[] or deletehashes[] in order to add an image to an album.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)\n\n#### Parameters\n\n| Key            | Required | Description                                             |\n|----------------|----------|---------------------------------------------------------|\n| ids[]          | optional | The image ids that you want to be added to the album.   |\n| deletehashes[] | optional | The image deletehashes that you want to be added to the album. |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "Authorization: Bearer {{accessToken}}",
					"dataMode": "params",
					"data": [
						{
							"key": "ids[]",
							"value": "{{imageHash}}",
							"type": "text"
						},
						{
							"key": "ids[]",
							"value": "{{imageHash2}}",
							"type": "text"
						}
					],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/album/{{albumHash}}/add",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "784415f7-0d09-da44-e489-fc991a97d3dd",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "94ea45fd-4db0-1589-3254-72d96d6b000c",
					"name": "Remove from Gallery",
					"description": "Remove an image from the public gallery. You must be logged in as the owner of the item to do this action.",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "DELETE",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/gallery/{{galleryHash}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// This endpoint is critical to the test flow, ",
									"// so this stops the request cycle if any of these tests error.",
									"postman.setNextRequest('end');",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"tests['Status code is 200'] = (responseCode.code === 200);",
									"tests['Removal was successful'] = res.data === true && res.success === true;",
									"",
									"postman.setNextRequest('Album Deletion (Authed)'); // Album -> Album Deletion (Authed)"
								]
							}
						}
					],
					"owner": "3708974",
					"folder": "6fa917ac-8810-2bd5-590c-f96ca355fc27",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"preRequestScript": null,
					"tests": "// This endpoint is critical to the test flow, \n// so this stops the request cycle if any of these tests error.\npostman.setNextRequest('end');\n\nvar res = JSON.parse(responseBody);\n\ntests['Status code is 200'] = (responseCode.code === 200);\ntests['Removal was successful'] = res.data === true && res.success === true;\n\npostman.setNextRequest('Album Deletion (Authed)'); // Album -> Album Deletion (Authed)",
					"pathVariables": {}
				},
				{
					"id": "a1e24f50-3f14-1281-f39c-c408e85da64e",
					"name": "Album",
					"description": "Get additional information about an album.\n\n#### Response Model: [Album](https://api.imgur.com/models/album)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/album/{{albumHash}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"owner": "3708974",
					"folder": "784415f7-0d09-da44-e489-fc991a97d3dd",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "a3d2221b-a29f-7232-b00e-9cb0cf7644ae",
					"name": "Subreddit Image",
					"description": "View a single image in the subreddit\n\n| Key       | Required | Value                         |\n|-----------|----------|-------------------------------|\n| subreddit | required | A valid subreddit name, ie `earthporn` |\n| image_id  | required | The ID for the image.         |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/gallery/r/{{subreddit}}/{{subredditImageId}}",
					"responses": [
						{
							"request": {
								"id": "afe92f68-5bb3-4f9f-a8bc-9a1bac532581",
								"description": "",
								"method": "GET",
								"headers": "Authorization: Client-ID {{clientId}}",
								"data": [],
								"rawModeData": "",
								"url": "https://api.imgur.com/3/gallery/r/{{subreddit}}/{{subredditImageId}}",
								"queryParams": [],
								"headerData": [
									{
										"key": "Authorization",
										"value": "Client-ID {{clientId}}",
										"type": "text",
										"enabled": true
									}
								]
							},
							"requestObject": "{\"id\":\"afe92f68-5bb3-4f9f-a8bc-9a1bac532581\",\"description\":\"\",\"method\":\"GET\",\"headers\":\"Authorization: Client-ID {{clientId}}\",\"data\":[],\"rawModeData\":\"\",\"url\":\"https://api.imgur.com/3/gallery/r/{{subreddit}}/{{subredditImageId}}\",\"queryParams\":[],\"headerData\":[{\"key\":\"Authorization\",\"value\":\"Client-ID {{clientId}}\",\"type\":\"text\",\"enabled\":true}]}",
							"id": "2bf6f0c2-cd25-8916-f211-d2c4298c1f30",
							"name": "Sample Response",
							"status": "OK",
							"responseCode": {
								"code": 200,
								"name": "OK",
								"detail": ""
							},
							"language": "json",
							"previewType": "html",
							"time": "993",
							"headers": [
								{
									"key": "Accept-Ranges",
									"value": "bytes",
									"name": "Accept-Ranges",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "X-RateLimit-ClientLimit, X-RateLimit-ClientRemaining, X-RateLimit-UserLimit, X-RateLimit-UserRemaining, X-RateLimit-UserReset",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Age",
									"value": "0",
									"name": "Age",
									"description": ""
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, post-check=0, pre-check=0",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": ""
								},
								{
									"key": "Content-Length",
									"value": "360",
									"name": "Content-Length",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Mon, 01 May 2017 23:03:20 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"f0c272ef6b4c973d8ad7948ae86b5cc63ef3173a\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Fastly-Debug-Digest",
									"value": "b0310a12f20ad36bd053b94f84c6f38437ec622543e9b8152375ed0568859998",
									"name": "Fastly-Debug-Digest",
									"description": ""
								},
								{
									"key": "Server",
									"value": "cat factory 1.0",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": ""
								},
								{
									"key": "X-Cache",
									"value": "MISS, MISS",
									"name": "X-Cache",
									"description": ""
								},
								{
									"key": "X-Cache-Hits",
									"value": "0, 0",
									"name": "X-Cache-Hits",
									"description": ""
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": ""
								},
								{
									"key": "X-Redux",
									"value": "1",
									"name": "X-Redux",
									"description": ""
								},
								{
									"key": "X-Served-By",
									"value": "cache-iad2146-IAD, cache-sea1025-SEA",
									"name": "X-Served-By",
									"description": ""
								},
								{
									"key": "X-Timer",
									"value": "S1493679800.815975,VS0,VE834",
									"name": "X-Timer",
									"description": ""
								},
								{
									"key": "access-control-allow-headers",
									"value": "Authorization, Content-Type, Accept, X-Mashape-Authorization, IMGURPLATFORM, IMGURUIDJAFO, sessionCount, IMGURMWBETA, IMGURMWBETAOPTIN",
									"name": "access-control-allow-headers",
									"description": ""
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET, PUT, POST, DELETE, OPTIONS",
									"name": "access-control-allow-methods",
									"description": ""
								},
								{
									"key": "access-control-allow-origin",
									"value": "*",
									"name": "access-control-allow-origin",
									"description": ""
								}
							],
							"cookies": [
								{
									"expirationDate": "Mon Jan 18 2038 06:14:07 GMT+0000 (UTC)",
									"httpOnly": false,
									"domain": "imgur.com",
									"path": "/",
									"secure": false,
									"value": "0ac920e771a1be71e700fdefdb22232a",
									"name": "IMGURSESSION"
								},
								{
									"expirationDate": "Mon Jan 18 2038 01:14:07 GMT+0000 (UTC)",
									"httpOnly": true,
									"domain": "imgur.com",
									"path": "/",
									"secure": false,
									"value": "1",
									"name": "_nc"
								},
								{
									"expirationDate": "Sun Oct 29 2017 05:19:01 GMT+0000 (UTC)",
									"httpOnly": false,
									"domain": "api.imgur.com",
									"path": "/",
									"secure": false,
									"value": "496bdd0d6f02f181ae3fe2eaf473380f%7E2yespXiWCe7Ur6k3qf5jgS7iksNTeBC6",
									"name": "authautologin"
								}
							],
							"text": "{\"data\":{\"id\":\"QJa0R6q\",\"title\":\"Shiprock - New Mexico [OC][1080x644]\",\"description\":null,\"datetime\":1493611803,\"type\":\"image\\/jpeg\",\"animated\":false,\"width\":1080,\"height\":644,\"size\":86174,\"views\":149667,\"bandwidth\":12897404058,\"vote\":null,\"favorite\":false,\"nsfw\":false,\"section\":\"EarthPorn\",\"account_url\":null,\"account_id\":null,\"is_ad\":false,\"tags\":[],\"in_most_viral\":false,\"in_gallery\":false,\"link\":\"http:\\/\\/i.imgur.com\\/QJa0R6q.jpg\",\"comment_count\":null,\"ups\":null,\"downs\":null,\"points\":null,\"score\":149665,\"is_album\":false},\"success\":true,\"status\":200}",
							"rawDataType": "text",
							"owner": "3708974"
						}
					],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"owner": "3708974",
					"folder": "6fa917ac-8810-2bd5-590c-f96ca355fc27",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "a7f26a33-12ee-b805-d5b4-d1a582c6ca40",
					"name": "Comment Deletion",
					"description": "Delete a comment by the given id.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "DELETE",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/comment/{{commentId}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "8d68524f-ae43-8376-229d-111330be193f",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "a800702e-8521-6b8c-7b70-aa8d288c15d4",
					"name": "Gallery Album",
					"description": "Get additional information about an album in the gallery.\n\n#### Response Model: [Gallery Album](https://api.imgur.com/models/gallery_album)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/gallery/album/{{galleryHash}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"owner": "3708974",
					"folder": "6fa917ac-8810-2bd5-590c-f96ca355fc27",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "a82ad962-eb52-9ebf-6746-8a213c7a663c",
					"name": "Add Images to an Album (Un-Authed)",
					"description": "Takes parameter, `deletehashes[]`, as an array of deletehashes to add to the album. Alternatively, the `deletehashes` parameter can take a comma delimted string of deletehashes.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)\n\n#### Parameters\n\n| Key   | Required | Description                                           |\n|-------|----------|-------------------------------------------------------|\n| deletehashes[] | required | The image deletehashes that you want to be added to the album. The [] represents the ability to use this variable as an array. |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "Authorization: Client-ID {{clientId}}",
					"dataMode": "params",
					"data": [
						{
							"key": "deletehashes[]",
							"value": "{{imageDeleteHash}}",
							"type": "text"
						},
						{
							"key": "deletehashes[]",
							"value": "{{imageDeleteHash2}}",
							"type": "text"
						}
					],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/album/{{albumDeleteHash}}/add",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"owner": "3708974",
					"folder": "784415f7-0d09-da44-e489-fc991a97d3dd",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "a95d9a2b-3b0b-5552-437b-f79457f777d8",
					"name": "Comment IDs",
					"description": "Return an array of all of the comment IDs.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)\n\n#### Parameters\n\n| Key  | Required | Value                                                         |\n|------|----------|---------------------------------------------------------------|\n| commentSort | optional | `best`, `worst`, `oldest`, or `newest`. Defaults to `newest`. |\n| page | optional | Page number (50 items per page). Defaults to `0`.               |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/comments/ids/{{sort}}/{{page}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "aea0bcca-a975-76d6-c6ce-816034f51d9a",
					"name": "Remove Images from an Album (Authed)",
					"description": "Takes parameter, `ids[]`, as an array of ids and removes from the album.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)\n\n\n#### Parameters\n\n| Key   | Required | Description                                           |\n|-------|----------|-------------------------------------------------------|\n| ids[] | required | The image ids that you want to be removed from the album. |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "Authorization: Bearer {{accessToken}}",
					"dataMode": "params",
					"data": [
						{
							"key": "ids[]",
							"value": "{{imageHash}}",
							"type": "text"
						},
						{
							"key": "ids[]",
							"value": "{{imageHash2}}",
							"type": "text"
						}
					],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/album/{{albumHash}}/remove_images",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "784415f7-0d09-da44-e489-fc991a97d3dd",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "b0a58172-5aed-1dd4-693b-f583e817e7f2",
					"name": "Images",
					"description": "Return all of the images associated with the account. You can page through the images by setting the page, this defaults to 0.\n\n#### Response Model: [Image](https://api.imgur.com/models/image)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/images/{{page}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "b269f0d9-21bf-1f47-ef33-45d456fcafca",
					"name": "Album / Image Voting",
					"description": "Vote for an image, `up` or `down` vote. Send `veto` to undo a vote.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/gallery/{{galleryHash}}/vote/{{vote}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// This endpoint is critical to the test flow, ",
									"// so this stops the request cycle if any of these tests error.",
									"postman.setNextRequest('end');",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"tests['Status code is 200'] = (responseCode.code === 200);",
									"tests['Vote was successful'] = res.data === true && res.success === true;",
									"",
									"postman.setNextRequest('Album / Image Votes'); // Gallery -> Album / Image Votes"
								]
							}
						}
					],
					"owner": "3708974",
					"folder": "6fa917ac-8810-2bd5-590c-f96ca355fc27",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"preRequestScript": null,
					"tests": "// This endpoint is critical to the test flow, \n// so this stops the request cycle if any of these tests error.\npostman.setNextRequest('end');\n\nvar res = JSON.parse(responseBody);\n\ntests['Status code is 200'] = (responseCode.code === 200);\ntests['Vote was successful'] = res.data === true && res.success === true;\n\npostman.setNextRequest('Album / Image Votes'); // Gallery -> Album / Image Votes",
					"pathVariables": {}
				},
				{
					"id": "bb8297e8-49e4-80a5-7c89-11cfa3280e24",
					"name": "Share with Community (Image)",
					"description": "Share an Album or Image to the Gallery.",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "Authorization: Bearer {{accessToken}}",
					"dataMode": "params",
					"data": [
						{
							"key": "title",
							"value": "Get this cat to the front page",
							"type": "text",
							"description": "Required. The title of the image."
						},
						{
							"key": "topic",
							"value": "Funny",
							"type": "text",
							"description": "Optional. Topic name"
						},
						{
							"key": "terms",
							"value": "1",
							"type": "text",
							"description": "Optional. If the user has not accepted our terms yet, this endpoint will return an error. To by-pass the terms in general simply set this value to `1`."
						},
						{
							"key": "mature",
							"value": "0",
							"type": "text",
							"description": "Optional. If the post is [mature](http://imgur.com/rules), set this value to `1`.",
							"enabled": false
						},
						{
							"key": "tags",
							"value": "funny,cat",
							"type": "text",
							"description": "Optional. The name of the tags you wish to associate with a post. Can be passed as `tags[]=funny&tags[]=cat` or `tags=funny,cat`"
						}
					],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/gallery/image/{{imageHash}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "6fa917ac-8810-2bd5-590c-f96ca355fc27",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "bec52fe9-3709-679d-11ac-8e695543402f",
					"name": "Account Favorites",
					"description": "Returns the users favorited images, only accessible if you're logged in as the user.\n\n#### Response Model: [Gallery Image](https://api.imgur.com/models/gallery_image) OR [Gallery Album](https://api.imgur.com/models/gallery_album)\n\n*Note:* vote data ('ups', 'downs', and 'score') may be null if the favorited item hasn't been submitted to gallery\n\n\n#### Parameters\n\n| Key  | Required | Description                                                                                     |\n|------|----------|-------------------------------------------------------------------------------------------------|\n| page | optional | integer - allows you to set the page number so you don't have to retrieve all the data at once. |\n| sort | optional | 'oldest', or 'newest'. Defaults to 'newest'.                                                    |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/favorites/{{page}}/{{favoritesSort}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"events": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// postman.setEnvironmentVariable(\"username\", \"postmanTestUser1\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"if (jsonData.status === 403) {",
									"    postman.setNextRequest(\"request_name\");",
									"} else {",
									"    // tests[\"Your test name\"] = jsonData.value === 100;",
									"}"
								]
							}
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"preRequestScript": "// postman.setEnvironmentVariable(\"username\", \"postmanTestUser1\");",
					"tests": "var jsonData = JSON.parse(responseBody);\n\nif (jsonData.status === 403) {\n    postman.setNextRequest(\"request_name\");\n} else {\n    // tests[\"Your test name\"] = jsonData.value === 100;\n}",
					"pathVariables": {}
				},
				{
					"id": "c4fb7e3b-ea6f-6706-02c6-f1ad59a0614d",
					"name": "Comment Count",
					"description": "Return a count of all of the comments associated with the account.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/comments/count",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "caff9942-ea83-6bfb-9153-12fffc82a1f9",
					"name": "Album Deletion (Un-Authed)",
					"description": "Delete an album with a given deletehash.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "DELETE",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/album/{{albumDeleteHash}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"owner": "3708974",
					"folder": "784415f7-0d09-da44-e489-fc991a97d3dd",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "cc5ae98e-c3a6-ee65-9a7d-1b61e32e2fe2",
					"name": "Replies",
					"description": "Returns all of the reply notifications for the user. Required to be logged in as that user.\n\n#### Response Model: [Notification](https://api.imgur.com/models/notification)\n\n#### Parameters\n\n| Key | Required | Value                                                                                          |\n|-----|----------|------------------------------------------------------------------------------------------------|\n| new | optional | boolean - `false` for all notifications, `true` for only non-viewed notification. Default is `true`. |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/notifications/replies",
					"responses": [],
					"queryParams": [],
					"headerData": [],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "cd0c3945-bd1f-046f-b820-b0c6d29fdec4",
					"name": "Gallery Item Tags",
					"description": "| Key | Required | Value                  |\n|-----|----------|------------------------|\n| id  | required | ID of the gallery item |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/gallery/{{galleryHash}}/tags",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"owner": "3708974",
					"folder": "6fa917ac-8810-2bd5-590c-f96ca355fc27",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "d010c3a0-b63e-c8b3-b21d-711a8ac76a6f",
					"name": "Comment Creation",
					"description": "Creates a new comment, returns the ID of the comment.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)\n\n#### Parameters\n\n| Key       | Required | Description                                                                    |\n|-----------|----------|--------------------------------------------------------------------------------|\n| image_id  | required | The ID of the image or album in the gallery that you wish to comment on                 |\n| comment   | required | The comment text, this is what will be displayed                               |\n| parent_id | optional | The ID of the parent comment, this is an alternative method to create a reply. |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "Authorization: Bearer {{accessToken}}",
					"dataMode": "params",
					"data": [
						{
							"key": "image_id",
							"value": "{{imageHash}}",
							"type": "text"
						},
						{
							"key": "image_id",
							"value": "{{albumHash}}",
							"type": "text",
							"enabled": false
						},
						{
							"key": "comment",
							"value": "I'm a giraffe!",
							"type": "text"
						},
						{
							"key": "parent_id",
							"value": "{{commentId}}",
							"type": "text",
							"enabled": false
						}
					],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/comment",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "8d68524f-ae43-8376-229d-111330be193f",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "d05f33c9-4ce5-f3f4-c2d9-003d24043467",
					"name": "Album Deletion (Authed)",
					"description": "Delete an album with a given ID. You are required to be logged in as the user to delete the album.\n\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "DELETE",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/album/{{albumHash}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// This endpoint is critical to the test flow, ",
									"// so this stops the request cycle if any of these tests error.",
									"postman.setNextRequest('end');",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"tests['Status code is 200'] = (responseCode.code === 200);",
									"tests['Album deletion was successful'] = res.success === true && res.data === true;",
									"",
									"postman.setNextRequest('Image Deletion (Authed)'); // Image -> Image Deletion (Authed)"
								]
							}
						}
					],
					"owner": "3708974",
					"folder": "784415f7-0d09-da44-e489-fc991a97d3dd",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"preRequestScript": null,
					"tests": "// This endpoint is critical to the test flow, \n// so this stops the request cycle if any of these tests error.\npostman.setNextRequest('end');\n\nvar res = JSON.parse(responseBody);\n\ntests['Status code is 200'] = (responseCode.code === 200);\ntests['Album deletion was successful'] = res.success === true && res.data === true;\n\npostman.setNextRequest('Image Deletion (Authed)'); // Image -> Image Deletion (Authed)",
					"pathVariables": {}
				},
				{
					"id": "d0ed0cc3-137f-986a-1360-bee54723d104",
					"name": "Comment Deletion",
					"description": "Delete a comment. You are required to be logged in as the user whom created the comment.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "DELETE",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/comment/{{commentId}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "d95b8c4f-967a-2943-dc62-5d22df2b1a9b",
					"name": "Albums (Un-Authed / Authed)",
					"description": "Get all the albums associated with the account. Must be logged in as the user to see secret and hidden albums.\n\n#### Response Model: [Album](https://api.imgur.com/models/album)\n\n#### Parameters\n| Key  | Required | Description                                                                                     |\n|------|----------|-------------------------------------------------------------------------------------------------|\n| page | optional | integer - allows you to set the page number so you don't have to retrieve all the data at once. |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}\n// Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/albums/{{page}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						},
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}",
							"enabled": false
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "db3c4e2a-319c-9ae4-bb9e-7fbb45563f1b",
					"name": "Image",
					"description": "Return information about a specific image. This endpoint works the same as the [Image Endpoint](https://api.imgur.com/endpoints/image/). You can use any of the additional actions that the image endpoint with this endpoint.\n\n#### Response Model: [Image](https://api.imgur.com/models/image)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/image/{{imageId}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "dbdc4f5b-0994-62df-ebee-e2fc4b62c094",
					"name": "Image IDs",
					"description": "Returns an array of Image IDs that are associated with the account.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)\n",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/images/ids/{{page}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "dd88301c-10f2-bece-2697-8520b9ce5f0f",
					"name": "Album IDs (Un-Authed / Authed)",
					"description": "Return an array of all of the album IDs (hashes).\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}\n// Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/albums/ids/{{page}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						},
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}",
							"enabled": false
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "df5a3cc3-b0a2-a3ee-2243-cec2794116b1",
					"name": "Account Available Avatars (Un-authed / Authed)",
					"description": "If unauthentiated, get list of default trophies a user can select from. The username need not exist to get the listing.\n\nIf authenticated, get the list of available avatars for the given user.",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "// Authorization: Client-ID {{clientId}}\nAuthorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/available_avatars",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}",
							"description": "If unauthenticated, send the Client-ID",
							"enabled": false
						},
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}",
							"description": "If authenticated send the bearer token"
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "e69240f1-0fd7-6d03-67fe-899ddeb943ad",
					"name": "Account Submissions",
					"description": "Return the images a user has submitted to the gallery. You can add sorting as well after paging. Sorts can be: newest (default), oldest, worst, best. \n\n#### Response Model: [Gallery Image](https://api.imgur.com/models/gallery_image) OR [Gallery Album](https://api.imgur.com/models/gallery_album)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/submissions/{{page}}",
					"responses": [
						{
							"request": {
								"id": "b6ff771e-6d49-4647-9073-fa18481aca39",
								"description": "",
								"method": "GET",
								"headers": "Authorization: Client-ID {{clientId}}",
								"data": [],
								"rawModeData": "",
								"url": "https://api.imgur.com/3/account/{{username}}/submissions/{{page}}/{{sort}}",
								"queryParams": [],
								"headerData": [
									{
										"key": "Authorization",
										"value": "Client-ID {{clientId}}"
									}
								]
							},
							"requestObject": "{\"id\":\"b6ff771e-6d49-4647-9073-fa18481aca39\",\"description\":\"\",\"method\":\"GET\",\"headers\":\"Authorization: Client-ID {{clientId}}\",\"data\":[],\"rawModeData\":\"\",\"url\":\"https://api.imgur.com/3/account/{{username}}/submissions/{{page}}/{{sort}}\",\"queryParams\":[],\"headerData\":[{\"key\":\"Authorization\",\"value\":\"Client-ID {{clientId}}\"}]}",
							"id": "7ae187e6-22d0-f501-0046-493058dba2ac",
							"name": "Account Submissions",
							"status": "OK",
							"responseCode": {
								"code": 200,
								"name": "OK",
								"detail": ""
							},
							"language": "Text",
							"previewType": "html",
							"time": "0",
							"headers": [],
							"cookies": [],
							"text": "",
							"rawDataType": "text",
							"owner": "3708974"
						}
					],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "e91b52f9-1158-5e36-071a-c560b7f6ef8f",
					"name": "Album / Image Votes",
					"description": "Get the vote information about an image\n\n#### Response Model: [Vote](https://api.imgur.com/models/vote)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/gallery/{{galleryHash}}/votes",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// This endpoint is critical to the test flow, ",
									"// so this stops the request cycle if any of these tests error.",
									"postman.setNextRequest('end');",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"tests['Status code is 200'] = (responseCode.code === 200);",
									"tests['Number of upvotes is 1'] = res.data.ups === 1; // should be 1 if running in monitor, since this is a newly created post and we just upvoted it",
									"tests['Number of downvotes is 0'] = res.data.downs === 0;",
									"",
									"postman.setNextRequest('Album / Image Comment Creation'); // Gallery -> Album / Image Comment Creation"
								]
							}
						}
					],
					"owner": "3708974",
					"folder": "6fa917ac-8810-2bd5-590c-f96ca355fc27",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"preRequestScript": null,
					"tests": "// This endpoint is critical to the test flow, \n// so this stops the request cycle if any of these tests error.\npostman.setNextRequest('end');\n\nvar res = JSON.parse(responseBody);\n\ntests['Status code is 200'] = (responseCode.code === 200);\ntests['Number of upvotes is 1'] = res.data.ups === 1; // should be 1 if running in monitor, since this is a newly created post and we just upvoted it\ntests['Number of downvotes is 0'] = res.data.downs === 0;\n\npostman.setNextRequest('Album / Image Comment Creation'); // Gallery -> Album / Image Comment Creation",
					"pathVariables": {}
				},
				{
					"id": "e92bd083-44a6-75ba-459d-cd3744f81efe",
					"name": "Image Deletion",
					"description": "Deletes an Image. This requires a delete hash rather than an ID.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "DELETE",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/{{username}}/image/{{deleteHash}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "ee7dafad-7020-9c9f-f7be-3b11d9134ca7",
					"name": "Account Images",
					"description": "To make requests for the current account, you may use `me` as the `{{username}}` parameter. For example, `https://api.imgur.com/3/account/me/images` will request all the images for the account that is currently authenticated.",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/me/images",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// This endpoint is critical to the test flow, ",
									"// so this stops the request cycle if any of these tests error.",
									"postman.setNextRequest('end');",
									"",
									"var images = JSON.parse(responseBody).data.map(function(image){",
									"    return image.id",
									"});",
									"",
									"// grab the hash of the image that was just uploaded",
									"var justUploadedImageHash = postman.getEnvironmentVariable(\"imageHash\");",
									"",
									"tests['Status code is 200'] = (responseCode.code === 200);",
									"tests['Response includes the previously uploaded image'] = images.indexOf(justUploadedImageHash) > -1;",
									"",
									"postman.setNextRequest('Album Creation (Un-Authed / Authed)'); // Album -> Album Creation (Un-Authed / Authed)"
								]
							}
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"preRequestScript": null,
					"tests": "// This endpoint is critical to the test flow, \n// so this stops the request cycle if any of these tests error.\npostman.setNextRequest('end');\n\nvar images = JSON.parse(responseBody).data.map(function(image){\n    return image.id\n});\n\n// grab the hash of the image that was just uploaded\nvar justUploadedImageHash = postman.getEnvironmentVariable(\"imageHash\");\n\ntests['Status code is 200'] = (responseCode.code === 200);\ntests['Response includes the previously uploaded image'] = images.indexOf(justUploadedImageHash) > -1;\n\npostman.setNextRequest('Album Creation (Un-Authed / Authed)'); // Album -> Album Creation (Un-Authed / Authed)",
					"pathVariables": {}
				},
				{
					"id": "ef2dfc90-28a7-0c9b-b2a2-f6b8f8a36cf3",
					"name": "Update Image Information (Authed)",
					"description": "Updates the title or description of an image.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)\n\n#### Parameters\n\n| Key         | Required | Description                   |\n|-------------|----------|-------------------------------|\n| title       | optional | The title of the image.       |\n| description | optional | The description of the image. |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "Authorization: Bearer {{accessToken}}",
					"dataMode": "params",
					"data": [
						{
							"key": "title",
							"value": "Heart",
							"type": "text"
						},
						{
							"key": "description",
							"value": "This is an image of a heart outline.",
							"type": "text"
						}
					],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/image/{{imageHash}}",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "f5b96361-d3b5-82fd-ebb8-fca422bdca4f",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "f761f3ee-6c38-1bcc-0c82-23e81408d0f3",
					"name": "Account Settings",
					"description": "Returns the account settings, only accessible if you're logged in as the user.\n\n",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Bearer {{accessToken}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/account/me/settings",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "445a2a36-d28b-f20e-6726-ea93763a6b2e",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "fe0c8ddd-775f-790e-2c44-35c693b48e6e",
					"name": "Report",
					"description": "Report a comment for being inappropriate.",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "POST",
					"headers": "Authorization: Bearer {{accessToken}}",
					"dataMode": "params",
					"data": [
						{
							"key": "reason",
							"value": "{{commentReportReason}}",
							"description": "Optional. An integer representing the reason for the report\n\n| Value | Description                         |\n|-------|-------------------------------------|\n| 1     | Doesn't belong on Imgur             |\n| 2     | Spam                                |\n| 3     | Abusive                             |\n| 4     | Mature content not marked as mature |\n| 5     | Pornography                         |",
							"type": "text"
						}
					],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/comment/{{commentId}}/report",
					"responses": [],
					"queryParams": [],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Bearer {{accessToken}}"
						}
					],
					"owner": "3708974",
					"folder": "8d68524f-ae43-8376-229d-111330be193f",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				},
				{
					"id": "fea0ab15-534b-dcaf-38d7-cbe96ca65c38",
					"name": "Gallery",
					"description": "| Key       | Required | Value                                                                                             |\n|-----------|----------|---------------------------------------------------------------------------------------------------|\n| section   | optional | `hot` &#124; `top` &#124; `user`. Defaults to `hot`\n| sort      | optional | `viral` &#124; `top` &#124; `time` &#124; `rising` (only available with `user` section). Defaults to `viral` |\n| page      | optional | integer - the data paging number                                                                  |\n| window    | optional | Change the date range of the request if the section is `top`. Accepted values are `day` &#124; `week` &#124; `month` &#124; `year` &#124; `all`. Defaults to `day` |",
					"collectionId": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"method": "GET",
					"headers": "Authorization: Client-ID {{clientId}}",
					"data": [],
					"rawModeData": "",
					"url": "https://api.imgur.com/3/gallery/{{section}}/{{sort}}/{{window}}/{{page}}?showViral={{showViral}}&mature={{showMature}}&album_previews={{albumPreviews}}",
					"responses": [],
					"queryParams": [
						{
							"key": "showViral",
							"value": "{{showViral}}",
							"equals": true,
							"description": "Optional. `true` | `false` - Show or hide viral images from the `user` section. Defaults to `true`"
						},
						{
							"key": "mature",
							"value": "{{showMature}}",
							"equals": true,
							"description": "Optional. `true` | `false` - Show or hide mature (nsfw) images in the response section. Defaults to `false` *NOTE:* This parameter is only required if un-authed. The response for authed users will respect their account setting."
						},
						{
							"key": "album_previews",
							"value": "{{albumPreviews}}",
							"equals": true,
							"description": "Optional. `true` | `false` - Include image metadata for gallery posts which are albums "
						}
					],
					"headerData": [
						{
							"key": "Authorization",
							"value": "Client-ID {{clientId}}"
						}
					],
					"owner": "3708974",
					"folder": "6fa917ac-8810-2bd5-590c-f96ca355fc27",
					"collection_id": "cd901dc4-fc7c-8456-0e7e-5b86a0e52378",
					"pathVariables": {}
				}
			]
		}
	],
	"environments": [
		{
			"id": "a87fd4bf-2e5f-aa9e-5027-0ad005cc3be8",
			"name": "GAMEFRAME LOCAL",
			"values": [
				{
					"enabled": true,
					"key": "host",
					"value": "localhost",
					"type": "text"
				}
			],
			"team": null,
			"timestamp": 1519251917894
		},
		{
			"id": "25e64539-302d-f019-87dd-b8f5b9fb3575",
			"name": "GAMEFRAME REMOTE",
			"values": [
				{
					"enabled": true,
					"key": "host",
					"value": "api.gameframe.online",
					"type": "text"
				},
				{
					"enabled": true,
					"key": "game_id",
					"value": "7",
					"type": "text"
				},
				{
					"enabled": true,
					"key": "page",
					"value": "2",
					"type": "text"
				},
				{
					"enabled": true,
					"key": "results_per_page",
					"value": "3",
					"type": "text"
				},
				{
					"enabled": true,
					"key": "developer_id",
					"value": "2",
					"type": "text"
				},
				{
					"enabled": true,
					"key": "article_id",
					"value": "335533",
					"type": "text"
				},
				{
					"enabled": true,
					"key": "video_id",
					"value": "4740",
					"type": "text"
				}
			],
			"team": null,
			"timestamp": 1524191730791
		}
	],
	"headerPresets": [],
	"globals": []
}